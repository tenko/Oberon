// Original GuiHello C app by Francisco Garcia Collado, MIT Licence
// Translated to Oberon+ by Rochus Keller

module Labels

	import D := NAppDraw, C := NAppCore, G := NAppWidgets

	const
		i_LABEL_01 = "Hello."
		i_LABEL_02 = "Hello, I'm a Label."
		i_LABEL_03 = "Hello, I'm a Label, longer than first."
		i_LABEL_04 = "Hello, I'm a Label, longer than first and longer than second."
		i_LABEL_05 = "Hello, I'm a Label, longer than first, longer than second and longer than third."
		i_LABEL_06 = "Hello, I'm a Label, longer than first, longer than second, longer than third and longer than fourth."
		i_LABEL_07 = "Mouse sensitive label"
		
	proc i_OnLayoutWidth(data: *void; event: *C.Event)
	type
		EvButtonPtr = *G.EvButton
		LayoutPtr = *G.Layout
	var
		p: EvButtonPtr
		width: real
		layout: LayoutPtr
	begin
    p := cast(EvButtonPtr, C.event_params_imp(event, "EvButton"))
    width := 0
    case p.index of
    | 0:
        width := 0
    | 1:
        width := 100
    | 2:
        width := 200
    | 3:
        width := 300
    | 4:
        width := 400
    else
	    assert(false)
    end

		layout := cast(LayoutPtr,data)
    G.layout_hsize(layout, 0, width)
    G.layout_update(layout)
	end i_OnLayoutWidth
	
	proc i_width_popup(layout: *G.Layout): *G.PopUp
	var
		popup: *G.PopUp
	begin
    popup := G.popup_create()
    G.popup_add_elem(popup, "Natural", nil)
    G.popup_add_elem(popup, "100px", nil)
    G.popup_add_elem(popup, "200px", nil)
    G.popup_add_elem(popup, "300px", nil)
    G.popup_add_elem(popup, "400px", nil)
    G.popup_OnSelect(popup, C.listener_imp(layout, i_OnLayoutWidth))
    return popup
	end i_width_popup
	
	proc labels_single_line*(): *G.Panel
	var
		panel: *G.Panel
		layout: *G.Layout
		popup: *G.PopUp
		label1, label2, label3, label4, label5, label6: *G.Label
		c1, c2, c3: D.color_t
	begin
    panel := G.panel_create()
    layout := G.layout_create(1, 7)
    popup := i_width_popup(layout)
    label1 := G.label_create()
    label2 := G.label_create()
    label3 := G.label_create()
    label4 := G.label_create()
    label5 := G.label_create()
    label6 := G.label_create()
    c1 := G.gui_alt_color(D.color_rgb(192, 255, 255), D.color_rgb(48, 112, 112))
    c2 := G.gui_alt_color(D.color_rgb(255, 192, 255), D.color_rgb(128, 48, 112))
    c3 := G.gui_alt_color(D.color_rgb(255, 255, 192), D.color_rgb(112, 112, 48))
    G.label_text(label1, i_LABEL_01)
    G.label_text(label2, i_LABEL_02)
    G.label_text(label3, i_LABEL_03)
    G.label_text(label4, i_LABEL_04)
    G.label_text(label5, i_LABEL_05)
    G.label_text(label6, i_LABEL_06)
    G.label_bgcolor(label1, c1)
    G.label_bgcolor(label2, c2)
    G.label_bgcolor(label3, c3)
    G.label_bgcolor(label4, c1)
    G.label_bgcolor(label5, c2)
    G.label_bgcolor(label6, c3)
    G.layout_popup(layout, popup, 0, 0)
    G.layout_label(layout, label1, 0, 1)
    G.layout_label(layout, label2, 0, 2)
    G.layout_label(layout, label3, 0, 3)
    G.layout_label(layout, label4, 0, 4)
    G.layout_label(layout, label5, 0, 5)
    G.layout_label(layout, label6, 0, 6)
    G.layout_vmargin(layout, 0, 5)
    G.panel_layout(panel, layout)
    return panel
	end labels_single_line
	
	proc labels_multi_line*(): *G.Panel
	var
		panel: *G.Panel
		layout: *G.Layout
		popup: *G.PopUp
		label1, label2, label3, label4, label5, label6: *G.Label
		c1, c2, c3: D.color_t
	begin
    panel := G.panel_create()
    layout := G.layout_create(1, 7)
    popup := i_width_popup(layout)
    label1 := G.label_multiline()
    label2 := G.label_multiline()
    label3 := G.label_multiline()
    label4 := G.label_multiline()
    label5 := G.label_multiline()
    label6 := G.label_multiline()
    c1 := G.gui_alt_color(D.color_rgb(192, 255, 255), D.color_rgb(48, 112, 112))
    c2 := G.gui_alt_color(D.color_rgb(255, 192, 255), D.color_rgb(128, 48, 112))
    c3 := G.gui_alt_color(D.color_rgb(255, 255, 192), D.color_rgb(112, 112, 48))
    G.label_text(label1, i_LABEL_01);
    G.label_text(label2, i_LABEL_02);
    G.label_text(label3, i_LABEL_03);
    G.label_text(label4, i_LABEL_04);
    G.label_text(label5, i_LABEL_05);
    G.label_text(label6, i_LABEL_06);
    G.label_bgcolor(label1, c1);
    G.label_bgcolor(label2, c2);
    G.label_bgcolor(label3, c3);
    G.label_bgcolor(label4, c1);
    G.label_bgcolor(label5, c2);
    G.label_bgcolor(label6, c3);
    G.label_align(label4, D.ekLEFT);
    G.label_align(label5, D.ekCENTER);
    G.label_align(label6, D.ekRIGHT);
    G.layout_popup(layout, popup, 0, 0);
    G.layout_label(layout, label1, 0, 1);
    G.layout_label(layout, label2, 0, 2);
    G.layout_label(layout, label3, 0, 3);
    G.layout_label(layout, label4, 0, 4);
    G.layout_label(layout, label5, 0, 5);
    G.layout_label(layout, label6, 0, 6);
    G.layout_vmargin(layout, 0, 5);
    G.panel_layout(panel, layout);
    return panel;
	end labels_multi_line
	
	proc labels_mouse_over*(): *G.Panel
	var
		panel: *G.Panel
		layout: *G.Layout
		popup: *G.PopUp
		label1, label2, label3, label4, label5, label6: *G.Label
		font: *D.Font
		tmp: carray 1 of *D.Font
	begin
    panel := G.panel_create()
    layout := G.layout_create(1, 5)
    font := D.font_system(20, bitor(D.ekFNORMAL,D.ekFPIXELS))
    label1 := G.label_create()
    label2 := G.label_create()
    label3 := G.label_create()
    label4 := G.label_create()
    label5 := G.label_create()
    G.label_text(label1, i_LABEL_07);
    G.label_text(label2, i_LABEL_07);
    G.label_text(label3, i_LABEL_07);
    G.label_text(label4, i_LABEL_07);
    G.label_text(label5, i_LABEL_07);
    G.label_font(label1, font);
    G.label_font(label2, font);
    G.label_font(label3, font);
    G.label_font(label4, font);
    G.label_font(label5, font);
    G.label_color_over(label1, D.kCOLOR_RED);
    G.label_color_over(label2, D.kCOLOR_RED);
    G.label_color_over(label3, D.kCOLOR_RED);
    G.label_color_over(label4, D.kCOLOR_RED);
    G.label_color_over(label5, D.kCOLOR_RED);
    G.label_style_over(label1, D.ekFBOLD);
    G.label_style_over(label2, D.ekFITALIC);
    G.label_style_over(label3, D.ekFSTRIKEOUT);
    G.label_style_over(label4, D.ekFUNDERLINE);
    G.label_bgcolor_over(label5, D.kCOLOR_CYAN);
    G.layout_label(layout, label1, 0, 0);
    G.layout_label(layout, label2, 0, 1);
    G.layout_label(layout, label3, 0, 2);
    G.layout_label(layout, label4, 0, 3);
    G.layout_label(layout, label5, 0, 4);
    G.panel_layout(panel, layout);
    tmp[0] := font
    D.font_destroy(tmp);
    return panel;
	end labels_mouse_over
end Labels
