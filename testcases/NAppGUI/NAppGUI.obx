// Generated by C2OBX 2022-02-05 on 2022-02-06T18:41:16

definition NAppGUI [extern 'C', dll 'NAppGUI']

    // from array.h
    proc array_create(esize: uint16_t; type_: *[]char_t): *Array
    proc array_copy(array_: *Array; func_copy: FPtr_scopy; type_: *[]char_t): *Array
    proc array_copy_ptr(array_: *Array; func_copy: FPtr_copy; type_: *[]char_t): *Array
    proc array_read(stream: *Stream; esize: uint16_t; func_read_init: FPtr_read_init; type_: *[]char_t): *Array
    proc array_read_ptr(stream: *Stream; func_read: FPtr_read; type_: *[]char_t): *Array
    proc array_destroy(array_: *[]*Array; func_remove: FPtr_remove; type_: *[]char_t)
    proc array_destopt(array_: *[]*Array; func_remove: FPtr_remove; type_: *[]char_t)
    proc array_destroy_ptr(array_: *[]*Array; func_destroy: FPtr_destroy; type_: *[]char_t)
    proc array_destopt_ptr(array_: *[]*Array; func_destroy: FPtr_destroy; type_: *[]char_t)
    proc array_clear(array_: *Array; func_remove: FPtr_remove)
    proc array_clear_ptr(array_: *Array; func_destroy: FPtr_destroy)
    proc array_write(stream: *Stream; array_: *Array; func_write: FPtr_write)
    proc array_write_ptr(stream: *Stream; array_: *Array; func_write: FPtr_write)
    proc array_size(array_: *Array): uint32_t
    proc array_esize(array_: *Array): uint32_t
    proc array_get(array_: *Array; pos: uint32_t): *[]byte_t
    proc array_get_last(array_: *Array): *[]byte_t
    proc array_all(array_: *Array): *[]byte_t
    proc array_insert(array_: *Array; pos: uint32_t; n: uint32_t): *[]byte_t
    proc array_insert0(array_: *Array; pos: uint32_t; n: uint32_t): *[]byte_t
    proc array_join(dest: *Array; src: *Array; func_copy: FPtr_scopy)
    proc array_join_ptr(dest: *Array; src: *Array; func_copy: FPtr_copy)
    proc array_delete(array_: *Array; pos: uint32_t; n: uint32_t; func_remove: FPtr_remove)
    proc array_delete_ptr(array_: *Array; pos: uint32_t; n: uint32_t; func_destroy: FPtr_destroy)
    proc array_pop(array_: *Array; func_remove: FPtr_remove)
    proc array_pop_ptr(array_: *Array; func_destroy: FPtr_destroy)
    proc array_sort(array_: *Array; func_compare: FPtr_compare)
    proc array_sort_ex(array_: *Array; func_compare: FPtr_compare_ex; data: *void)
    proc array_sort_ptr(array_: *Array; func_compare: FPtr_compare)
    proc array_sort_ptr_ex(array_: *Array; func_compare: FPtr_compare_ex; data: *void)
    proc array_find_ptr(array_: *Array; elem: *void): uint32_t
    proc array_search(array_: *Array; func_compare: FPtr_compare; key: *void; pos: *[]uint32_t): *[]byte_t
    proc array_search_ptr(array_: *Array; func_compare: FPtr_compare; key: *void; pos: *[]uint32_t): *[]byte_t
    proc array_bsearch(array_: *Array; func_compare: FPtr_compare; key: *void; pos: *[]uint32_t): *[]byte_t
    proc array_bsearch_ptr(array_: *Array; func_compare: FPtr_compare; key: *void; pos: *[]uint32_t): *[]byte_t

    // from arrpt.hxx
    type
        ArrPtPol2Df = cstruct
                        reserved: uint32_t
                        size: uint32_t
                        elem_sizeof: uint16_t
                        content: *Pol2DfPtData end
        ArrPtImage = cstruct
                        reserved: uint32_t
                        size: uint32_t
                        elem_sizeof: uint16_t
                        content: *ImagePtData end
        ArrPtPol2Dd = cstruct
                        reserved: uint32_t
                        size: uint32_t
                        elem_sizeof: uint16_t
                        content: *Pol2DdPtData end
        ArrPtResPack = cstruct
                        reserved: uint32_t
                        size: uint32_t
                        elem_sizeof: uint16_t
                        content: *ResPackPtData end
        ArrPtString = cstruct
                        reserved: uint32_t
                        size: uint32_t
                        elem_sizeof: uint16_t
                        content: *StringPtData end

    proc arrpt_Image_end

    // from arrst.hxx
    type
        ArrStreal64_t = cstruct
                        reserved: uint32_t
                        size: uint32_t
                        elem_sizeof: uint16_t
                        content: *real64_tData end
        ArrStFPtr_respack = cstruct
                        reserved: uint32_t
                        size: uint32_t
                        elem_sizeof: uint16_t
                        content: *FPtr_respackData end
        ArrStint8_t = cstruct
                        reserved: uint32_t
                        size: uint32_t
                        elem_sizeof: uint16_t
                        content: *int8_tData end
        ArrStbool_t = cstruct
                        reserved: uint32_t
                        size: uint32_t
                        elem_sizeof: uint16_t
                        content: *bool_tData end
        ArrStCir2Df = cstruct
                        reserved: uint32_t
                        size: uint32_t
                        elem_sizeof: uint16_t
                        content: *Cir2DfData end
        ArrStint32_t = cstruct
                        reserved: uint32_t
                        size: uint32_t
                        elem_sizeof: uint16_t
                        content: *int32_tData end
        ArrStuint16_t = cstruct
                        reserved: uint32_t
                        size: uint32_t
                        elem_sizeof: uint16_t
                        content: *uint16_tData end
        ArrStT2Df = cstruct
                        reserved: uint32_t
                        size: uint32_t
                        elem_sizeof: uint16_t
                        content: *T2DfData end
        ArrStBox2Dd = cstruct
                        reserved: uint32_t
                        size: uint32_t
                        elem_sizeof: uint16_t
                        content: *Box2DdData end
        ArrStCol2Dd = cstruct
                        reserved: uint32_t
                        size: uint32_t
                        elem_sizeof: uint16_t
                        content: *Col2DdData end
        ArrStuint64_t = cstruct
                        reserved: uint32_t
                        size: uint32_t
                        elem_sizeof: uint16_t
                        content: *uint64_tData end
        ArrStCir2Dd = cstruct
                        reserved: uint32_t
                        size: uint32_t
                        elem_sizeof: uint16_t
                        content: *Cir2DdData end
        ArrStCol2Df = cstruct
                        reserved: uint32_t
                        size: uint32_t
                        elem_sizeof: uint16_t
                        content: *Col2DfData end
        ArrStreal32_t = cstruct
                        reserved: uint32_t
                        size: uint32_t
                        elem_sizeof: uint16_t
                        content: *real32_tData end
        ArrStTri2Df = cstruct
                        reserved: uint32_t
                        size: uint32_t
                        elem_sizeof: uint16_t
                        content: *Tri2DfData end
        ArrStint64_t = cstruct
                        reserved: uint32_t
                        size: uint32_t
                        elem_sizeof: uint16_t
                        content: *int64_tData end
        ArrStV2Dd = cstruct
                        reserved: uint32_t
                        size: uint32_t
                        elem_sizeof: uint16_t
                        content: *V2DdData end
        ArrStuint8_t = cstruct
                        reserved: uint32_t
                        size: uint32_t
                        elem_sizeof: uint16_t
                        content: *uint8_tData end
        ArrStuint32_t = cstruct
                        reserved: uint32_t
                        size: uint32_t
                        elem_sizeof: uint16_t
                        content: *uint32_tData end
        ArrStS2Dd = cstruct
                        reserved: uint32_t
                        size: uint32_t
                        elem_sizeof: uint16_t
                        content: *S2DdData end
        ArrStT2Dd = cstruct
                        reserved: uint32_t
                        size: uint32_t
                        elem_sizeof: uint16_t
                        content: *T2DdData end
        ArrStS2Df = cstruct
                        reserved: uint32_t
                        size: uint32_t
                        elem_sizeof: uint16_t
                        content: *S2DfData end
        ArrStV2Df = cstruct
                        reserved: uint32_t
                        size: uint32_t
                        elem_sizeof: uint16_t
                        content: *V2DfData end
        ArrStint16_t = cstruct
                        reserved: uint32_t
                        size: uint32_t
                        elem_sizeof: uint16_t
                        content: *int16_tData end
        ArrStSeg2Dd = cstruct
                        reserved: uint32_t
                        size: uint32_t
                        elem_sizeof: uint16_t
                        content: *Seg2DdData end
        ArrStcolor_t = cstruct
                        reserved: uint32_t
                        size: uint32_t
                        elem_sizeof: uint16_t
                        content: *color_tData end
        ArrStDirEntry = cstruct
                        reserved: uint32_t
                        size: uint32_t
                        elem_sizeof: uint16_t
                        content: *DirEntryData end
        ArrStR2Df = cstruct
                        reserved: uint32_t
                        size: uint32_t
                        elem_sizeof: uint16_t
                        content: *R2DfData end
        ArrStSeg2Df = cstruct
                        reserved: uint32_t
                        size: uint32_t
                        elem_sizeof: uint16_t
                        content: *Seg2DfData end
        ArrStBox2Df = cstruct
                        reserved: uint32_t
                        size: uint32_t
                        elem_sizeof: uint16_t
                        content: *Box2DfData end
        ArrStTri2Dd = cstruct
                        reserved: uint32_t
                        size: uint32_t
                        elem_sizeof: uint16_t
                        content: *Tri2DdData end
        ArrStR2Dd = cstruct
                        reserved: uint32_t
                        size: uint32_t
                        elem_sizeof: uint16_t
                        content: *R2DdData end

    proc arrst_FPtr_respack_end

    // from bhash.h
    proc bhash_from_block(data: *[]byte_t; size: uint32_t): uint32_t
    proc bhash_append_uint32(hash: uint32_t; value: uint32_t): uint32_t
    proc bhash_append_real32(hash: uint32_t; value: real32_t): uint32_t

    // from buffer.h
    proc buffer_create(size: uint32_t): *Buffer
    proc buffer_destroy(buffer: *[]*Buffer)
    proc buffer_size(buffer: *Buffer): uint32_t
    proc buffer_data(buffer: *Buffer): *[]byte_t

    // from clock.h
    proc clock_create(interval: real64_t): *Clock
    proc clock_destroy(clk: *[]*Clock)
    proc clock_frame(clk: *Clock; prev_frame: *[]real64_t; curr_frame: *[]real64_t): char_t
    proc clock_reset(clk: *Clock)
    proc clock_elapsed(clk: *Clock): real64_t

    // from core.h
    proc core_start
    proc core_finish

    // from core.hxx
    const
        kKEY_MAX = 112
        HEAPARR = nil // CHECK "::arr"
        ARRST = nil // CHECK "ArrSt::"
        ARRPT = nil // CHECK "ArrPt::"
        SETST = nil // CHECK "SetSt::"
        SETPT = nil // CHECK "SetPt::"

    type
        real64_tData = cstruct
                        elem: carray 1024 of real64_t end
        bool_tData = cstruct
                        elem: carray 1024 of char_t end
        uint16_tData = cstruct
                        elem: carray 1024 of uint16_t end
        int32_tData = cstruct
                        elem: carray 1024 of integer end
        int64_tData = cstruct
                        elem: carray 1024 of int64_t end
        uint64_tData = cstruct
                        elem: carray 1024 of uint64_t end
        ResPackPtData = cstruct
                        elem: carray 1024 of *ResPack end
        StringPtData = cstruct
                        elem: carray 1024 of *String end
        uint32_tData = cstruct
                        elem: carray 1024 of uint32_t end
        real32_tData = cstruct
                        elem: carray 1024 of real32_t end
        uint8_tData = cstruct
                        elem: carray 1024 of byte_t end
        DirEntryData = cstruct
                        elem: carray 1024 of DirEntry end
        int16_tData = cstruct
                        elem: carray 1024 of int16_t end
        int8_tData = cstruct
                        elem: carray 1024 of char_t end
        core_event_t = integer
    const
        ekEASSERT = 256
        ekEENTRY = 258
        ekEEXIT = 259
        ekEFILE = 257

    type
        sstate_t = (ekSTOK, ekSTEND, ekSTCORRUPT, ekSTBROKEN)
        vkey_t = (ekKEY_UNDEF, ekKEY_A, ekKEY_S, ekKEY_D, ekKEY_F, ekKEY_H, ekKEY_G, ekKEY_Z, ekKEY_X, ekKEY_C, ekKEY_V, ekKEY_BSLASH, ekKEY_B, ekKEY_Q, ekKEY_W, ekKEY_E, ekKEY_R, ekKEY_Y, ekKEY_T, ekKEY_1, ekKEY_2, ekKEY_3, ekKEY_4, ekKEY_6, ekKEY_5, ekKEY_9, ekKEY_7, ekKEY_8, ekKEY_0, ekKEY_RCURLY, ekKEY_O, ekKEY_U, ekKEY_LCURLY, ekKEY_I, ekKEY_P, ekKEY_RETURN, ekKEY_L, ekKEY_J, ekKEY_SEMICOLON, ekKEY_K, ekKEY_QUEST, ekKEY_COMMA, ekKEY_MINUS, ekKEY_N, ekKEY_M, ekKEY_PERIOD, ekKEY_TAB, ekKEY_SPACE, ekKEY_GTLT, ekKEY_BACK, ekKEY_ESCAPE, ekKEY_F17, ekKEY_NUMDECIMAL, ekKEY_NUMMULT, ekKEY_NUMADD, ekKEY_NUMLOCK, ekKEY_NUMDIV, ekKEY_NUMRET, ekKEY_NUMMINUS, ekKEY_F18, ekKEY_F19, ekKEY_NUMEQUAL, ekKEY_NUM0, ekKEY_NUM1, ekKEY_NUM2, ekKEY_NUM3, ekKEY_NUM4, ekKEY_NUM5, ekKEY_NUM6, ekKEY_NUM7, ekKEY_NUM8, ekKEY_NUM9, ekKEY_F5, ekKEY_F6, ekKEY_F7, ekKEY_F3, ekKEY_F8, ekKEY_F9, ekKEY_F11, ekKEY_F13, ekKEY_F16, ekKEY_F14, ekKEY_F10, ekKEY_F12, ekKEY_F15, ekKEY_PAGEUP, ekKEY_HOME, ekKEY_SUPR, ekKEY_F4, ekKEY_PAGEDOWN, ekKEY_F2, ekKEY_END, ekKEY_F1, ekKEY_LEFT, ekKEY_RIGHT, ekKEY_DOWN, ekKEY_UP, ekKEY_LSHIFT, ekKEY_RSHIFT, ekKEY_LCTRL, ekKEY_RCTRL, ekKEY_LALT, ekKEY_RALT, ekKEY_INSERT, ekKEY_EXCLAM, ekKEY_MENU, ekKEY_LWIN, ekKEY_RWIN, ekKEY_CAPS, ekKEY_TILDE, ekKEY_GRAVE, ekKEY_PLUS)
        mkey_t = integer
    const
        ekMKEY_ALT = 4
        ekMKEY_COMMAND = 8
        ekMKEY_CONTROL = 2
        ekMKEY_NONE = 0
        ekMKEY_SHIFT = 1

    type
        ltoken_t = integer
    const
        ekTAMPER = 24
        ekTAPOST = 25
        ekTASTERK = 19
        ekTAT = 34
        ekTBSLASH = 33
        ekTCIRCUM = 27
        ekTCLOSBRAC = 14
        ekTCLOSCURL = 16
        ekTCLOSPAR = 12
        ekTCOLON = 10
        ekTCOMMA = 7
        ekTCORRUP = 42
        ekTDOLLAR = 21
        ekTEOF = 43
        ekTEOL = 4
        ekTEQUALS = 20
        ekTEXCLA = 29
        ekTGREAT = 6
        ekTHEX = 37
        ekTIDENT = 40
        ekTINTEGER = 35
        ekTLESS = 5
        ekTMINUS = 18
        ekTMLCOM = 2
        ekTOCTAL = 36
        ekTOPENBRAC = 13
        ekTOPENCURL = 15
        ekTOPENPAR = 11
        ekTPERCENT = 22
        ekTPERIOD = 8
        ekTPLUS = 17
        ekTPOUND = 23
        ekTQUEST = 30
        ekTQUOTE = 26
        ekTREAL = 38
        ekTRESERVED = 44
        ekTSCOLON = 9
        ekTSLASH = 32
        ekTSLCOM = 1
        ekTSPACE = 3
        ekTSTRING = 39
        ekTTILDE = 28
        ekTUNDEF = 41
        ekTVLINE = 31

    type
        Array = cstruct end
        Buffer = cstruct
                        size: uint32_t
                        data: carray 512 of char_t end
        KeyBuf = cstruct end
        Clock = cstruct end
        Event = cstruct end
        Listener = cstruct end
        RBTree = cstruct end
        ResId = *[]char_t
        ResPack = cstruct end
        RegEx = cstruct end
        Stream = cstruct end
        String = cstruct
                        size: uint32_t
                        data: carray 512 of char_t end
        DirEntry = cstruct
                        name: *String
                        type_: file_type_t
                        size: uint64_t
                        date: Date end
        EvFileDir = cstruct
                        filename: *[]char_t
                        pathname: *[]char_t
                        depth: uint32_t end
        FPtr_remove = proc(obj: *void)
        FPtr_event_handler = proc(obj: *void; event: *Event)
        FPtr_read = proc(stream: *Stream): *void
        FPtr_read_init = proc(stream: *Stream; obj: *void)
        FPtr_write = proc(stream: *Stream; obj: *void)


    // from date.h
    proc date_system(): Date
    proc date_add_seconds(date: *Date; seconds: int32_t): Date
    proc date_add_minutes(date: *Date; minutes: int32_t): Date
    proc date_add_hours(date: *Date; hours: int32_t): Date
    proc date_add_days(date: *Date; days: int32_t): Date
    proc date_year(): int16_t
    proc date_cmp(date1: *Date; date2: *Date): integer
    proc date_between(date: *Date; from: *Date; to_: *Date): char_t
    proc date_is_null(date: *Date): char_t
    proc date_DD_MM_YYYY_HH_MM_SS(date: *Date): *String
    proc date_YYYY_MM_DD_HH_MM_SS(date: *Date): *String
    proc date_month_en(month: month_t): *[]char_t
    proc date_month_es(month: month_t): *[]char_t

    // from dbind.h
    proc dbind_imp(type_: *[]char_t; size: uint16_t; mname: *[]char_t; mtype: *[]char_t; moffset: uint16_t; msize: uint16_t)
    proc dbind_enum_imp(type_: *[]char_t; name: *[]char_t; value: enum_t; alias: *[]char_t)
    proc dbind_create_imp(type_: *[]char_t): *[]byte_t
    proc dbind_init_imp(data: *[]byte_t; type_: *[]char_t)
    proc dbind_remove_imp(data: *[]byte_t; type_: *[]char_t)
    proc dbind_destroy_imp(data: *[]*[]byte; type_: *[]char_t)
    proc dbind_destopt_imp(data: *[]*[]byte; type_: *[]char_t)
    proc dbind_read_imp(stm: *Stream; type_: *[]char_t): *void
    proc dbind_write_imp(stm: *Stream; data: *void; type_: *[]char_t)
    proc dbind_default_imp(type_: *[]char_t; mname: *[]char_t; value: *void)
    proc dbind_range_imp(type_: *[]char_t; mname: *[]char_t; min: *void; max: *void)
    proc dbind_precision_imp(type_: *[]char_t; mname: *[]char_t; prec: *void)
    proc dbind_increment_imp(type_: *[]char_t; mname: *[]char_t; incr: *void)
    proc dbind_suffix_imp(type_: *[]char_t; mname: *[]char_t; suffix: *[]char_t)

    // from event.h
    proc listener_imp(object: *void; func_event_handler: FPtr_event_handler): *Listener
    proc listener_destroy(listener: *[]*Listener)
    proc listener_update(listener: *[]*Listener; new_listener: *Listener)
    proc listener_event_imp(listener: *Listener; type_: uint32_t; sender: *void; params: *void; result: *void; sender_type: *[]char_t; params_type: *[]char_t; result_type: *[]char_t)
    proc listener_pass_event_imp(listener: *Listener; event: *Event; sender: *void; sender_type: *[]char_t)
    proc event_type(event: *Event): uint32_t
    proc event_sender_imp(event: *Event; type_: *[]char_t): *void
    proc event_params_imp(event: *Event; type_: *[]char_t): *void
    proc event_result_imp(event: *Event; type_: *[]char_t): *void

    // from heap.h
    proc heap_start_mt
    proc heap_end_mt
    proc heap_malloc_imp(size: uint32_t; name: *[]char_t; equal_sized: bool_t): *[]byte_t
    proc heap_calloc_imp(size: uint32_t; name: *[]char_t; equal_sized: bool_t): *[]byte_t
    proc heap_realloc(mem: *[]byte_t; size: uint32_t; new_size: uint32_t; name: *[]char_t): *[]byte_t
    proc heap_aligned_malloc_imp(size: uint32_t; align: uint32_t; name: *[]char_t; equal_sized: bool_t): *[]byte_t
    proc heap_aligned_calloc_imp(size: uint32_t; align: uint32_t; name: *[]char_t; equal_sized: bool_t): *[]byte_t
    proc heap_aligned_realloc(mem: *[]byte_t; size: uint32_t; new_size: uint32_t; align: uint32_t; name: *[]char_t): *[]byte_t
    proc heap_free(mem: *[]*[]byte; size: uint32_t; name: *[]char_t)
    proc heap_auditor_add(name: *[]char_t)
    proc heap_auditor_delete(name: *[]char_t)
    proc heap_stats(stats: bool_t)

    // from hfile.h
    proc hfile_dir(pathname: *[]char_t): char_t
    proc hfile_dir_create(pathname: *[]char_t; error: *[]ferror_t): char_t
    proc hfile_dir_destroy(pathname: *[]char_t; error: *[]ferror_t): char_t
    proc hfile_dir_list(pathname: *[]char_t; subdirs: bool_t; error: *[]ferror_t): *ArrStDirEntry
    proc hfile_dir_entry_remove(entry: *DirEntry)
    proc hfile_date(pathname: *[]char_t; recursive: bool_t): Date
    proc hfile_dir_sync(src: *[]char_t; dest: *[]char_t; recursive: bool_t; remove_in_dest: bool_t; except: *[]*[]char; except_size: uint32_t; error: *[]ferror_t): char_t
    proc hfile_exists(pathname: *[]char_t; file_type: *[]file_type_t): char_t
    proc hfile_is_uptodate(src: *[]char_t; dest: *[]char_t): char_t
    proc hfile_copy(from: *[]char_t; to_: *[]char_t; error: *[]ferror_t): char_t
    proc hfile_buffer(pathname: *[]char_t; error: *[]ferror_t): *Buffer
    proc hfile_string(pathname: *[]char_t; error: *[]ferror_t): *String
    proc hfile_stream(pathname: *[]char_t; error: *[]ferror_t): *Stream
    proc hfile_from_string(pathname: *[]char_t; str: *String; error: *[]ferror_t): char_t
    proc hfile_from_data(pathname: *[]char_t; data: *[]byte_t; size: uint32_t; error: *[]ferror_t): char_t
    proc hfile_dir_loop(pathname: *[]char_t; listener: *Listener; subdirs: bool_t; hiddens: bool_t; error: *[]ferror_t): char_t
    proc hfile_appdata(filename: *[]char_t): *String
    proc hfile_home_dir(path: *[]char_t): *String

    // from keybuf.h
    proc keybuf_create(): *KeyBuf
    proc keybuf_destroy(buffer: *[]*KeyBuf)
    proc keybuf_OnUp(buffer: *KeyBuf; key: vkey_t)
    proc keybuf_OnDown(buffer: *KeyBuf; key: vkey_t)
    proc keybuf_clear(buffer: *KeyBuf)
    proc keybuf_pressed(buffer: *KeyBuf; key: vkey_t): char_t
    proc keybuf_str(key: vkey_t): *[]char_t
    proc keybuf_dump(buffer: *KeyBuf)

    // from rbtree.h
    proc rbtree_create(func_compare: FPtr_compare; esize: uint16_t; ksize: uint16_t; type_: *[]char_t): *RBTree
    proc rbtree_destroy(tree: *[]*RBTree; func_remove: FPtr_remove; func_destroy_key: FPtr_destroy; type_: *[]char_t)
    proc rbtree_destroy_ptr(tree: *[]*RBTree; func_destroy: FPtr_destroy; func_destroy_key: FPtr_destroy; type_: *[]char_t)
    proc rbtree_size(tree: *RBTree): uint32_t
    proc rbtree_get(tree: *RBTree; key: *void; isptr: bool_t): *[]byte_t
    proc rbtree_insert(tree: *RBTree; key: *void; func_key_copy: FPtr_copy): *[]byte_t
    proc rbtree_insert_ptr(tree: *RBTree; ptr: *void): char_t
    proc rbtree_delete(tree: *RBTree; key: *void; func_remove: FPtr_remove; func_destroy_key: FPtr_destroy): char_t
    proc rbtree_delete_ptr(tree: *RBTree; key: *void; func_destroy: FPtr_destroy; func_destroy_key: FPtr_destroy): char_t
    proc rbtree_first(tree: *RBTree): *[]byte_t
    proc rbtree_last(tree: *RBTree): *[]byte_t
    proc rbtree_next(tree: *RBTree): *[]byte_t
    proc rbtree_prev(tree: *RBTree): *[]byte_t
    proc rbtree_first_ptr(tree: *RBTree): *[]byte_t
    proc rbtree_last_ptr(tree: *RBTree): *[]byte_t
    proc rbtree_next_ptr(tree: *RBTree): *[]byte_t
    proc rbtree_prev_ptr(tree: *RBTree): *[]byte_t
    proc rbtree_get_key(tree: *RBTree): *[]char_t
    proc rbtree_check(tree: *RBTree): char_t

    // from regex.h
    proc regex_create(pattern: *[]char_t): *RegEx
    proc regex_destroy(regex: *[]*RegEx)
    proc regex_match(regex: *RegEx; str: *[]char_t): char_t

    // from respack.h
    proc respack_destroy(pack: *[]*ResPack)
    proc respack_text(pack: *ResPack; id: ResId): *[]char_t
    proc respack_file(pack: *ResPack; id: ResId; size: *[]uint32_t): *[]byte_t

    // from setpt.hxx
    type
        NodePtString = cstruct
                        rb: uint32_t
                        left: *NodePtString
                        right: *NodePtString
                        data: *String end
        NodePtResPack = cstruct
                        rb: uint32_t
                        left: *NodePtResPack
                        right: *NodePtResPack
                        data: *ResPack end
        SetPtPol2Dd = cstruct
                        elems: uint32_t
                        esize: uint16_t
                        ksize: uint16_t
                        root: *NodePtPol2Dd
                        func_compare: FPtr_compare end
        NodePtPol2Df = cstruct
                        rb: uint32_t
                        left: *NodePtPol2Df
                        right: *NodePtPol2Df
                        data: *Pol2Df end
        SetPtImage = cstruct
                        elems: uint32_t
                        esize: uint16_t
                        ksize: uint16_t
                        root: *NodePtImage
                        func_compare: FPtr_compare end
        NodePtPol2Dd = cstruct
                        rb: uint32_t
                        left: *NodePtPol2Dd
                        right: *NodePtPol2Dd
                        data: *Pol2Dd end
        SetPtResPack = cstruct
                        elems: uint32_t
                        esize: uint16_t
                        ksize: uint16_t
                        root: *NodePtResPack
                        func_compare: FPtr_compare end
        SetPtString = cstruct
                        elems: uint32_t
                        esize: uint16_t
                        ksize: uint16_t
                        root: *NodePtString
                        func_compare: FPtr_compare end
        SetPtPol2Df = cstruct
                        elems: uint32_t
                        esize: uint16_t
                        ksize: uint16_t
                        root: *NodePtPol2Df
                        func_compare: FPtr_compare end
        NodePtImage = cstruct
                        rb: uint32_t
                        left: *NodePtImage
                        right: *NodePtImage
                        data: *Image end

    proc setpt_Image_end

    // from setst.hxx
    type
        NodeStT2Df = cstruct
                        rb: uint32_t
                        left: *NodeStT2Df
                        right: *NodeStT2Df
                        data: T2Df end
        NodeStCol2Dd = cstruct
                        rb: uint32_t
                        left: *NodeStCol2Dd
                        right: *NodeStCol2Dd
                        data: Col2Dd end
        SetStbool_t = cstruct
                        elems: uint32_t
                        esize: uint16_t
                        ksize: uint16_t
                        root: *NodeStbool_t
                        func_compare: FPtr_compare end
        NodeStBox2Dd = cstruct
                        rb: uint32_t
                        left: *NodeStBox2Dd
                        right: *NodeStBox2Dd
                        data: Box2Dd end
        SetStcolor_t = cstruct
                        elems: uint32_t
                        esize: uint16_t
                        ksize: uint16_t
                        root: *NodeStcolor_t
                        func_compare: FPtr_compare end
        SetStreal32_t = cstruct
                        elems: uint32_t
                        esize: uint16_t
                        ksize: uint16_t
                        root: *NodeStreal32_t
                        func_compare: FPtr_compare end
        NodeStcolor_t = cstruct
                        rb: uint32_t
                        left: *NodeStcolor_t
                        right: *NodeStcolor_t
                        data: uint32_t end
        SetStTri2Df = cstruct
                        elems: uint32_t
                        esize: uint16_t
                        ksize: uint16_t
                        root: *NodeStTri2Df
                        func_compare: FPtr_compare end
        SetStuint64_t = cstruct
                        elems: uint32_t
                        esize: uint16_t
                        ksize: uint16_t
                        root: *NodeStuint64_t
                        func_compare: FPtr_compare end
        NodeStTri2Dd = cstruct
                        rb: uint32_t
                        left: *NodeStTri2Dd
                        right: *NodeStTri2Dd
                        data: Tri2Dd end
        SetStFPtr_respack = cstruct
                        elems: uint32_t
                        esize: uint16_t
                        ksize: uint16_t
                        root: *NodeStFPtr_respack
                        func_compare: FPtr_compare end
        NodeStuint32_t = cstruct
                        rb: uint32_t
                        left: *NodeStuint32_t
                        right: *NodeStuint32_t
                        data: uint32_t end
        SetStTri2Dd = cstruct
                        elems: uint32_t
                        esize: uint16_t
                        ksize: uint16_t
                        root: *NodeStTri2Dd
                        func_compare: FPtr_compare end
        NodeStuint64_t = cstruct
                        rb: uint32_t
                        left: *NodeStuint64_t
                        right: *NodeStuint64_t
                        data: uint64_t end
        SetStSeg2Dd = cstruct
                        elems: uint32_t
                        esize: uint16_t
                        ksize: uint16_t
                        root: *NodeStSeg2Dd
                        func_compare: FPtr_compare end
        NodeStR2Df = cstruct
                        rb: uint32_t
                        left: *NodeStR2Df
                        right: *NodeStR2Df
                        data: R2Df end
        NodeStCol2Df = cstruct
                        rb: uint32_t
                        left: *NodeStCol2Df
                        right: *NodeStCol2Df
                        data: Col2Df end
        SetStint16_t = cstruct
                        elems: uint32_t
                        esize: uint16_t
                        ksize: uint16_t
                        root: *NodeStint16_t
                        func_compare: FPtr_compare end
        SetStT2Dd = cstruct
                        elems: uint32_t
                        esize: uint16_t
                        ksize: uint16_t
                        root: *NodeStT2Dd
                        func_compare: FPtr_compare end
        SetStuint8_t = cstruct
                        elems: uint32_t
                        esize: uint16_t
                        ksize: uint16_t
                        root: *NodeStuint8_t
                        func_compare: FPtr_compare end
        NodeStV2Dd = cstruct
                        rb: uint32_t
                        left: *NodeStV2Dd
                        right: *NodeStV2Dd
                        data: V2Dd end
        NodeStSeg2Dd = cstruct
                        rb: uint32_t
                        left: *NodeStSeg2Dd
                        right: *NodeStSeg2Dd
                        data: Seg2Dd end
        NodeStreal32_t = cstruct
                        rb: uint32_t
                        left: *NodeStreal32_t
                        right: *NodeStreal32_t
                        data: real32_t end
        NodeStTri2Df = cstruct
                        rb: uint32_t
                        left: *NodeStTri2Df
                        right: *NodeStTri2Df
                        data: Tri2Df end
        NodeStint16_t = cstruct
                        rb: uint32_t
                        left: *NodeStint16_t
                        right: *NodeStint16_t
                        data: int16_t end
        NodeStuint8_t = cstruct
                        rb: uint32_t
                        left: *NodeStuint8_t
                        right: *NodeStuint8_t
                        data: byte_t end
        NodeStS2Dd = cstruct
                        rb: uint32_t
                        left: *NodeStS2Dd
                        right: *NodeStS2Dd
                        data: S2Dd end
        SetStuint32_t = cstruct
                        elems: uint32_t
                        esize: uint16_t
                        ksize: uint16_t
                        root: *NodeStuint32_t
                        func_compare: FPtr_compare end
        SetStR2Df = cstruct
                        elems: uint32_t
                        esize: uint16_t
                        ksize: uint16_t
                        root: *NodeStR2Df
                        func_compare: FPtr_compare end
        NodeStT2Dd = cstruct
                        rb: uint32_t
                        left: *NodeStT2Dd
                        right: *NodeStT2Dd
                        data: T2Dd end
        SetStint8_t = cstruct
                        elems: uint32_t
                        esize: uint16_t
                        ksize: uint16_t
                        root: *NodeStint8_t
                        func_compare: FPtr_compare end
        SetStR2Dd = cstruct
                        elems: uint32_t
                        esize: uint16_t
                        ksize: uint16_t
                        root: *NodeStR2Dd
                        func_compare: FPtr_compare end
        NodeStBox2Df = cstruct
                        rb: uint32_t
                        left: *NodeStBox2Df
                        right: *NodeStBox2Df
                        data: Box2Df end
        NodeStbool_t = cstruct
                        rb: uint32_t
                        left: *NodeStbool_t
                        right: *NodeStbool_t
                        data: char_t end
        SetStBox2Df = cstruct
                        elems: uint32_t
                        esize: uint16_t
                        ksize: uint16_t
                        root: *NodeStBox2Df
                        func_compare: FPtr_compare end
        SetStS2Df = cstruct
                        elems: uint32_t
                        esize: uint16_t
                        ksize: uint16_t
                        root: *NodeStS2Df
                        func_compare: FPtr_compare end
        NodeStR2Dd = cstruct
                        rb: uint32_t
                        left: *NodeStR2Dd
                        right: *NodeStR2Dd
                        data: R2Dd end
        NodeStS2Df = cstruct
                        rb: uint32_t
                        left: *NodeStS2Df
                        right: *NodeStS2Df
                        data: S2Df end
        NodeStCir2Df = cstruct
                        rb: uint32_t
                        left: *NodeStCir2Df
                        right: *NodeStCir2Df
                        data: Cir2Df end
        SetStCir2Dd = cstruct
                        elems: uint32_t
                        esize: uint16_t
                        ksize: uint16_t
                        root: *NodeStCir2Dd
                        func_compare: FPtr_compare end
        NodeStV2Df = cstruct
                        rb: uint32_t
                        left: *NodeStV2Df
                        right: *NodeStV2Df
                        data: V2Df end
        NodeStint32_t = cstruct
                        rb: uint32_t
                        left: *NodeStint32_t
                        right: *NodeStint32_t
                        data: integer end
        SetStCir2Df = cstruct
                        elems: uint32_t
                        esize: uint16_t
                        ksize: uint16_t
                        root: *NodeStCir2Df
                        func_compare: FPtr_compare end
        SetStV2Df = cstruct
                        elems: uint32_t
                        esize: uint16_t
                        ksize: uint16_t
                        root: *NodeStV2Df
                        func_compare: FPtr_compare end
        SetStint32_t = cstruct
                        elems: uint32_t
                        esize: uint16_t
                        ksize: uint16_t
                        root: *NodeStint32_t
                        func_compare: FPtr_compare end
        SetStSeg2Df = cstruct
                        elems: uint32_t
                        esize: uint16_t
                        ksize: uint16_t
                        root: *NodeStSeg2Df
                        func_compare: FPtr_compare end
        NodeStCir2Dd = cstruct
                        rb: uint32_t
                        left: *NodeStCir2Dd
                        right: *NodeStCir2Dd
                        data: Cir2Dd end
        NodeStSeg2Df = cstruct
                        rb: uint32_t
                        left: *NodeStSeg2Df
                        right: *NodeStSeg2Df
                        data: Seg2Df end
        SetStBox2Dd = cstruct
                        elems: uint32_t
                        esize: uint16_t
                        ksize: uint16_t
                        root: *NodeStBox2Dd
                        func_compare: FPtr_compare end
        NodeStint64_t = cstruct
                        rb: uint32_t
                        left: *NodeStint64_t
                        right: *NodeStint64_t
                        data: int64_t end
        SetStreal64_t = cstruct
                        elems: uint32_t
                        esize: uint16_t
                        ksize: uint16_t
                        root: *NodeStreal64_t
                        func_compare: FPtr_compare end
        NodeStreal64_t = cstruct
                        rb: uint32_t
                        left: *NodeStreal64_t
                        right: *NodeStreal64_t
                        data: real64_t end
        SetStuint16_t = cstruct
                        elems: uint32_t
                        esize: uint16_t
                        ksize: uint16_t
                        root: *NodeStuint16_t
                        func_compare: FPtr_compare end
        SetStCol2Df = cstruct
                        elems: uint32_t
                        esize: uint16_t
                        ksize: uint16_t
                        root: *NodeStCol2Df
                        func_compare: FPtr_compare end
        NodeStuint16_t = cstruct
                        rb: uint32_t
                        left: *NodeStuint16_t
                        right: *NodeStuint16_t
                        data: uint16_t end
        SetStint64_t = cstruct
                        elems: uint32_t
                        esize: uint16_t
                        ksize: uint16_t
                        root: *NodeStint64_t
                        func_compare: FPtr_compare end
        SetStDirEntry = cstruct
                        elems: uint32_t
                        esize: uint16_t
                        ksize: uint16_t
                        root: *NodeStDirEntry
                        func_compare: FPtr_compare end
        SetStT2Df = cstruct
                        elems: uint32_t
                        esize: uint16_t
                        ksize: uint16_t
                        root: *NodeStT2Df
                        func_compare: FPtr_compare end
        SetStS2Dd = cstruct
                        elems: uint32_t
                        esize: uint16_t
                        ksize: uint16_t
                        root: *NodeStS2Dd
                        func_compare: FPtr_compare end
        SetStV2Dd = cstruct
                        elems: uint32_t
                        esize: uint16_t
                        ksize: uint16_t
                        root: *NodeStV2Dd
                        func_compare: FPtr_compare end
        NodeStFPtr_respack = cstruct
                        rb: uint32_t
                        left: *NodeStFPtr_respack
                        right: *NodeStFPtr_respack
                        data: FPtr_respack end
        SetStCol2Dd = cstruct
                        elems: uint32_t
                        esize: uint16_t
                        ksize: uint16_t
                        root: *NodeStCol2Dd
                        func_compare: FPtr_compare end
        NodeStDirEntry = cstruct
                        rb: uint32_t
                        left: *NodeStDirEntry
                        right: *NodeStDirEntry
                        data: DirEntry end
        NodeStint8_t = cstruct
                        rb: uint32_t
                        left: *NodeStint8_t
                        right: *NodeStint8_t
                        data: char_t end

    proc setst_FPtr_respack_end

    // from stream.h
    proc stm_from_block(data: *[]byte_t; size: uint32_t): *Stream
    proc stm_memory(size: uint32_t): *Stream
    proc stm_from_file(pathname: *[]char_t; error: *[]ferror_t): *Stream
    proc stm_to_file(pathname: *[]char_t; error: *[]ferror_t): *Stream
    proc stm_append_file(pathname: *[]char_t; error: *[]ferror_t): *Stream
    proc stm_socket(socket: *Socket): *Stream
    proc stm_close(stm: *[]*Stream)
    proc stm_get_write_endian(stm: *Stream): endian_t
    proc stm_get_read_endian(stm: *Stream): endian_t
    proc stm_set_write_endian(stm: *Stream; endian: endian_t)
    proc stm_set_read_endian(stm: *Stream; endian: endian_t)
    proc stm_get_write_utf(stm: *Stream): unicode_t
    proc stm_get_read_utf(stm: *Stream): unicode_t
    proc stm_set_write_utf(stm: *Stream; format: unicode_t)
    proc stm_set_read_utf(stm: *Stream; format: unicode_t)
    proc stm_bytes_written(stm: *Stream): uint64_t
    proc stm_bytes_readed(stm: *Stream): uint64_t
    proc stm_col(stm: *Stream): uint32_t
    proc stm_row(stm: *Stream): uint32_t
    proc stm_token_col(stm: *Stream): uint32_t
    proc stm_token_row(stm: *Stream): uint32_t
    proc stm_token_lexeme(stm: *Stream; size: *[]uint32_t): *[]char_t
    proc stm_token_escapes(stm: *Stream; active_escapes: bool_t)
    proc stm_token_spaces(stm: *Stream; active_spaces: bool_t)
    proc stm_token_comments(stm: *Stream; active_comments: bool_t)
    proc stm_state(stm: *Stream): sstate_t
    proc stm_file_err(stm: *Stream): ferror_t
    proc stm_sock_err(stm: *Stream): serror_t
    proc stm_corrupt(stm: *Stream)
    proc stm_str(stm: *Stream): *String
    proc stm_buffer(stm: *Stream): *[]byte_t
    proc stm_buffer_size(stm: *Stream): uint32_t
    proc stm_write(stm: *Stream; data: *[]byte_t; size: uint32_t)
    proc stm_write_char(stm: *Stream; codepoint: uint32_t)
    proc stm_printf(stm: *Stream; format: *[]char_t): uint32_t [varargs]
    proc stm_writef(stm: *Stream; str: *[]char_t): uint32_t
    proc stm_write_bool(stm: *Stream; value: bool_t)
    proc stm_write_i8(stm: *Stream; value: int8_t)
    proc stm_write_i16(stm: *Stream; value: int16_t)
    proc stm_write_i32(stm: *Stream; value: int32_t)
    proc stm_write_i64(stm: *Stream; value: int64_t)
    proc stm_write_u8(stm: *Stream; value: uint8_t)
    proc stm_write_u16(stm: *Stream; value: uint16_t)
    proc stm_write_u32(stm: *Stream; value: uint32_t)
    proc stm_write_u64(stm: *Stream; value: uint64_t)
    proc stm_write_r32(stm: *Stream; value: real32_t)
    proc stm_write_r64(stm: *Stream; value: real64_t)
    proc stm_read(stm: *Stream; data: *[]byte_t; size: uint32_t): uint32_t
    proc stm_read_char(stm: *Stream): uint32_t
    proc stm_read_chars(stm: *Stream; n: uint32_t): *[]char_t
    proc stm_read_line(stm: *Stream): *[]char_t
    proc stm_read_trim(stm: *Stream): *[]char_t
    proc stm_read_token(stm: *Stream): ltoken_t
    proc stm_read_i8_tok(stm: *Stream): char_t
    proc stm_read_i16_tok(stm: *Stream): int16_t
    proc stm_read_i32_tok(stm: *Stream): integer
    proc stm_read_i64_tok(stm: *Stream): int64_t
    proc stm_read_u8_tok(stm: *Stream): byte_t
    proc stm_read_u16_tok(stm: *Stream): uint16_t
    proc stm_read_u32_tok(stm: *Stream): uint32_t
    proc stm_read_u64_tok(stm: *Stream): uint64_t
    proc stm_read_r32_tok(stm: *Stream): real32_t
    proc stm_read_r64_tok(stm: *Stream): real64_t
    proc stm_read_bool(stm: *Stream): char_t
    proc stm_read_i8(stm: *Stream): char_t
    proc stm_read_i16(stm: *Stream): int16_t
    proc stm_read_i32(stm: *Stream): integer
    proc stm_read_i64(stm: *Stream): int64_t
    proc stm_read_u8(stm: *Stream): byte_t
    proc stm_read_u16(stm: *Stream): uint16_t
    proc stm_read_u32(stm: *Stream): uint32_t
    proc stm_read_u64(stm: *Stream): uint64_t
    proc stm_read_r32(stm: *Stream): real32_t
    proc stm_read_r64(stm: *Stream): real64_t
    proc stm_skip(stm: *Stream; size: uint32_t)
    proc stm_skip_bom(stm: *Stream)
    proc stm_skip_token(stm: *Stream; token: ltoken_t)
    proc stm_flush(stm: *Stream)
    proc stm_pipe(from: *Stream; to_: *Stream; n: uint32_t)

    // from strings.h
    proc tc(str: *String): *[]char_t
    proc tcc(str: *String): *[]char_t
    proc str_c(str: *[]char_t): *String
    proc str_cn(str: *[]char_t; n: uint32_t): *String
    proc str_trim(str: *[]char_t): *String
    proc str_trim_n(str: *[]char_t; n: uint32_t): *String
    proc str_copy(str: *String): *String
    proc str_printf(format: *[]char_t): *String [varargs]
    proc str_path(platform: platform_t; format: *[]char_t): *String [varargs]
    proc str_cpath(format: *[]char_t): *String [varargs]
    proc str_relpath(path1: *[]char_t; path2: *[]char_t): *String
    proc str_repl(str: *[]char_t): *String [varargs]
    proc str_reserve(n: uint32_t): *String
    proc str_fill(n: uint32_t; c: char_t): *String
    proc str_read(stream: *Stream): *String
    proc str_write(stream: *Stream; str: *String)
    proc str_writef(stream: *Stream; str: *String)
    proc str_copy_c(dest: *[]char_t; size: uint32_t; src: *[]char_t)
    proc str_copy_cn(dest: *[]char_t; size: uint32_t; src: *[]char_t; n: uint32_t)
    proc str_cat(dest: *[]*String; src: *[]char_t)
    proc str_cat_c(dest: *[]char_t; size: uint32_t; src: *[]char_t)
    proc str_upd(str: *[]*String; new_str: *[]char_t)
    proc str_destroy(str: *[]*String)
    proc str_destopt(str: *[]*String)
    proc str_len(str: *String): uint32_t
    proc str_len_c(str: *[]char_t): uint32_t
    proc str_nchars(str: *String): uint32_t
    proc str_prefix(str1: *[]char_t; str2: *[]char_t): uint32_t
    proc str_is_prefix(str: *[]char_t; prefix: *[]char_t): char_t
    proc str_is_sufix(str: *[]char_t; sufix: *[]char_t): char_t
    proc str_scmp(str1: *String; str2: *String): integer
    proc str_cmp(str1: *String; str2: *[]char_t): integer
    proc str_cmp_c(str1: *[]char_t; str2: *[]char_t): integer
    proc str_cmp_cn(str1: *[]char_t; str2: *[]char_t; n: uint32_t): integer
    proc str_empty(str: *String): char_t
    proc str_empty_c(str: *[]char_t): char_t
    proc str_equ(str1: *String; str2: *[]char_t): char_t
    proc str_equ_c(str1: *[]char_t; str2: *[]char_t): char_t
    proc str_equ_cn(str1: *[]char_t; str2: *[]char_t; n: uint32_t): char_t
    proc str_equ_nocase(str1: *[]char_t; str2: *[]char_t): char_t
    proc str_equ_end(str: *[]char_t; end_: *[]char_t): char_t
    proc str_upper(str: *String)
    proc str_lower(str: *String)
    proc str_upper_c(dest: *[]char_t; size: uint32_t; str: *[]char_t)
    proc str_lower_c(dest: *[]char_t; size: uint32_t; str: *[]char_t)
    proc str_subs(str: *String; replace: char_t; with_: char_t)
    proc str_repl_c(str: *[]char_t; replace: *[]char_t; with_: *[]char_t)
    proc str_str(str: *[]char_t; substr: *[]char_t): *[]char_t
    proc str_split(str: *[]char_t; substr: *[]char_t; left: *[]*String; right: *[]*String): char_t
    proc str_split_trim(str: *[]char_t; substr: *[]char_t; left: *[]*String; right: *[]*String): char_t
    proc str_split_pathname(pathname: *[]char_t; path: *[]*String; file: *[]*String)
    proc str_split_pathext(pathname: *[]char_t; path: *[]*String; file: *[]*String; ext: *[]*String)
    proc str_filename(pathname: *[]char_t): *[]char_t
    proc str_filext(pathname: *[]char_t): *[]char_t
    proc str_find(array_: *ArrPtString; str: *[]char_t): uint32_t
    proc str_to_i8(str: *[]char_t; base: uint32_t; error: *[]char_t): char_t
    proc str_to_i16(str: *[]char_t; base: uint32_t; error: *[]char_t): int16_t
    proc str_to_i32(str: *[]char_t; base: uint32_t; error: *[]char_t): integer
    proc str_to_i64(str: *[]char_t; base: uint32_t; error: *[]char_t): int64_t
    proc str_to_u8(str: *[]char_t; base: uint32_t; error: *[]char_t): byte_t
    proc str_to_u16(str: *[]char_t; base: uint32_t; error: *[]char_t): uint16_t
    proc str_to_u32(str: *[]char_t; base: uint32_t; error: *[]char_t): uint32_t
    proc str_to_u64(str: *[]char_t; base: uint32_t; error: *[]char_t): uint64_t
    proc str_to_r32(str: *[]char_t; error: *[]char_t): real32_t
    proc str_to_r64(str: *[]char_t; error: *[]char_t): real64_t

    // from color.h
    proc color_rgb(r: uint8_t; g: uint8_t; b: uint8_t): uint32_t
    proc color_rgba(r: uint8_t; g: uint8_t; b: uint8_t; a: uint8_t): uint32_t
    proc color_rgbaf(r: real32_t; g: real32_t; b: real32_t; a: real32_t): uint32_t
    proc color_hsbf(hue: real32_t; sat: real32_t; bright: real32_t): uint32_t
    proc color_red(r: uint8_t): uint32_t
    proc color_green(g: uint8_t): uint32_t
    proc color_blue(b: uint8_t): uint32_t
    proc color_gray(l: uint8_t): uint32_t
    proc color_bgr(bgr: uint32_t): uint32_t
    proc color_html(html: *[]char_t): uint32_t
    proc color_to_hsbf(color: color_t; hue: *[]real32_t; sat: *[]real32_t; bright: *[]real32_t)
    proc color_to_html(color: color_t; html: *[]char_t; size: uint32_t)
    proc color_get_rgb(color: color_t; r: *[]byte_t; g: *[]byte_t; b: *[]byte_t)
    proc color_get_rgbf(color: color_t; r: *[]real32_t; g: *[]real32_t; b: *[]real32_t)
    proc color_get_rgba(color: color_t; r: *[]byte_t; g: *[]byte_t; b: *[]byte_t; a: *[]byte_t)
    proc color_get_rgbaf(color: color_t; r: *[]real32_t; g: *[]real32_t; b: *[]real32_t; a: *[]real32_t)
    proc color_get_alpha(color: color_t): byte_t
    proc color_set_alpha(color: color_t; alpha: uint8_t): uint32_t

    // from dctx.h
    proc dctx_bitmap(width: uint32_t; height: uint32_t; format: pixformat_t): *DCtx
    proc dctx_image(ctx: *[]*DCtx): *Image
    proc draw_clear(ctx: *DCtx; color: color_t)
    proc draw_matrixf(ctx: *DCtx; t2d: *T2Df)
    proc draw_matrixd(ctx: *DCtx; t2d: *T2Dd)
    proc draw_matrix_cartesianf(ctx: *DCtx; t2d: *T2Df)
    proc draw_matrix_cartesiand(ctx: *DCtx; t2d: *T2Dd)
    proc draw_antialias(ctx: *DCtx; on: bool_t)

    // from draw.h
    proc draw_line(ctx: *DCtx; x0: real32_t; y0: real32_t; x1: real32_t; y1: real32_t)
    proc draw_polyline(ctx: *DCtx; closed: bool_t; points: *V2Df; n: uint32_t)
    proc draw_arc(ctx: *DCtx; x: real32_t; y: real32_t; radius: real32_t; start: real32_t; sweep: real32_t)
    proc draw_bezier(ctx: *DCtx; x0: real32_t; y0: real32_t; x1: real32_t; y1: real32_t; x2: real32_t; y2: real32_t; x3: real32_t; y3: real32_t)
    proc draw_line_color(ctx: *DCtx; color: color_t)
    proc draw_line_fill(ctx: *DCtx)
    proc draw_line_width(ctx: *DCtx; width: real32_t)
    proc draw_line_cap(ctx: *DCtx; cap: linecap_t)
    proc draw_line_join(ctx: *DCtx; join: linejoin_t)
    proc draw_line_dash(ctx: *DCtx; pattern: *[]real32_t; n: uint32_t)
    proc draw_rect(ctx: *DCtx; op: drawop_t; x: real32_t; y: real32_t; width: real32_t; height: real32_t)
    proc draw_rndrect(ctx: *DCtx; op: drawop_t; x: real32_t; y: real32_t; width: real32_t; height: real32_t; radius: real32_t)
    proc draw_circle(ctx: *DCtx; op: drawop_t; x: real32_t; y: real32_t; radius: real32_t)
    proc draw_ellipse(ctx: *DCtx; op: drawop_t; x: real32_t; y: real32_t; radx: real32_t; rady: real32_t)
    proc draw_polygon(ctx: *DCtx; op: drawop_t; points: *V2Df; n: uint32_t)
    proc draw_fill_color(ctx: *DCtx; color: color_t)
    proc draw_fill_linear(ctx: *DCtx; color: *[]uint32_t; stop: *[]real32_t; n: uint32_t; x0: real32_t; y0: real32_t; x1: real32_t; y1: real32_t)
    proc draw_fill_matrix(ctx: *DCtx; t2d: *T2Df)
    proc draw_fill_wrap(ctx: *DCtx; wrap: fillwrap_t)
    proc draw_font(ctx: *DCtx; font: *Font)
    proc draw_text_color(ctx: *DCtx; color: color_t)
    proc draw_text(ctx: *DCtx; text: *[]char_t; x: real32_t; y: real32_t)
    proc draw_text_path(ctx: *DCtx; op: drawop_t; text: *[]char_t; x: real32_t; y: real32_t)
    proc draw_text_width(ctx: *DCtx; width: real32_t)
    proc draw_text_trim(ctx: *DCtx; ellipsis: ellipsis_t)
    proc draw_text_align(ctx: *DCtx; halign: align_t; valign: align_t)
    proc draw_text_halign(ctx: *DCtx; halign: align_t)
    proc draw_text_extents(ctx: *DCtx; text: *[]char_t; refwidth: real32_t; width: *[]real32_t; height: *[]real32_t)
    proc draw_image(ctx: *DCtx; image: *Image; x: real32_t; y: real32_t)
    proc draw_image_frame(ctx: *DCtx; image: *Image; frame: uint32_t; x: real32_t; y: real32_t)
    proc draw_image_align(ctx: *DCtx; halign: align_t; valign: align_t)

    // from draw2d.h
    proc draw2d_start
    proc draw2d_finish

    // from draw2d.hxx
    type
        ImagePtData = cstruct
                        elem: carray 1024 of *Image end
        color_tData = cstruct
                        elem: carray 1024 of uint32_t end
        pixformat_t = (ekINDEX1, ekINDEX2, ekINDEX4, ekINDEX8, ekGRAY8, ekRGB24, ekRGBA32, ekFIMAGE)
        codec_t = integer
    const
        ekBMP = 3
        ekGIF = 4
        ekJPG = 1
        ekPNG = 2

    type
        fstyle_t = integer
    const
        ekFBOLD = 1
        ekFITALIC = 2
        ekFNORMAL = 0
        ekFPIXELS = 0
        ekFPOINTS = 64
        ekFSTRIKEOUT = 4
        ekFSUBSCRIPT = 16
        ekFSUPSCRIPT = 32
        ekFUNDERLINE = 8

    type
        linecap_t = (ekLCFLAT, ekLCSQUARE, ekLCROUND)
        linejoin_t = (ekLJMITER, ekLJROUND, ekLJBEVEL)
        fillwrap_t = (ekFCLAMP, ekFTILE, ekFFLIP)
        drawop_t = integer
    const
        ekFILL = 2
        ekFILLSK = 4
        ekSKFILL = 3
        ekSTROKE = 1

    type
        align_t = integer
    const
        ekBOTTOM = 3
        ekCENTER = 2
        ekJUSTIFY = 4
        ekLEFT = 1
        ekRIGHT = 3
        ekTOP = 1

    type
        ellipsis_t = integer
    const
        ekELLIPBEGIN = 2
        ekELLIPEND = 4
        ekELLIPMIDDLE = 3
        ekELLIPMLINE = 5
        ekELLIPNONE = 1

    type
        DCtx = cstruct end
        Palette = cstruct end
        Pixbuf = cstruct end
        Image = cstruct end
        Font = cstruct end
        color_t = uint32_t


    // from drawg.h
    proc draw_v2df(ctx: *DCtx; op: drawop_t; v2d: *V2Df; radius: real32_t)
    proc draw_v2dd(ctx: *DCtx; op: drawop_t; v2d: *V2Dd; radius: real64_t)
    proc draw_seg2df(ctx: *DCtx; seg: *Seg2Df)
    proc draw_seg2dd(ctx: *DCtx; seg: *Seg2Dd)
    proc draw_cir2df(ctx: *DCtx; op: drawop_t; cir: *Cir2Df)
    proc draw_cir2dd(ctx: *DCtx; op: drawop_t; cir: *Cir2Dd)
    proc draw_box2df(ctx: *DCtx; op: drawop_t; box: *Box2Df)
    proc draw_box2dd(ctx: *DCtx; op: drawop_t; box: *Box2Dd)
    proc draw_obb2df(ctx: *DCtx; op: drawop_t; obb: *OBB2Df)
    proc draw_obb2dd(ctx: *DCtx; op: drawop_t; obb: *OBB2Dd)
    proc draw_tri2df(ctx: *DCtx; op: drawop_t; tri: *Tri2Df)
    proc draw_tri2dd(ctx: *DCtx; op: drawop_t; tri: *Tri2Dd)
    proc draw_pol2df(ctx: *DCtx; op: drawop_t; pol: *Pol2Df)
    proc draw_pol2dd(ctx: *DCtx; op: drawop_t; pol: *Pol2Dd)

    // from font.h
    proc font_create(family: *[]char_t; size: real32_t; style: uint32_t): *Font
    proc font_system(size: real32_t; style: uint32_t): *Font
    proc font_monospace(size: real32_t; style: uint32_t): *Font
    proc font_with_style(font: *Font; style: uint32_t): *Font
    proc font_copy(font: *Font): *Font
    proc font_destroy(font: *[]*Font)
    proc font_equals(font1: *Font; font2: *Font): char_t
    proc font_regular_size(): real32_t
    proc font_small_size(): real32_t
    proc font_mini_size(): real32_t
    proc font_family(font: *Font): *[]char_t
    proc font_size(font: *Font): real32_t
    proc font_height(font: *Font): real32_t
    proc font_style(font: *Font): uint32_t
    proc font_extents(font: *Font; text: *[]char_t; refwidth: real32_t; width: *[]real32_t; height: *[]real32_t)
    proc font_exists_family(family: *[]char_t): char_t
    proc font_installed_families(): *ArrPtString

    // from image.h
    proc image_from_pixels(width: uint32_t; height: uint32_t; format: pixformat_t; data: *[]byte_t; palette: *[]uint32_t; palsize: uint32_t): *Image
    proc image_from_pixbuf(pixbuf: *Pixbuf; palette: *Palette): *Image
    proc image_from_file(pathname: *[]char_t; error: *[]ferror_t): *Image
    proc image_from_data(data: *[]byte_t; size: uint32_t): *Image
    proc image_from_resource(pack: *ResPack; id: ResId): *Image
    proc image_copy(image: *Image): *Image
    proc image_trim(image: *Image; x: uint32_t; y: uint32_t; width: uint32_t; height: uint32_t): *Image
    proc image_rotate(image: *Image; angle: real32_t; nsize: bool_t; background: color_t; t2d: *T2Df): *Image
    proc image_scale(image: *Image; nwidth: uint32_t; nheight: uint32_t): *Image
    proc image_read(stm: *Stream): *Image
    proc image_to_file(image: *Image; pathname: *[]char_t; error: *[]ferror_t): char_t
    proc image_write(stream: *Stream; image: *Image)
    proc image_destroy(image: *[]*Image)
    proc image_format(image: *Image): pixformat_t
    proc image_width(image: *Image): uint32_t
    proc image_height(image: *Image): uint32_t
    proc image_pixels(image: *Image; format: pixformat_t): *Pixbuf
    proc image_codec(image: *Image; codec: codec_t): char_t
    proc image_get_codec(image: *Image): codec_t
    proc image_num_frames(image: *Image): uint32_t
    proc image_frame_length(image: *Image; findex: uint32_t): real32_t

    // from palette.h
    proc palette_create(size: uint32_t): *Palette
    proc palette_cga2(mode: bool_t; intense: bool_t): *Palette
    proc palette_ega4(): *Palette
    proc palette_rgb8(): *Palette
    proc palette_gray1(): *Palette
    proc palette_gray2(): *Palette
    proc palette_gray4(): *Palette
    proc palette_gray8(): *Palette
    proc palette_binary(zero: color_t; one: color_t): *Palette
    proc palette_destroy(palette: *[]*Palette)
    proc palette_size(palette: *Palette): uint32_t
    proc palette_colors(palette: *Palette): *[]uint32_t
    proc palette_ccolors(palette: *Palette): *[]uint32_t

    // from pixbuf.h
    proc pixbuf_create(width: uint32_t; height: uint32_t; format: pixformat_t): *Pixbuf
    proc pixbuf_copy(pixbuf: *Pixbuf): *Pixbuf
    proc pixbuf_trim(pixbuf: *Pixbuf; x: uint32_t; y: uint32_t; width: uint32_t; height: uint32_t): *Pixbuf
    proc pixbuf_convert(pixbuf: *Pixbuf; palette: *Palette; oformat: pixformat_t): *Pixbuf
    proc pixbuf_destroy(pixbuf: *[]*Pixbuf)
    proc pixbuf_format(pixbuf: *Pixbuf): pixformat_t
    proc pixbuf_width(pixbuf: *Pixbuf): uint32_t
    proc pixbuf_height(pixbuf: *Pixbuf): uint32_t
    proc pixbuf_size(pixbuf: *Pixbuf): uint32_t
    proc pixbuf_dsize(pixbuf: *Pixbuf): uint32_t
    proc pixbuf_cdata(pixbuf: *Pixbuf): *[]byte_t
    proc pixbuf_data(pixbuf: *Pixbuf): *[]byte_t
    proc pixbuf_format_bpp(format: pixformat_t): uint32_t
    proc pixbuf_get(pixbuf: *Pixbuf; x: uint32_t; y: uint32_t): uint32_t
    proc pixbuf_set(pixbuf: *Pixbuf; x: uint32_t; y: uint32_t; value: uint32_t)

    // from box2d.h
    proc box2df(minX: real32_t; minY: real32_t; maxX: real32_t; maxY: real32_t): Box2Df
    proc box2dd(minX: real64_t; minY: real64_t; maxX: real64_t; maxY: real64_t): Box2Dd
    proc box2d_from_pointsf(p: *V2Df; n: uint32_t): Box2Df
    proc box2d_from_pointsd(p: *V2Dd; n: uint32_t): Box2Dd
    proc box2d_centerf(box: *Box2Df): V2Df
    proc box2d_centerd(box: *Box2Dd): V2Dd
    proc box2d_addf(box: *Box2Df; p: *V2Df)
    proc box2d_addd(box: *Box2Dd; p: *V2Dd)
    proc box2d_addnf(box: *Box2Df; p: *V2Df; n: uint32_t)
    proc box2d_addnd(box: *Box2Dd; p: *V2Dd; n: uint32_t)
    proc box2d_add_circlef(box: *Box2Df; cir: *Cir2Df)
    proc box2d_add_circled(box: *Box2Dd; cir: *Cir2Dd)
    proc box2d_mergef(dest: *Box2Df; src: *Box2Df)
    proc box2d_merged(dest: *Box2Dd; src: *Box2Dd)
    proc box2d_segmentsf(box: *Box2Df; segs: *Seg2Df)
    proc box2d_segmentsd(box: *Box2Dd; segs: *Seg2Dd)
    proc box2d_areaf(box: *Box2Df): real32_t
    proc box2d_aread(box: *Box2Dd): real64_t
    proc box2d_is_nullf(box: *Box2Df): char_t
    proc box2d_is_nulld(box: *Box2Dd): char_t

    // from cir2d.h
    proc cir2df(x: real32_t; y: real32_t; r: real32_t): Cir2Df
    proc cir2dd(x: real64_t; y: real64_t; r: real64_t): Cir2Dd
    proc cir2d_from_boxf(box: *Box2Df): Cir2Df
    proc cir2d_from_boxd(box: *Box2Dd): Cir2Dd
    proc cir2d_from_pointsf(p: *V2Df; n: uint32_t): Cir2Df
    proc cir2d_from_pointsd(p: *V2Dd; n: uint32_t): Cir2Dd
    proc cir2d_minimumf(p: *V2Df; n: uint32_t): Cir2Df
    proc cir2d_minimumd(p: *V2Dd; n: uint32_t): Cir2Dd
    proc cir2d_areaf(cir: *Cir2Df): real32_t
    proc cir2d_aread(cir: *Cir2Dd): real64_t
    proc cir2d_is_nullf(cir: *Cir2Df): char_t
    proc cir2d_is_nulld(cir: *Cir2Dd): char_t

    // from col2d.h
    proc col2d_point_pointf(pnt1: *V2Df; pnt2: *V2Df; tol: real32_t; col: *Col2Df): char_t
    proc col2d_point_pointd(pnt1: *V2Dd; pnt2: *V2Dd; tol: real64_t; col: *Col2Dd): char_t
    proc col2d_segment_pointf(seg: *Seg2Df; pnt: *V2Df; tol: real32_t; col: *Col2Df): char_t
    proc col2d_segment_pointd(seg: *Seg2Dd; pnt: *V2Dd; tol: real64_t; col: *Col2Dd): char_t
    proc col2d_segment_segmentf(seg1: *Seg2Df; seg2: *Seg2Df; col: *Col2Df): char_t
    proc col2d_segment_segmentd(seg1: *Seg2Dd; seg2: *Seg2Dd; col: *Col2Dd): char_t
    proc col2d_circle_pointf(cir: *Cir2Df; pnt: *V2Df; col: *Col2Df): char_t
    proc col2d_circle_pointd(cir: *Cir2Dd; pnt: *V2Dd; col: *Col2Dd): char_t
    proc col2d_circle_segmentf(cir: *Cir2Df; seg: *Seg2Df; col: *Col2Df): char_t
    proc col2d_circle_segmentd(cir: *Cir2Dd; seg: *Seg2Dd; col: *Col2Dd): char_t
    proc col2d_circle_circlef(cir1: *Cir2Df; cir2: *Cir2Df; col: *Col2Df): char_t
    proc col2d_circle_circled(cir1: *Cir2Dd; cir2: *Cir2Dd; col: *Col2Dd): char_t
    proc col2d_box_pointf(box: *Box2Df; pnt: *V2Df; col: *Col2Df): char_t
    proc col2d_box_pointd(box: *Box2Dd; pnt: *V2Dd; col: *Col2Dd): char_t
    proc col2d_box_segmentf(box: *Box2Df; seg: *Seg2Df; col: *Col2Df): char_t
    proc col2d_box_segmentd(box: *Box2Dd; seg: *Seg2Dd; col: *Col2Df): char_t
    proc col2d_box_circlef(box: *Box2Df; cir: *Cir2Df; col: *Col2Df): char_t
    proc col2d_box_circled(box: *Box2Dd; cir: *Cir2Dd; col: *Col2Dd): char_t
    proc col2d_box_boxf(box1: *Box2Df; box2: *Box2Df; col: *Col2Df): char_t
    proc col2d_box_boxd(box1: *Box2Dd; box2: *Box2Dd; col: *Col2Dd): char_t
    proc col2d_obb_pointf(obb: *OBB2Df; pnt: *V2Df; col: *Col2Df): char_t
    proc col2d_obb_pointd(obb: *OBB2Dd; pnt: *V2Dd; col: *Col2Dd): char_t
    proc col2d_obb_segmentf(obb: *OBB2Df; seg: *Seg2Df; col: *Col2Df): char_t
    proc col2d_obb_segmentd(obb: *OBB2Dd; seg: *Seg2Dd; col: *Col2Dd): char_t
    proc col2d_obb_circlef(obb: *OBB2Df; cir: *Cir2Df; col: *Col2Df): char_t
    proc col2d_obb_circled(obb: *OBB2Dd; cir: *Cir2Dd; col: *Col2Dd): char_t
    proc col2d_obb_boxf(obb: *OBB2Df; box: *Box2Df; col: *Col2Df): char_t
    proc col2d_obb_boxd(obb: *OBB2Dd; box: *Box2Dd; col: *Col2Dd): char_t
    proc col2d_obb_obbf(obb1: *OBB2Df; obb2: *OBB2Df; col: *Col2Df): char_t
    proc col2d_obb_obbd(obb1: *OBB2Dd; obb2: *OBB2Dd; col: *Col2Dd): char_t
    proc col2d_tri_pointf(tri: *Tri2Df; pnt: *V2Df; col: *Col2Df): char_t
    proc col2d_tri_pointd(tri: *Tri2Dd; pnt: *V2Dd; col: *Col2Dd): char_t
    proc col2d_tri_segmentf(tri: *Tri2Df; seg: *Seg2Df; col: *Col2Df): char_t
    proc col2d_tri_segmentd(tri: *Tri2Dd; seg: *Seg2Dd; col: *Col2Dd): char_t
    proc col2d_tri_circlef(tri: *Tri2Df; cir: *Cir2Df; col: *Col2Df): char_t
    proc col2d_tri_circled(tri: *Tri2Dd; cir: *Cir2Df; col: *Col2Df): char_t
    proc col2d_tri_boxf(tri: *Tri2Df; box: *Box2Df; col: *Col2Df): char_t
    proc col2d_tri_boxd(tri: *Tri2Dd; box: *Box2Df; col: *Col2Df): char_t
    proc col2d_tri_obbf(tri: *Tri2Df; obb: *OBB2Df; col: *Col2Df): char_t
    proc col2d_tri_obbd(tri: *Tri2Dd; obb: *OBB2Dd; col: *Col2Dd): char_t
    proc col2d_tri_trif(tri1: *Tri2Df; tri2: *Tri2Df; col: *Col2Df): char_t
    proc col2d_tri_trid(tri1: *Tri2Dd; tri2: *Tri2Dd; col: *Col2Dd): char_t
    proc col2d_poly_pointf(poly: *Pol2Df; pnt: *V2Df; col: *Col2Df): char_t
    proc col2d_poly_pointd(poly: *Pol2Dd; pnt: *V2Dd; col: *Col2Dd): char_t
    proc col2d_poly_segmentf(poly: *Pol2Df; seg: *Seg2Df; col: *Col2Df): char_t
    proc col2d_poly_segmentd(poly: *Pol2Dd; seg: *Seg2Dd; col: *Col2Dd): char_t
    proc col2d_poly_circlef(poly: *Pol2Df; cir: *Cir2Df; col: *Col2Df): char_t
    proc col2d_poly_circled(poly: *Pol2Dd; cir: *Cir2Dd; col: *Col2Dd): char_t
    proc col2d_poly_boxf(poly: *Pol2Df; box: *Box2Df; col: *Col2Df): char_t
    proc col2d_poly_boxd(poly: *Pol2Dd; box: *Box2Dd; col: *Col2Dd): char_t
    proc col2d_poly_obbf(poly: *Pol2Df; obb: *OBB2Df; col: *Col2Df): char_t
    proc col2d_poly_obbd(poly: *Pol2Dd; obb: *OBB2Dd; col: *Col2Dd): char_t
    proc col2d_poly_trif(poly: *Pol2Df; tri: *Tri2Df; col: *Col2Df): char_t
    proc col2d_poly_trid(poly: *Pol2Dd; tri: *Tri2Dd; col: *Col2Dd): char_t
    proc col2d_poly_polyf(poly1: *Pol2Df; poly2: *Pol2Df; col: *Col2Df): char_t
    proc col2d_poly_polyd(poly1: *Pol2Dd; poly2: *Pol2Dd; col: *Col2Dd): char_t
    proc col2d_point_line_projf(lx0: real32_t; ly0: real32_t; lx1: real32_t; ly1: real32_t; x: real32_t; y: real32_t; px: *[]real32_t; py: *[]real32_t)
    proc col2d_point_line_projd(lx0: real64_t; ly0: real64_t; lx1: real64_t; ly1: real64_t; x: real64_t; y: real64_t; px: *[]real64_t; py: *[]real64_t)
    proc col2d_line_linef(l0x0: real32_t; l0y0: real32_t; l0x1: real32_t; l0y1: real32_t; l1x0: real32_t; l1y0: real32_t; l1x1: real32_t; l1y1: real32_t; tol: real32_t; cx: *[]real32_t; cy: *[]real32_t): char_t
    proc col2d_line_lined(l0x0: real64_t; l0y0: real64_t; l0x1: real64_t; l0y1: real64_t; l1x0: real64_t; l1y0: real64_t; l1x1: real64_t; l1y1: real64_t; tol: real64_t; cx: *[]real64_t; cy: *[]real64_t): char_t
    proc col2d_aabb_aabb_distf(minx0: real32_t; miny0: real32_t; maxx0: real32_t; maxy0: real32_t; minx1: real32_t; miny1: real32_t; maxx1: real32_t; maxy1: real32_t): real32_t
    proc col2d_aabb_aabb_distd(minx0: real64_t; miny0: real64_t; maxx0: real64_t; maxy0: real64_t; minx1: real64_t; miny1: real64_t; maxx1: real64_t; maxy1: real64_t): real64_t
    proc col2d_aabb_point_distf(minx: real32_t; miny: real32_t; maxx: real32_t; maxy: real32_t; x: real32_t; y: real32_t): real32_t
    proc col2d_aabb_point_distd(minx: real64_t; miny: real64_t; maxx: real64_t; maxy: real64_t; x: real64_t; y: real64_t): real64_t
    proc col2d_line_point_distf(x0: real32_t; y0: real32_t; x1: real32_t; y1: real32_t; x: real32_t; y: real32_t): real32_t
    proc col2d_line_point_distd(x0: real64_t; y0: real64_t; x1: real64_t; y1: real64_t; x: real64_t; y: real64_t): real64_t

    // from geom2d.hxx
    type
        Box2DfData = cstruct
                        elem: carray 1024 of Box2Df end
        T2DfData = cstruct
                        elem: carray 1024 of T2Df end
        V2DdData = cstruct
                        elem: carray 1024 of V2Dd end
        Pol2DfPtData = cstruct
                        elem: carray 1024 of *Pol2Df end
        S2DdData = cstruct
                        elem: carray 1024 of S2Dd end
        Seg2DdData = cstruct
                        elem: carray 1024 of Seg2Dd end
        Tri2DfData = cstruct
                        elem: carray 1024 of Tri2Df end
        T2DdData = cstruct
                        elem: carray 1024 of T2Dd end
        R2DfData = cstruct
                        elem: carray 1024 of R2Df end
        Box2DdData = cstruct
                        elem: carray 1024 of Box2Dd end
        Tri2DdData = cstruct
                        elem: carray 1024 of Tri2Dd end
        R2DdData = cstruct
                        elem: carray 1024 of R2Dd end
        Pol2DdPtData = cstruct
                        elem: carray 1024 of *Pol2Dd end
        Col2DdData = cstruct
                        elem: carray 1024 of Col2Dd end
        S2DfData = cstruct
                        elem: carray 1024 of S2Df end
        V2DfData = cstruct
                        elem: carray 1024 of V2Df end
        Cir2DfData = cstruct
                        elem: carray 1024 of Cir2Df end
        Col2DfData = cstruct
                        elem: carray 1024 of Col2Df end
        Cir2DdData = cstruct
                        elem: carray 1024 of Cir2Dd end
        Seg2DfData = cstruct
                        elem: carray 1024 of Seg2Df end
        V2Df = cstruct
                        x: real32_t
                        y: real32_t end
        V2Dd = cstruct
                        x: real64_t
                        y: real64_t end
        S2Df = cstruct
                        width: real32_t
                        height: real32_t end
        S2Dd = cstruct
                        width: real64_t
                        height: real64_t end
        R2Df = cstruct
                        pos: V2Df
                        size: S2Df end
        R2Dd = cstruct
                        pos: V2Dd
                        size: S2Dd end
        T2Df = cstruct
                        i: V2Df
                        j: V2Df
                        p: V2Df end
        T2Dd = cstruct
                        i: V2Dd
                        j: V2Dd
                        p: V2Dd end
        Seg2Df = cstruct
                        p0: V2Df
                        p1: V2Df end
        Seg2Dd = cstruct
                        p0: V2Dd
                        p1: V2Dd end
        Cir2Df = cstruct
                        c: V2Df
                        r: real32_t end
        Cir2Dd = cstruct
                        c: V2Dd
                        r: real64_t end
        Box2Df = cstruct
                        min: V2Df
                        max: V2Df end
        Box2Dd = cstruct
                        min: V2Dd
                        max: V2Dd end
        OBB2Df = cstruct end
        OBB2Dd = cstruct end
        Tri2Df = cstruct
                        p0: V2Df
                        p1: V2Df
                        p2: V2Df end
        Tri2Dd = cstruct
                        p0: V2Dd
                        p1: V2Dd
                        p2: V2Dd end
        Pol2Df = cstruct end
        Pol2Dd = cstruct end
        Col2Df = cstruct
                        p: V2Df
                        n: V2Df
                        d: real32_t end
        Col2Dd = cstruct
                        p: V2Dd
                        n: V2Dd
                        d: real64_t end


    // from obb2d.h
    proc obb2d_createf(center: *V2Df; width: real32_t; height: real32_t; angle: real32_t): *OBB2Df
    proc obb2d_created(center: *V2Dd; width: real64_t; height: real64_t; angle: real64_t): *OBB2Dd
    proc obb2d_from_linef(p0: *V2Df; p1: *V2Df; thickness: real32_t): *OBB2Df
    proc obb2d_from_lined(p0: *V2Dd; p1: *V2Dd; thickness: real64_t): *OBB2Dd
    proc obb2d_from_pointsf(p: *V2Df; n: uint32_t): *OBB2Df
    proc obb2d_from_pointsd(p: *V2Dd; n: uint32_t): *OBB2Dd
    proc obb2d_copyf(obb: *OBB2Df): *OBB2Df
    proc obb2d_copyd(obb: *OBB2Dd): *OBB2Dd
    proc obb2d_destroyf(obb: *[]*OBB2Df)
    proc obb2d_destroyd(obb: *[]*OBB2Dd)
    proc obb2d_updatef(obb: *OBB2Df; center: *V2Df; width: real32_t; height: real32_t; angle: real32_t)
    proc obb2d_updated(obb: *OBB2Dd; center: *V2Dd; width: real64_t; height: real64_t; angle: real64_t)
    proc obb2d_movef(obb: *OBB2Df; offset_x: real32_t; offset_y: real32_t)
    proc obb2d_moved(obb: *OBB2Dd; offset_x: real64_t; offset_y: real64_t)
    proc obb2d_transformf(obb: *OBB2Df; t2d: *T2Df)
    proc obb2d_transformd(obb: *OBB2Dd; t2d: *T2Dd)
    proc obb2d_cornersf(obb: *OBB2Df): *V2Df
    proc obb2d_cornersd(obb: *OBB2Dd): *V2Dd
    proc obb2d_centerf(obb: *OBB2Df): V2Df
    proc obb2d_centerd(obb: *OBB2Dd): V2Dd
    proc obb2d_widthf(obb: *OBB2Df): real32_t
    proc obb2d_widthd(obb: *OBB2Dd): real64_t
    proc obb2d_heightf(obb: *OBB2Df): real32_t
    proc obb2d_heightd(obb: *OBB2Dd): real64_t
    proc obb2d_anglef(obb: *OBB2Df): real32_t
    proc obb2d_angled(obb: *OBB2Dd): real64_t
    proc obb2d_areaf(obb: *OBB2Df): real32_t
    proc obb2d_aread(obb: *OBB2Dd): real64_t
    proc obb2d_boxf(obb: *OBB2Df): Box2Df
    proc obb2d_boxd(obb: *OBB2Dd): Box2Dd

    // from pol2d.h
    proc pol2d_createf(points: *V2Df; n: uint32_t): *Pol2Df
    proc pol2d_created(points: *V2Dd; n: uint32_t): *Pol2Dd
    proc pol2d_convex_hullf(points: *V2Df; n: uint32_t): *Pol2Df
    proc pol2d_convex_hulld(points: *V2Dd; n: uint32_t): *Pol2Dd
    proc pol2d_copyf(pol: *Pol2Df): *Pol2Df
    proc pol2d_copyd(pol: *Pol2Dd): *Pol2Dd
    proc pol2d_destroyf(pol: *[]*Pol2Df)
    proc pol2d_destroyd(pol: *[]*Pol2Dd)
    proc pol2d_transformf(pol: *Pol2Df; t2d: *T2Df)
    proc pol2d_transformd(pol: *Pol2Dd; t2d: *T2Dd)
    proc pol2d_pointsf(pol: *Pol2Df): *V2Df
    proc pol2d_pointsd(pol: *Pol2Dd): *V2Dd
    proc pol2d_nf(pol: *Pol2Df): uint32_t
    proc pol2d_nd(pol: *Pol2Dd): uint32_t
    proc pol2d_areaf(pol: *Pol2Df): real32_t
    proc pol2d_aread(pol: *Pol2Dd): real64_t
    proc pol2d_boxf(pol: *Pol2Df): Box2Df
    proc pol2d_boxd(pol: *Pol2Dd): Box2Dd
    proc pol2d_ccwf(pol: *Pol2Df): char_t
    proc pol2d_ccwd(pol: *Pol2Dd): char_t
    proc pol2d_convexf(pol: *Pol2Df): char_t
    proc pol2d_convexd(pol: *Pol2Dd): char_t
    proc pol2d_centroidf(pol: *Pol2Df): V2Df
    proc pol2d_centroidd(pol: *Pol2Dd): V2Dd
    proc pol2d_visual_centerf(pol: *Pol2Df; norm_tol: real32_t): V2Df
    proc pol2d_visual_centerd(pol: *Pol2Dd; norm_tol: real64_t): V2Dd
    proc pol2d_trianglesf(pol: *Pol2Df): *ArrStTri2Df
    proc pol2d_trianglesd(pol: *Pol2Dd): *ArrStTri2Dd
    proc pol2d_convex_partitionf(pol: *Pol2Df): *ArrPtPol2Df
    proc pol2d_convex_partitiond(pol: *Pol2Dd): *ArrPtPol2Dd

    // from r2d.h
    proc r2df(x: real32_t; y: real32_t; width: real32_t; height: real32_t): R2Df
    proc r2dd(x: real64_t; y: real64_t; width: real64_t; height: real64_t): R2Dd
    proc r2d_centerf(r2d: *R2Df): V2Df
    proc r2d_centerd(r2d: *R2Dd): V2Dd
    proc r2d_collidef(r2d1: *R2Df; r2d2: *R2Df): char_t
    proc r2d_collided(r2d1: *R2Dd; r2d2: *R2Dd): char_t
    proc r2d_containsf(r2d: *R2Df; x: real32_t; y: real32_t): char_t
    proc r2d_containsd(r2d: *R2Dd; x: real64_t; y: real64_t): char_t
    proc r2d_clipf(viewport: *R2Df; r2d: *R2Df): char_t
    proc r2d_clipd(viewport: *R2Dd; r2d: *R2Dd): char_t
    proc r2d_joinf(r2d: *R2Df; src: *R2Df)
    proc r2d_joind(r2d: *R2Dd; src: *R2Dd)

    // from s2d.h
    proc s2df(width: real32_t; height: real32_t): S2Df
    proc s2di(width: uint32_t; height: uint32_t): S2Df
    proc s2dd(width: real64_t; height: real64_t): S2Dd

    // from seg2d.h
    proc seg2df(x0: real32_t; y0: real32_t; x1: real32_t; y1: real32_t): Seg2Df
    proc seg2dd(x0: real64_t; y0: real64_t; x1: real64_t; y1: real64_t): Seg2Dd
    proc seg2d_vf(p0: *V2Df; p1: *V2Df): Seg2Df
    proc seg2d_vd(p0: *V2Dd; p1: *V2Dd): Seg2Dd
    proc seg2d_lengthf(seg: *Seg2Df): real32_t
    proc seg2d_lengthd(seg: *Seg2Dd): real64_t
    proc seg2d_sqlengthf(seg: *Seg2Df): real32_t
    proc seg2d_sqlengthd(seg: *Seg2Dd): real64_t
    proc seg2d_evalf(seg: *Seg2Df; t: real32_t): V2Df
    proc seg2d_evald(seg: *Seg2Dd; t: real64_t): V2Dd
    proc seg2d_close_paramf(seg: *Seg2Df; pnt: *V2Df): real32_t
    proc seg2d_close_paramd(seg: *Seg2Dd; pnt: *V2Dd): real64_t
    proc seg2d_point_sqdistf(seg: *Seg2Df; pnt: *V2Df; t: *[]real32_t): real32_t
    proc seg2d_point_sqdistd(seg: *Seg2Dd; pnt: *V2Dd; t: *[]real64_t): real64_t
    proc seg2d_sqdistf(seg1: *Seg2Df; seg2: *Seg2Df; t1: *[]real32_t; t2: *[]real32_t): real32_t
    proc seg2d_sqdistd(seg1: *Seg2Dd; seg2: *Seg2Dd; t1: *[]real64_t; t2: *[]real64_t): real64_t

    // from t2d.h
    proc t2d_movef(dest: *T2Df; src: *T2Df; x: real32_t; y: real32_t)
    proc t2d_moved(dest: *T2Dd; src: *T2Dd; x: real64_t; y: real64_t)
    proc t2d_rotatef(dest: *T2Df; src: *T2Df; angle: real32_t)
    proc t2d_rotated(dest: *T2Dd; src: *T2Dd; angle: real64_t)
    proc t2d_scalef(dest: *T2Df; src: *T2Df; sx: real32_t; sy: real32_t)
    proc t2d_scaled(dest: *T2Dd; src: *T2Dd; sx: real64_t; sy: real64_t)
    proc t2d_invfastf(dest: *T2Df; src: *T2Df)
    proc t2d_invfastd(dest: *T2Dd; src: *T2Dd)
    proc t2d_inversef(dest: *T2Df; src: *T2Df)
    proc t2d_inversed(dest: *T2Dd; src: *T2Dd)
    proc t2d_multf(dest: *T2Df; src1: *T2Df; src2: *T2Df)
    proc t2d_multd(dest: *T2Dd; src1: *T2Dd; src2: *T2Dd)
    proc t2d_vmultf(dest: *V2Df; t2d: *T2Df; src: *V2Df)
    proc t2d_vmultd(dest: *V2Dd; t2d: *T2Dd; src: *V2Dd)
    proc t2d_vmultnf(dest: *V2Df; t2d: *T2Df; src: *V2Df; n: uint32_t)
    proc t2d_vmultnd(dest: *V2Dd; t2d: *T2Dd; src: *V2Dd; n: uint32_t)
    proc t2d_decomposef(t2d: *T2Df; pos: *V2Df; angle: *[]real32_t; sc: *V2Df)
    proc t2d_decomposed(t2d: *T2Dd; pos: *V2Dd; angle: *[]real64_t; sc: *V2Dd)
    proc t2d_to32(dest: *T2Df; src: *T2Dd)
    proc t2d_to64(dest: *T2Dd; src: *T2Df)

    // from tri2d.h
    proc tri2df(x0: real32_t; y0: real32_t; x1: real32_t; y1: real32_t; x2: real32_t; y2: real32_t): Tri2Df
    proc tri2dd(x0: real64_t; y0: real64_t; x1: real64_t; y1: real64_t; x2: real64_t; y2: real64_t): Tri2Dd
    proc tri2d_vf(p0: *V2Df; p1: *V2Df; p2: *V2Df): Tri2Df
    proc tri2d_vd(p0: *V2Dd; p1: *V2Dd; p2: *V2Dd): Tri2Dd
    proc tri2d_transformf(tri: *Tri2Df; t2d: *T2Df)
    proc tri2d_transformd(tri: *Tri2Dd; t2d: *T2Dd)
    proc tri2d_areaf(tri: *Tri2Df): real32_t
    proc tri2d_aread(tri: *Tri2Dd): real64_t
    proc tri2d_ccwf(tri: *Tri2Df): char_t
    proc tri2d_ccwd(tri: *Tri2Dd): char_t
    proc tri2d_centroidf(tri: *Tri2Df): V2Df
    proc tri2d_centroidd(tri: *Tri2Dd): V2Dd

    // from v2d.h
    proc v2df(x: real32_t; y: real32_t): V2Df
    proc v2dd(x: real64_t; y: real64_t): V2Dd
    proc v2d_tof(v: *V2Dd): V2Df
    proc v2d_tod(v: *V2Df): V2Dd
    proc v2d_tofn(vf: *V2Df; vd: *V2Dd; n: uint32_t)
    proc v2d_todn(vd: *V2Dd; vf: *V2Df; n: uint32_t)
    proc v2d_addf(v1: *V2Df; v2: *V2Df): V2Df
    proc v2d_addd(v1: *V2Dd; v2: *V2Dd): V2Dd
    proc v2d_subf(v1: *V2Df; v2: *V2Df): V2Df
    proc v2d_subd(v1: *V2Dd; v2: *V2Dd): V2Dd
    proc v2d_mulf(v: *V2Df; s: real32_t): V2Df
    proc v2d_muld(v: *V2Dd; s: real64_t): V2Dd
    proc v2d_fromf(v: *V2Df; dir: *V2Df; length: real32_t): V2Df
    proc v2d_fromd(v: *V2Dd; dir: *V2Dd; length: real64_t): V2Dd
    proc v2d_midf(v1: *V2Df; v2: *V2Df): V2Df
    proc v2d_midd(v1: *V2Dd; v2: *V2Dd): V2Dd
    proc v2d_unitf(v1: *V2Df; v2: *V2Df; dist: *[]real32_t): V2Df
    proc v2d_unitd(v1: *V2Dd; v2: *V2Dd; dist: *[]real64_t): V2Dd
    proc v2d_unit_xyf(x1: real32_t; y1: real32_t; x2: real32_t; y2: real32_t; dist: *[]real32_t): V2Df
    proc v2d_unit_xyd(x1: real64_t; y1: real64_t; x2: real64_t; y2: real64_t; dist: *[]real64_t): V2Dd
    proc v2d_perp_posf(v: *V2Df): V2Df
    proc v2d_perp_posd(v: *V2Dd): V2Dd
    proc v2d_perp_negf(v: *V2Df): V2Df
    proc v2d_perp_negd(v: *V2Dd): V2Dd
    proc v2d_from_anglef(a: real32_t): V2Df
    proc v2d_from_angled(a: real64_t): V2Dd
    proc v2d_normf(v: *V2Df): char_t
    proc v2d_normd(v: *V2Dd): char_t
    proc v2d_lengthf(v: *V2Df): real32_t
    proc v2d_lengthd(v: *V2Dd): real64_t
    proc v2d_sqlengthf(v: *V2Df): real32_t
    proc v2d_sqlengthd(v: *V2Dd): real64_t
    proc v2d_dotf(v1: *V2Df; v2: *V2Df): real32_t
    proc v2d_dotd(v1: *V2Dd; v2: *V2Dd): real64_t
    proc v2d_distf(v1: *V2Df; v2: *V2Df): real32_t
    proc v2d_distd(v1: *V2Dd; v2: *V2Dd): real64_t
    proc v2d_sqdistf(v1: *V2Df; v2: *V2Df): real32_t
    proc v2d_sqdistd(v1: *V2Dd; v2: *V2Dd): real64_t
    proc v2d_anglef(v1: *V2Df; v2: *V2Df): real32_t
    proc v2d_angled(v1: *V2Dd; v2: *V2Dd): real64_t
    proc v2d_rotatef(v: *V2Df; a: real32_t)
    proc v2d_rotated(v: *V2Dd; a: real64_t)

    // from button.h
    proc button_push(): *Button
    proc button_check(): *Button
    proc button_check3(): *Button
    proc button_radio(): *Button
    proc button_flat(): *Button
    proc button_flatgle(): *Button
    proc button_OnClick(button: *Button; listener: *Listener)
    proc button_text(button: *Button; text: *[]char_t)
    proc button_text_alt(button: *Button; text: *[]char_t)
    proc button_tooltip(button: *Button; text: *[]char_t)
    proc button_font(button: *Button; font: *Font)
    proc button_image(button: *Button; image: *Image)
    proc button_image_alt(button: *Button; image: *Image)
    proc button_state(button: *Button; state: state_t)
    proc button_get_state(button: *Button): state_t

    // from cell.h
    proc cell_control_imp(cell: *Cell; type_: *[]char_t): *void
    proc cell_layout(cell: *Cell): *Layout
    proc cell_enabled(cell: *Cell; enabled: bool_t)
    proc cell_visible(cell: *Cell; visible: bool_t)
    proc cell_focus(cell: *Cell)
    proc cell_padding(cell: *Cell; pall: real32_t)
    proc cell_padding2(cell: *Cell; ptb: real32_t; plr: real32_t)
    proc cell_padding4(cell: *Cell; pt: real32_t; pr: real32_t; pb: real32_t; pl: real32_t)
    proc cell_dbind_imp(cell: *Cell; type_: *[]char_t; size: uint16_t; mname: *[]char_t; mtype: *[]char_t; moffset: uint16_t; msize: uint16_t)

    // from combo.h
    proc combo_create(): *Combo
    proc combo_OnFilter(combo: *Combo; listener: *Listener)
    proc combo_OnChange(combo: *Combo; listener: *Listener)
    proc combo_text(combo: *Combo; text: *[]char_t)
    proc combo_align(combo: *Combo; align: align_t)
    proc combo_tooltip(combo: *Combo; text: *[]char_t)
    proc combo_color(combo: *Combo; color: color_t)
    proc combo_color_focus(combo: *Combo; color: color_t)
    proc combo_bgcolor(combo: *Combo; color: color_t)
    proc combo_bgcolor_focus(combo: *Combo; color: color_t)
    proc combo_phtext(combo: *Combo; text: *[]char_t)
    proc combo_phcolor(combo: *Combo; color: color_t)
    proc combo_phstyle(combo: *Combo; fstyle: uint32_t)
    proc combo_get_text(combo: *Combo; index: uint32_t): *[]char_t
    proc combo_count(combo: *Combo): uint32_t
    proc combo_add_elem(combo: *Combo; text: *[]char_t; image: *Image)
    proc combo_set_elem(combo: *Combo; index: uint32_t; text: *[]char_t; image: *Image)
    proc combo_ins_elem(combo: *Combo; index: uint32_t; text: *[]char_t; image: *Image)
    proc combo_del_elem(combo: *Combo; index: uint32_t)
    proc combo_duplicates(combo: *Combo; duplicates: bool_t)

    // from comwin.h
    proc comwin_open_file(parent: *Window; ftypes: *[]*[]char; size: uint32_t; start_dir: *[]char_t): *[]char_t
    proc comwin_save_file(parent: *Window; ftypes: *[]*[]char; size: uint32_t; start_dir: *[]char_t): *[]char_t
    proc comwin_color(parent: *Window; title: *[]char_t; x: real32_t; y: real32_t; halign: align_t; valign: align_t; current: color_t; colors: *[]uint32_t; n: uint32_t; OnChange: *Listener)

    // from edit.h
    proc edit_create(): *Edit
    proc edit_multiline(): *Edit
    proc edit_OnFilter(edit: *Edit; listener: *Listener)
    proc edit_OnChange(edit: *Edit; listener: *Listener)
    proc edit_text(edit: *Edit; text: *[]char_t)
    proc edit_font(edit: *Edit; font: *Font)
    proc edit_align(edit: *Edit; align: align_t)
    proc edit_passmode(edit: *Edit; passmode: bool_t)
    proc edit_editable(edit: *Edit; is_editable: bool_t)
    proc edit_autoselect(edit: *Edit; autoselect: bool_t)
    proc edit_tooltip(edit: *Edit; text: *[]char_t)
    proc edit_color(edit: *Edit; color: color_t)
    proc edit_color_focus(edit: *Edit; color: color_t)
    proc edit_bgcolor(edit: *Edit; color: color_t)
    proc edit_bgcolor_focus(edit: *Edit; color: color_t)
    proc edit_phtext(edit: *Edit; text: *[]char_t)
    proc edit_phcolor(edit: *Edit; color: color_t)
    proc edit_phstyle(edit: *Edit; fstyle: uint32_t)
    proc edit_get_text(edit: *Edit): *[]char_t

    // from globals.h
    proc globals_device(): device_t
    proc globals_resolution(resolution: *S2Df)
    proc globals_mouse_position(): V2Df

    // from gui.h
    proc gui_start
    proc gui_finish
    proc gui_respack(func_respack: FPtr_respack)
    proc gui_language(lang: *[]char_t)
    proc gui_text(id: ResId): *[]char_t
    proc gui_image(id: ResId): *Image
    proc gui_file(id: ResId; size: *[]uint32_t): *[]byte_t
    proc gui_dark_mode(): char_t
    proc gui_alt_color(light_color: color_t; dark_color: color_t): uint32_t
    proc gui_label_color(): uint32_t
    proc gui_view_color(): uint32_t
    proc gui_line_color(): uint32_t
    proc gui_link_color(): uint32_t
    proc gui_border_color(): uint32_t
    proc gui_resolution(): S2Df
    proc gui_mouse_pos(): V2Df
    proc gui_OnThemeChanged(listener: *Listener)
    proc evbind_object_imp(e: *Event; type_: *[]char_t): *void
    proc evbind_modify_imp(e: *Event; type_: *[]char_t; size: uint16_t; mname: *[]char_t; mtype: *[]char_t; moffset: uint16_t; msize: uint16_t): char_t

    // from gui.hxx
    const
        kTEXTFILTER_SIZE = 1024

    type
        FPtr_respackData = cstruct
                        elem: carray 1024 of FPtr_respack end
        orient_t = integer
    const
        ekHORIZONTAL = 1
        ekVERTICAL = 2

    type
        state_t = (ekOFF, ekON, ekMIXED)
        mouse_t = integer
    const
        ekMLEFT = 1
        ekMMIDDLE = 3
        ekMRIGHT = 2

    type
        cursor_t = integer
    const
        ekCARROW = 1
        ekCCROSS = 4
        ekCHAND = 2
        ekCIBEAM = 3
        ekCSIZENS = 6
        ekCSIZEWE = 5
        ekCUSER = 7

    type
        close_t = integer
    const
        ekCLBUTTON = 3
        ekCLDEACT = 4
        ekCLESC = 1
        ekCLINTRO = 2

    type
        scale_t = integer
    const
        ekASPECT = 3
        ekASPECTDW = 4
        ekAUTO = 1
        ekSNONE = 2

    type
        table_flag_t = integer
    const
        ekTBBGCOLOR = 256
        ekTBCHECK = 64
        ekTBCOMBO = 8
        ekTBEDIT = 4
        ekTBICON16 = 2
        ekTBPOPUP = 16
        ekTBRADIO = 32
        ekTBROWALT = 512
        ekTBROWPRESEL = 1024
        ekTBTEXT = 1
        ekTBTOOLTIP = 128

    type
        window_flag_t = integer
    const
        ekWNCLOSE = 16
        ekWNEDGE = 1
        ekWNESC = 128
        ekWNFLAG = 0
        ekWNMAX = 4
        ekWNMIN = 8
        ekWNRES = 32
        ekWNRETURN = 64
        ekWNSRES = 62
        ekWNSTD = 26
        ekWNTITLE = 2

    type
        event_t = integer
    const
        ekEVBUTTON = 1025
        ekEVCLICK = 1041
        ekEVCOLOR = 1050
        ekEVDOWN = 1039
        ekEVDRAG = 1042
        ekEVDRAW = 1034
        ekEVENTER = 1036
        ekEVEXIT = 1037
        ekEVFOCUS = 1032
        ekEVHEADCLICK = 1058
        ekEVHEADSIZE = 1057
        ekEVKEYDOWN = 1044
        ekEVKEYUP = 1045
        ekEVLABEL = 1024
        ekEVLISTBOX = 1027
        ekEVMENU = 1033
        ekEVMOVED = 1038
        ekEVOBJCHANGE = 1052
        ekEVPOPUP = 1026
        ekEVRESIZE = 1035
        ekEVSLIDER = 1028
        ekEVTBLCELL = 1056
        ekEVTBLNROWS = 1054
        ekEVTBLROW = 1055
        ekEVTBLSIZE = 1053
        ekEVTHEME = 1051
        ekEVTXTCHANGE = 1031
        ekEVTXTFILTER = 1030
        ekEVUP = 1040
        ekEVUPDOWN = 1029
        ekEVWHEEL = 1043
        ekEVWNDCLOSE = 1049
        ekEVWNDMOVED = 1046
        ekEVWNDSIZE = 1048
        ekEVWNDSIZING = 1047

    type
        Control = cstruct end
        Label = cstruct end
        Button = cstruct end
        PopUp = cstruct end
        Edit = cstruct end
        Combo = cstruct end
        ListBox = cstruct end
        UpDown = cstruct end
        Slider = cstruct end
        Progress = cstruct end
        View = cstruct end
        TextView = cstruct end
        ImageView = cstruct end
        TableView = cstruct end
        SplitView = cstruct end
        Layout = cstruct end
        Cell = cstruct end
        Panel = cstruct end
        Window = cstruct end
        Menu = cstruct end
        MenuItem = cstruct end
        EvButton = cstruct
                        index: uint32_t
                        state: state_t
                        text: *[]char_t end
        EvSlider = cstruct
                        pos: real32_t
                        incr: real32_t
                        step: uint32_t end
        EvText = cstruct
                        text: *[]char_t
                        cpos: uint32_t end
        EvTextFilter = cstruct
                        apply: char_t
                        text: carray 1024 of char_t
                        cpos: uint32_t end
        EvDraw = cstruct
                        ctx: *DCtx
                        x: real32_t
                        y: real32_t
                        width: real32_t
                        height: real32_t end
        EvMouse = cstruct
                        x: real32_t
                        y: real32_t
                        button: mouse_t
                        count: uint32_t end
        EvWheel = cstruct
                        x: real32_t
                        y: real32_t
                        dx: real32_t
                        dy: real32_t
                        dz: real32_t end
        EvKey = cstruct
                        key: vkey_t end
        EvPos = cstruct
                        x: real32_t
                        y: real32_t end
        EvSize = cstruct
                        width: real32_t
                        height: real32_t end
        EvWinClose = cstruct
                        origin: close_t end
        EvMenu = cstruct
                        index: uint32_t
                        state: state_t
                        str: *[]char_t end
        EvHeader = cstruct
                        index: uint32_t
                        width: real32_t end
        EvTbPos = cstruct
                        col: uint32_t
                        row: uint32_t end
        EvTbRow = cstruct
                        bgcolor: uint32_t end
        EvTbCell = cstruct
                        flags: uint32_t
                        text: *[]char_t
                        checked: char_t
                        bgcolor: uint32_t end
        FPtr_respack = proc(locale: *[]char_t): *ResPack


    // from imageview.h
    proc imageview_create(): *ImageView
    proc imageview_size(view: *ImageView; size: S2Df)
    proc imageview_scale(view: *ImageView; scale: scale_t)
    proc imageview_image(view: *ImageView; image: *Image)
    proc imageview_OnClick(view: *ImageView; listener: *Listener)
    proc imageview_OnOverDraw(view: *ImageView; listener: *Listener)

    // from label.h
    proc label_create(): *Label
    proc label_multiline(): *Label
    proc label_OnClick(label: *Label; listener: *Listener)
    proc label_text(label: *Label; text: *[]char_t)
    proc label_font(label: *Label; font: *Font)
    proc label_style_over(label: *Label; fstyle: uint32_t)
    proc label_align(label: *Label; align: align_t)
    proc label_color(label: *Label; color: color_t)
    proc label_color_over(label: *Label; color: color_t)
    proc label_bgcolor(label: *Label; color: color_t)
    proc label_bgcolor_over(label: *Label; color: color_t)

    // from layout.h
    proc layout_create(ncols: uint32_t; nrows: uint32_t): *Layout
    proc layout_cell(layout: *Layout; col: uint32_t; row: uint32_t): *Cell
    proc layout_label(layout: *Layout; label: *Label; col: uint32_t; row: uint32_t)
    proc layout_button(layout: *Layout; button: *Button; col: uint32_t; row: uint32_t)
    proc layout_popup(layout: *Layout; popup: *PopUp; col: uint32_t; row: uint32_t)
    proc layout_edit(layout: *Layout; edit: *Edit; col: uint32_t; row: uint32_t)
    proc layout_combo(layout: *Layout; combo: *Combo; col: uint32_t; row: uint32_t)
    proc layout_listbox(layout: *Layout; list: *ListBox; col: uint32_t; row: uint32_t)
    proc layout_updown(layout: *Layout; updown: *UpDown; col: uint32_t; row: uint32_t)
    proc layout_slider(layout: *Layout; slider: *Slider; col: uint32_t; row: uint32_t)
    proc layout_progress(layout: *Layout; progress: *Progress; col: uint32_t; row: uint32_t)
    proc layout_view(layout: *Layout; view: *View; col: uint32_t; row: uint32_t)
    proc layout_textview(layout: *Layout; view: *TextView; col: uint32_t; row: uint32_t)
    proc layout_imageview(layout: *Layout; view: *ImageView; col: uint32_t; row: uint32_t)
    proc layout_tableview(layout: *Layout; view: *TableView; col: uint32_t; row: uint32_t)
    proc layout_splitview(layout: *Layout; view: *SplitView; col: uint32_t; row: uint32_t)
    proc layout_panel(layout: *Layout; panel: *Panel; col: uint32_t; row: uint32_t)
    proc layout_layout(layout: *Layout; sublayout: *Layout; col: uint32_t; row: uint32_t)
    proc layout_control_imp(layout: *Layout; col: uint32_t; row: uint32_t; type_: *[]char_t): *void
    proc layout_taborder(layout: *Layout; order: orient_t)
    proc layout_tabstop(layout: *Layout; col: uint32_t; row: uint32_t; tabstop: bool_t)
    proc layout_content_size(layout: *Layout; size: S2Df)
    proc layout_hsize(layout: *Layout; col: uint32_t; width: real32_t)
    proc layout_vsize(layout: *Layout; row: uint32_t; height: real32_t)
    proc layout_hmargin(layout: *Layout; col: uint32_t; margin: real32_t)
    proc layout_vmargin(layout: *Layout; row: uint32_t; margin: real32_t)
    proc layout_hexpand(layout: *Layout; col: uint32_t)
    proc layout_hexpand2(layout: *Layout; col1: uint32_t; col2: uint32_t; exp: real32_t)
    proc layout_hexpand3(layout: *Layout; col1: uint32_t; col2: uint32_t; col3: uint32_t; exp1: real32_t; exp2: real32_t)
    proc layout_vexpand(layout: *Layout; row: uint32_t)
    proc layout_vexpand2(layout: *Layout; row1: uint32_t; row2: uint32_t; exp: real32_t)
    proc layout_vexpand3(layout: *Layout; row1: uint32_t; row2: uint32_t; row3: uint32_t; exp1: real32_t; exp2: real32_t)
    proc layout_halign(layout: *Layout; col: uint32_t; row: uint32_t; align: align_t)
    proc layout_valign(layout: *Layout; col: uint32_t; row: uint32_t; align: align_t)
    proc layout_show_col(layout: *Layout; col: uint32_t; visible: bool_t)
    proc layout_show_row(layout: *Layout; row: uint32_t; visible: bool_t)
    proc layout_margin(layout: *Layout; mall: real32_t)
    proc layout_margin2(layout: *Layout; mtb: real32_t; mlr: real32_t)
    proc layout_margin4(layout: *Layout; mt: real32_t; mr: real32_t; mb: real32_t; ml: real32_t)
    proc layout_bgcolor(layout: *Layout; color: color_t)
    proc layout_skcolor(layout: *Layout; color: color_t)
    proc layout_update(layout: *Layout)
    proc layout_dbind_imp(layout: *Layout; listener: *Listener; type_: *[]char_t; size: uint16_t)
    proc layout_dbind_obj_imp(layout: *Layout; obj: *void; type_: *[]char_t)
    proc layout_dbind_update_imp(layout: *Layout; type_: *[]char_t; size: uint16_t; mname: *[]char_t; mtype: *[]char_t; moffset: uint16_t; msize: uint16_t)

    // from listbox.h
    proc listbox_create(): *ListBox
    proc listbox_OnSelect(listbox: *ListBox; listener: *Listener)
    proc listbox_size(listbox: *ListBox; size: S2Df)
    proc listbox_checkbox(listbox: *ListBox; show: bool_t)
    proc listbox_multisel(listbox: *ListBox; multisel: bool_t)
    proc listbox_add_elem(listbox: *ListBox; text: *[]char_t; image: *Image)
    proc listbox_set_elem(listbox: *ListBox; index: uint32_t; text: *[]char_t; image: *Image)
    proc listbox_clear(listbox: *ListBox)
    proc listbox_color(listbox: *ListBox; index: uint32_t; color: color_t)
    proc listbox_select(listbox: *ListBox; index: uint32_t; select: bool_t)
    proc listbox_check(listbox: *ListBox; index: uint32_t; check: bool_t)
    proc listbox_count(listbox: *ListBox): uint32_t
    proc listbox_text(listbox: *ListBox; index: uint32_t): *[]char_t
    proc listbox_selected(listbox: *ListBox; index: uint32_t): char_t
    proc listbox_checked(listbox: *ListBox; index: uint32_t): char_t

    // from menu.h
    proc menu_create(): *Menu
    proc menu_destroy(menu: *[]*Menu)
    proc menu_item(menu: *Menu; item: *MenuItem)
    proc menu_launch(menu: *Menu; position: V2Df)
    proc menu_hide(menu: *Menu)
    proc menu_off_items(menu: *Menu)
    proc menu_get_item(menu: *Menu; index: uint32_t): *MenuItem
    proc menu_size(menu: *Menu): uint32_t

    // from menuitem.h
    proc menuitem_create(): *MenuItem
    proc menuitem_separator(): *MenuItem
    proc menuitem_OnClick(item: *MenuItem; listener: *Listener)
    proc menuitem_enabled(item: *MenuItem; enabled: bool_t)
    proc menuitem_visible(item: *MenuItem; visible: bool_t)
    proc menuitem_text(item: *MenuItem; text: *[]char_t)
    proc menuitem_image(item: *MenuItem; image: *Image)
    proc menuitem_key(item: *MenuItem; key: vkey_t; modifiers: uint32_t)
    proc menuitem_submenu(item: *MenuItem; submenu: *[]*Menu)
    proc menuitem_state(item: *MenuItem; state: state_t)

    // from panel.h
    proc panel_create(): *Panel
    proc panel_scroll(hscroll: bool_t; vscroll: bool_t): *Panel
    proc panel_data_imp(panel: *Panel; data: *[]*void; func_destroy_item: FPtr_destroy)
    proc panel_get_data_imp(panel: *Panel): *void
    proc panel_size(panel: *Panel; size: S2Df)
    proc panel_layout(panel: *Panel; layout: *Layout): uint32_t
    proc panel_get_layout(panel: *Panel; index: uint32_t): *Layout
    proc panel_visible_layout(panel: *Panel; index: uint32_t)
    proc panel_update(panel: *Panel)
    proc panel_scroll_width(panel: *Panel): real32_t
    proc panel_scroll_height(panel: *Panel): real32_t

    // from popup.h
    proc popup_create(): *PopUp
    proc popup_OnSelect(popup: *PopUp; listener: *Listener)
    proc popup_tooltip(popup: *PopUp; text: *[]char_t)
    proc popup_add_elem(popup: *PopUp; text: *[]char_t; image: *Image)
    proc popup_set_elem(popup: *PopUp; index: uint32_t; text: *[]char_t; image: *Image)
    proc popup_clear(popup: *PopUp)
    proc popup_count(popup: *PopUp): uint32_t
    proc popup_list_height(popup: *PopUp; elems: uint32_t)
    proc popup_selected(popup: *PopUp; index: uint32_t)
    proc popup_get_selected(popup: *PopUp): uint32_t

    // from progress.h
    proc progress_create(): *Progress
    proc progress_undefined(progress: *Progress; running: bool_t)
    proc progress_value(progress: *Progress; value: real32_t)

    // from slider.h
    proc slider_create(): *Slider
    proc slider_vertical(): *Slider
    proc slider_OnMoved(slider: *Slider; listener: *Listener)
    proc slider_tooltip(slider: *Slider; text: *[]char_t)
    proc slider_steps(slider: *Slider; steps: uint32_t)
    proc slider_value(slider: *Slider; value: real32_t)
    proc slider_get_value(slider: *Slider): real32_t

    // from splitview.h
    proc splitview_horizontal(): *SplitView
    proc splitview_vertical(): *SplitView
    proc splitview_size(split: *SplitView; size: S2Df)
    proc splitview_view(split: *SplitView; view: *View)
    proc splitview_text(split: *SplitView; view: *TextView)
    proc splitview_split(split: *SplitView; child: *SplitView)
    proc splitview_panel(split: *SplitView; panel: *Panel)
    proc splitview_pos(split: *SplitView; pos: real32_t)

    // from tableview.h
    proc tableview_create(num_cols: uint32_t; flags: uint32_t): *TableView
    proc tableview_OnNotify(view: *TableView; listener: *Listener)
    proc tableview_size(view: *TableView; size: S2Df)
    proc tableview_ctext(view: *TableView; id: uint32_t; text: *[]char_t)
    proc tableview_cwidth(view: *TableView; id: uint32_t; width: real32_t)
    proc tableview_calign(view: *TableView; id: uint32_t; align: align_t)
    proc tableview_get_cwidth(view: *TableView; id: uint32_t): real32_t
    proc tableview_get_size(view: *TableView; size: *S2Df)
    proc tableview_update(view: *TableView)

    // from textview.h
    proc textview_create(): *TextView
    proc textview_size(view: *TextView; size: S2Df)
    proc textview_clear(view: *TextView)
    proc textview_printf(view: *TextView; format: *[]char_t): uint32_t [varargs]
    proc textview_writef(view: *TextView; text: *[]char_t)
    proc textview_rtf(view: *TextView; rtf_in: *Stream)
    proc textview_units(view: *TextView; units: uint32_t)
    proc textview_family(view: *TextView; family: *[]char_t)
    proc textview_fsize(view: *TextView; size: real32_t)
    proc textview_fstyle(view: *TextView; fstyle: uint32_t)
    proc textview_color(view: *TextView; color: color_t)
    proc textview_bgcolor(view: *TextView; color: color_t)
    proc textview_pgcolor(view: *TextView; color: color_t)
    proc textview_halign(view: *TextView; align: align_t)
    proc textview_lspacing(view: *TextView; scale: real32_t)
    proc textview_bfspace(view: *TextView; space: real32_t)
    proc textview_afspace(view: *TextView; space: real32_t)
    proc textview_scroll_down(view: *TextView)
    proc textview_editable(view: *TextView; is_editable: bool_t)

    // from updown.h
    proc updown_create(): *UpDown
    proc updown_OnClick(updown: *UpDown; listener: *Listener)
    proc updown_tooltip(updown: *UpDown; text: *[]char_t)

    // from view.h
    proc view_create(): *View
    proc view_scroll(): *View
    proc view_data_imp(view: *View; data: *[]*void; func_destroy_data: FPtr_destroy)
    proc view_get_data_imp(view: *View): *void
    proc view_size(view: *View; size: S2Df)
    proc view_OnDraw(view: *View; listener: *Listener)
    proc view_OnSize(view: *View; listener: *Listener)
    proc view_OnEnter(view: *View; listener: *Listener)
    proc view_OnExit(view: *View; listener: *Listener)
    proc view_OnMove(view: *View; listener: *Listener)
    proc view_OnDown(view: *View; listener: *Listener)
    proc view_OnUp(view: *View; listener: *Listener)
    proc view_OnClick(view: *View; listener: *Listener)
    proc view_OnDrag(view: *View; listener: *Listener)
    proc view_OnWheel(view: *View; listener: *Listener)
    proc view_OnKeyDown(view: *View; listener: *Listener)
    proc view_OnKeyUp(view: *View; listener: *Listener)
    proc view_OnFocus(view: *View; listener: *Listener)
    proc view_keybuf(view: *View; buffer: *KeyBuf)
    proc view_get_size(view: *View; size: *S2Df)
    proc view_content_size(view: *View; size: S2Df; line: S2Df)
    proc view_scroll_x(view: *View; pos: real32_t)
    proc view_scroll_y(view: *View; pos: real32_t)
    proc view_scroll_size(view: *View; width: *[]real32_t; height: *[]real32_t)
    proc view_viewport(view: *View; pos: *V2Df; size: *S2Df)
    proc view_point_scale(view: *View; scale: *[]real32_t)
    proc view_update(view: *View)
    proc view_native(view: *View): *void

    // from window.h
    proc window_create(flags: uint32_t): *Window
    proc window_destroy(window: *[]*Window)
    proc window_panel(window: *Window; panel: *Panel)
    proc window_OnClose(window: *Window; listener: *Listener)
    proc window_OnMoved(window: *Window; listener: *Listener)
    proc window_OnResize(window: *Window; listener: *Listener)
    proc window_title(window: *Window; text: *[]char_t)
    proc window_show(window: *Window)
    proc window_hide(window: *Window)
    proc window_modal(window: *Window; parent: *Window): uint32_t
    proc window_stop_modal(window: *Window; return_value: uint32_t)
    proc window_update(window: *Window)
    proc window_origin(window: *Window; origin: V2Df)
    proc window_size(window: *Window; size: S2Df)
    proc window_get_origin(window: *Window): V2Df
    proc window_get_size(window: *Window): S2Df
    proc window_get_client_size(window: *Window): S2Df
    proc window_defbutton(window: *Window; button: *Button)
    proc window_cursor(window: *Window; cursor: cursor_t; image: *Image; hot_x: real32_t; hot_y: real32_t)

    // from bfile.h
    proc bfile_dir_work(pathname: *[]char_t; size: uint32_t): uint32_t
    proc bfile_dir_set_work(pathname: *[]char_t; error: *[]ferror_t): char_t
    proc bfile_dir_home(pathname: *[]char_t; size: uint32_t): uint32_t
    proc bfile_dir_data(pathname: *[]char_t; size: uint32_t): uint32_t
    proc bfile_dir_exec(pathname: *[]char_t; size: uint32_t): uint32_t
    proc bfile_dir_create(pathname: *[]char_t; error: *[]ferror_t): char_t
    proc bfile_dir_open(pathname: *[]char_t; error: *[]ferror_t): *Dir
    proc bfile_dir_close(dir: *[]*Dir)
    proc bfile_dir_get(dir: *Dir; name: *[]char_t; size: uint32_t; type_: *[]file_type_t; fsize: *[]uint64_t; updated: *Date; error: *[]ferror_t): char_t
    proc bfile_dir_delete(pathname: *[]char_t; error: *[]ferror_t): char_t
    proc bfile_create(pathname: *[]char_t; error: *[]ferror_t): *File
    proc bfile_open(pathname: *[]char_t; mode: file_mode_t; error: *[]ferror_t): *File
    proc bfile_close(file: *[]*File)
    proc bfile_lstat(pathname: *[]char_t; type_: *[]file_type_t; size: *[]uint64_t; updated: *Date; error: *[]ferror_t): char_t
    proc bfile_fstat(file: *File; type_: *[]file_type_t; size: *[]uint64_t; updated: *Date; error: *[]ferror_t): char_t
    proc bfile_read(file: *File; data: *[]byte_t; size: uint32_t; rsize: *[]uint32_t; error: *[]ferror_t): char_t
    proc bfile_write(file: *File; data: *[]byte_t; size: uint32_t; wsize: *[]uint32_t; error: *[]ferror_t): char_t
    proc bfile_delete(pathname: *[]char_t; error: *[]ferror_t): char_t

    // from bmutex.h
    proc bmutex_create(): *Mutex
    proc bmutex_close(mutex: *[]*Mutex)
    proc bmutex_lock(mutex: *Mutex)
    proc bmutex_unlock(mutex: *Mutex)

    // from bproc.h
    proc bproc_exec(command: *[]char_t; error: *[]perror_t): *Proc
    proc bproc_close(proc_: *[]*Proc)
    proc bproc_cancel(proc_: *Proc): char_t
    proc bproc_wait(proc_: *Proc): uint32_t
    proc bproc_finish(proc_: *Proc; code: *[]uint32_t): char_t
    proc bproc_read(proc_: *Proc; data: *[]byte_t; size: uint32_t; rsize: *[]uint32_t; error: *[]perror_t): char_t
    proc bproc_eread(proc_: *Proc; data: *[]byte_t; size: uint32_t; rsize: *[]uint32_t; error: *[]perror_t): char_t
    proc bproc_write(proc_: *Proc; data: *[]byte_t; size: uint32_t; wsize: *[]uint32_t; error: *[]perror_t): char_t
    proc bproc_read_close(proc_: *Proc): char_t
    proc bproc_eread_close(proc_: *Proc): char_t
    proc bproc_write_close(proc_: *Proc): char_t
    proc bproc_exit(code: uint32_t)

    // from bsocket.h
    proc bsocket_connect(ip: uint32_t; port: uint16_t; timeout_ms: uint32_t; error: *[]serror_t): *Socket
    proc bsocket_server(port: uint16_t; max_connect: uint32_t; error: *[]serror_t): *Socket
    proc bsocket_accept(socket: *Socket; timeout_ms: uint32_t; error: *[]serror_t): *Socket
    proc bsocket_close(socket: *[]*Socket)
    proc bsocket_local_ip(socket: *Socket; ip: *[]uint32_t; port: *[]uint16_t)
    proc bsocket_remote_ip(socket: *Socket; ip: *[]uint32_t; port: *[]uint16_t)
    proc bsocket_read_timeout(socket: *Socket; timeout_ms: uint32_t)
    proc bsocket_write_timeout(socket: *Socket; timeout_ms: uint32_t)
    proc bsocket_read(socket: *Socket; data: *[]byte_t; size: uint32_t; rsize: *[]uint32_t; error: *[]serror_t): char_t
    proc bsocket_write(socket: *Socket; data: *[]byte_t; size: uint32_t; wsize: *[]uint32_t; error: *[]serror_t): char_t
    proc bsocket_url_ip(url: *[]char_t; error: *[]serror_t): uint32_t
    proc bsocket_str_ip(ip: *[]char_t): uint32_t
    proc bsocket_ip_str(ip: uint32_t): *[]char_t
    proc bsocket_hton2(dest: *[]byte_t; src: *[]byte_t)
    proc bsocket_hton4(dest: *[]byte_t; src: *[]byte_t)
    proc bsocket_hton8(dest: *[]byte_t; src: *[]byte_t)
    proc bsocket_ntoh2(dest: *[]byte_t; src: *[]byte_t)
    proc bsocket_ntoh4(dest: *[]byte_t; src: *[]byte_t)
    proc bsocket_ntoh8(dest: *[]byte_t; src: *[]byte_t)

    // from bthread.h
    proc bthread_create_imp(thmain: FPtr_thread_main; data: *void): *Thread
    proc bthread_current_id(): integer
    proc bthread_close(thread: *[]*Thread)
    proc bthread_cancel(thread: *Thread): char_t
    proc bthread_wait(thread: *Thread): uint32_t
    proc bthread_finish(thread: *Thread; code: *[]uint32_t): char_t
    proc bthread_sleep(milliseconds: uint32_t)

    // from btime.h
    proc btime_now(): uint64_t
    proc btime_date(date: *Date)
    proc btime_to_micro(date: *Date): uint64_t
    proc btime_to_date(micro: uint64_t; date: *Date)

    // from log.h
    proc log_printf(format: *[]char_t): uint32_t [varargs]
    proc log_output(std: bool_t; err: bool_t)
    proc log_file(pathname: *[]char_t)
    proc log_get_file(): *[]char_t

    // from osbs.h
    proc osbs_start
    proc osbs_finish
    proc osbs_platform(): platform_t
    proc osbs_windows(): win_t
    proc osbs_endian(): endian_t

    // from osbs.hxx
    type
        platform_t = integer
    const
        ekIOS = 4
        ekLINUX = 3
        ekMACOS = 2
        ekWINDOWS = 1

    type
        device_t = integer
    const
        ekDESKTOP = 1
        ekPHONE = 2
        ekTABLET = 3

    type
        win_t = integer
    const
        ekWIN_10 = 15
        ekWIN_2K = 3
        ekWIN_7 = 11
        ekWIN_71 = 12
        ekWIN_8 = 13
        ekWIN_81 = 14
        ekWIN_9x = 1
        ekWIN_NO = 16
        ekWIN_NT4 = 2
        ekWIN_VI = 8
        ekWIN_VI1 = 9
        ekWIN_VI2 = 10
        ekWIN_XP = 4
        ekWIN_XP1 = 5
        ekWIN_XP2 = 6
        ekWIN_XP3 = 7

    type
        endian_t = integer
    const
        ekBIGEND = 2
        ekLITEND = 1

    type
        week_day_t = (ekSUNDAY, ekMONDAY, ekTUESDAY, ekWEDNESDAY, ekTHURSDAY, ekFRIDAY, ekSATURDAY)
        month_t = integer
    const
        ekAPRIL = 4
        ekAUGUST = 8
        ekDECEMBER = 12
        ekFEBRUARY = 2
        ekJANUARY = 1
        ekJULY = 7
        ekJUNE = 6
        ekMARCH = 3
        ekMAY = 5
        ekNOVEMBER = 11
        ekOCTOBER = 10
        ekSEPTEMBER = 9

    type
        file_type_t = integer
    const
        ekARCHIVE = 1
        ekDIRECTORY = 2
        ekOTHERFILE = 3

    type
        file_mode_t = integer
    const
        ekAPPEND = 3
        ekREAD = 1
        ekWRITE = 2

    type
        ferror_t = integer
    const
        ekFBIG = 9
        ekFBIGNAME = 4
        ekFEXISTS = 1
        ekFLOCK = 8
        ekFNOACCESS = 7
        ekFNOEMPTY = 6
        ekFNOFILE = 3
        ekFNOFILES = 5
        ekFNOPATH = 2
        ekFOK = 11
        ekFUNDEF = 10

    type
        perror_t = integer
    const
        ekPEXEC = 2
        ekPOK = 3
        ekPPIPE = 1

    type
        serror_t = integer
    const
        ekSNOHOST = 2
        ekSNONET = 1
        ekSOK = 6
        ekSSTREAM = 4
        ekSTIMEOUT = 3
        ekSUNDEF = 5

    type
        Date = cstruct
                        year: int16_t
                        month: byte_t
                        wday: byte_t
                        mday: byte_t
                        hour: byte_t
                        minute: byte_t
                        second: byte_t end
        Dir = cstruct end
        File = cstruct end
        Mutex = cstruct end
        Proc = cstruct end
        Thread = cstruct end
        Socket = cstruct end
        FPtr_thread_main = proc(data: *void): uint32_t
        _procopt_t = cstruct
                        unused: uint32_t end


    // from bmath.h
    proc bmath_cosf(angle: real32_t): real32_t
    proc bmath_cosd(angle: real64_t): real64_t
    proc bmath_sinf(angle: real32_t): real32_t
    proc bmath_sind(angle: real64_t): real64_t
    proc bmath_tanf(angle: real32_t): real32_t
    proc bmath_tand(angle: real64_t): real64_t
    proc bmath_acosf(cos: real32_t): real32_t
    proc bmath_acosd(cos: real64_t): real64_t
    proc bmath_asinf(sin: real32_t): real32_t
    proc bmath_asind(sin: real64_t): real64_t
    proc bmath_atan2f(y: real32_t; x: real32_t): real32_t
    proc bmath_atan2d(y: real64_t; x: real64_t): real64_t
    proc bmath_norm_anglef(a: real32_t): real32_t
    proc bmath_norm_angled(a: real64_t): real64_t
    proc bmath_sqrtf(value: real32_t): real32_t
    proc bmath_sqrtd(value: real64_t): real64_t
    proc bmath_isqrtf(value: real32_t): real32_t
    proc bmath_isqrtd(value: real64_t): real64_t
    proc bmath_logf(value: real32_t): real32_t
    proc bmath_logd(value: real64_t): real64_t
    proc bmath_log10f(value: real32_t): real32_t
    proc bmath_log10d(value: real64_t): real64_t
    proc bmath_expf(value: real32_t): real32_t
    proc bmath_expd(value: real64_t): real64_t
    proc bmath_powf(base: real32_t; exponent: real32_t): real32_t
    proc bmath_powd(base: real64_t; exponent: real64_t): real64_t
    proc bmath_absf(value: real32_t): real32_t
    proc bmath_absd(value: real64_t): real64_t
    proc bmath_maxf(value1: real32_t; value2: real32_t): real32_t
    proc bmath_maxd(value1: real64_t; value2: real64_t): real64_t
    proc bmath_minf(value1: real32_t; value2: real32_t): real32_t
    proc bmath_mind(value1: real64_t; value2: real64_t): real64_t
    proc bmath_clampf(value: real32_t; min: real32_t; max: real32_t): real32_t
    proc bmath_clampd(value: real64_t; min: real64_t; max: real64_t): real64_t
    proc bmath_modf(num: real32_t; den: real32_t): real32_t
    proc bmath_modd(num: real64_t; den: real64_t): real64_t
    proc bmath_modff(value: real32_t; intpart: *[]real32_t): real32_t
    proc bmath_modfd(value: real64_t; intpart: *[]real64_t): real64_t
    proc bmath_precf(value: real32_t): uint32_t
    proc bmath_precd(value: real64_t): uint32_t
    proc bmath_roundf(value: real32_t): real32_t
    proc bmath_roundd(value: real64_t): real64_t
    proc bmath_round_stepf(value: real32_t; step: real32_t): real32_t
    proc bmath_round_stepd(value: real64_t; step: real64_t): real64_t
    proc bmath_floorf(value: real32_t): real32_t
    proc bmath_floord(value: real64_t): real64_t
    proc bmath_ceilf(value: real32_t): real32_t
    proc bmath_ceild(value: real64_t): real64_t
    proc bmath_rand_seed(seed: uint32_t)
    proc bmath_randf(from: real32_t; to_: real32_t): real32_t
    proc bmath_randd(from: real64_t; to_: real64_t): real64_t
    proc bmath_randi(from: uint32_t; to_: uint32_t): uint32_t
    proc bmath_rand_env(seed: uint32_t): *REnv
    proc bmath_rand_destroy(env: *[]*REnv)
    proc bmath_rand_mtf(env: *REnv; from: real32_t; to_: real32_t): real32_t
    proc bmath_rand_mtd(env: *REnv; from: real64_t; to_: real64_t): real64_t
    proc bmath_rand_mti(env: *REnv; from: uint32_t; to_: uint32_t): uint32_t

    // from bmem.h
    proc bmem_aligned_malloc(size: uint32_t; align: uint32_t): *[]byte_t
    proc bmem_aligned_realloc(mem: *[]byte_t; size: uint32_t; new_size: uint32_t; align: uint32_t): *[]byte_t
    proc bmem_free(mem: *[]byte_t)
    proc bmem_set1(dest: *[]byte_t; size: uint32_t; mask: byte_t)
    proc bmem_set4(dest: *[]byte_t; size: uint32_t; mask: *[]byte_t)
    proc bmem_set8(dest: *[]byte_t; size: uint32_t; mask: *[]byte_t)
    proc bmem_set16(dest: *[]byte_t; size: uint32_t; mask: *[]byte_t)
    proc bmem_cmp(mem1: *[]byte_t; mem2: *[]byte_t; size: uint32_t): integer
    proc bmem_is_zero(mem: *[]byte_t; size: uint32_t): char_t
    proc bmem_set_zero(dest: *[]byte_t; size: uint32_t)
    proc bmem_copy(dest: *[]byte_t; src: *[]byte_t; size: uint32_t)
    proc bmem_move(dest: *[]byte_t; src: *[]byte_t; size: uint32_t)
    proc bmem_overlaps(mem1: *[]byte_t; mem2: *[]byte_t; size1: uint32_t; size2: uint32_t): char_t
    proc bmem_rev(mem: *[]byte_t; size: uint32_t)
    proc bmem_rev2(mem: *[]byte_t)
    proc bmem_rev4(mem: *[]byte_t)
    proc bmem_rev8(mem: *[]byte_t)
    proc bmem_rev_elems_imp(data: *[]byte_t; num_elems: uint32_t; elem_size: uint32_t)
    proc bmem_revcopy(dest: *[]byte_t; src: *[]byte_t; size: uint32_t)
    proc bmem_swap(mem1: *[]byte_t; mem2: *[]byte_t; size: uint32_t)
    proc bmem_shuffle(mem: *[]byte_t; size: uint32_t; esize: uint32_t)

    // from bstd.h
    proc bstd_sprintf(str: *[]char_t; size: uint32_t; format: *[]char_t): uint32_t [varargs]
    proc bstd_vsprintf(str: *[]char_t; size: uint32_t; format: *[]char_t; _4: *__va_elem): uint32_t
    proc bstd_printf(format: *[]char_t): uint32_t [varargs]
    proc bstd_eprintf(format: *[]char_t): uint32_t [varargs]
    proc bstd_writef(str: *[]char_t): uint32_t
    proc bstd_ewritef(str: *[]char_t): uint32_t
    proc bstd_read(data: *[]byte_t; size: uint32_t; rsize: *[]uint32_t): char_t
    proc bstd_write(data: *[]byte_t; size: uint32_t; wsize: *[]uint32_t): char_t
    proc bstd_ewrite(data: *[]byte_t; size: uint32_t; wsize: *[]uint32_t): char_t
    proc bstd_abort
    proc bstd_debug_break

    // from cassert.h
    proc cassert_set_func(data: *void; func_assert: FPtr_assert)
    proc cassert_imp(cond: bool_t; detail: *[]char_t; file: *[]char_t; line: uint32_t)
    proc cassert_fatal_imp(cond: bool_t; detail: *[]char_t; file: *[]char_t; line: uint32_t)
    proc cassert_no_null_imp(ptr: *void; detail: *[]char_t; file: *[]char_t; line: uint32_t)
    proc cassert_no_nullf_imp(ptr: proc; detail: *[]char_t; file: *[]char_t; line: uint32_t)
    proc cassert_default_imp(file: *[]char_t; line: uint32_t)

    // from config.hxx
    const
        PRIu64 = nil // CHECK "llu"
        PRId64 = nil // CHECK "lld"
        __MALLOC = nil // CHECK 
        __PURE = nil // CHECK 
        __CONST = nil // CHECK 
        __DEPRECATED = nil // CHECK 
        __SENTINEL = nil // CHECK 
        __TYPECHECK = nil // CHECK 
        DIR_SEPARATOR = '/'


    // from ptr.h
    proc ptr_dget_imp(dptr: *[]*void): *void
    proc ptr_dget_no_null_imp(dptr: *[]*void): *void
    proc ptr_destopt_imp(dptr: *[]*void; func_destroy: FPtr_destroy)
    proc ptr_copyopt_imp(ptr: *void; func_copy: FPtr_copy): *void

    // from sewer.hxx
    type
        unicode_t = (ekUTF8, ekUTF16, ekUTF32)
        REnv = cstruct end
        FPtr_destroy = proc(item: *[]*void)
        FPtr_copy = proc(item: *void): *void
        FPtr_scopy = proc(dest: *void; src: *void)
        FPtr_compare = proc(item1: *void; item2: *void): integer
        FPtr_compare_ex = proc(item1: *void; item2: *void; data: *void): integer
        FPtr_assert = proc(item: *void; group: uint32_t; caption: *[]char_t; detail: *[]char_t; file: *[]char_t; line: uint32_t)


    // from types.h
    proc min_u32(v1: uint32_t; v2: uint32_t): uint32_t
    proc min_r32(v1: real32_t; v2: real32_t): real32_t
    proc min_r64(v1: real64_t; v2: real64_t): real64_t
    proc max_u32(v1: uint32_t; v2: uint32_t): uint32_t
    proc max_r32(v1: real32_t; v2: real32_t): real32_t
    proc max_r64(v1: real64_t; v2: real64_t): real64_t
    proc abs_r32(v: real32_t): real32_t
    proc to_u8(v: uint32_t): byte_t

    // from types.hxx
    const
        REAL32_MAX = 1.e20
        REAL64_MAX = 1.e38
        REAL32_MIN = 1.e-20
        REAL64_MIN = 1.e-38
        FALSE_ = 0
        TRUE_ = 1

    type
        real32_t = real
        real64_t = longreal
        enum_t = (ekENUM_GENERIC_VALUE)
        char_t = int8_t
        byte_t = uint8_t
        bool_t = int8_t


    // from unicode.h
    proc unicode_convers(from_str: *[]bool_t; to_str: *[]bool_t; from: unicode_t; to_: unicode_t; osize: uint32_t): uint32_t
    proc unicode_convers_n(from_str: *[]bool_t; to_str: *[]bool_t; from: unicode_t; to_: unicode_t; isize: uint32_t; osize: uint32_t): uint32_t
    proc unicode_convers_nbytes(str: *[]bool_t; from: unicode_t; to_: unicode_t): uint32_t
    proc unicode_nbytes(str: *[]bool_t; format: unicode_t): uint32_t
    proc unicode_nchars(str: *[]bool_t; format: unicode_t): uint32_t
    proc unicode_to_u32(str: *[]bool_t; format: unicode_t): uint32_t
    proc unicode_to_u32b(str: *[]bool_t; format: unicode_t; bytes: *[]uint32_t): uint32_t
    proc unicode_to_char(codepoint: uint32_t; str: *[]bool_t; format: unicode_t): uint32_t
    proc unicode_valid_str(str: *[]bool_t; format: unicode_t): bool_t
    proc unicode_valid_str_n(str: *[]bool_t; size: uint32_t; format: unicode_t): bool_t
    proc unicode_valid(codepoint: uint32_t): bool_t
    proc unicode_next(str: *[]bool_t; format: unicode_t): *[]bool_t
    proc unicode_back(str: *[]bool_t; format: unicode_t): *[]bool_t
    proc unicode_isascii(codepoint: uint32_t): bool_t
    proc unicode_isalnum(codepoint: uint32_t): bool_t
    proc unicode_isalpha(codepoint: uint32_t): bool_t
    proc unicode_iscntrl(codepoint: uint32_t): bool_t
    proc unicode_isdigit(codepoint: uint32_t): bool_t
    proc unicode_isgraph(codepoint: uint32_t): bool_t
    proc unicode_isprint(codepoint: uint32_t): bool_t
    proc unicode_ispunct(codepoint: uint32_t): bool_t
    proc unicode_isspace(codepoint: uint32_t): bool_t
    proc unicode_isxdigit(codepoint: uint32_t): bool_t
    proc unicode_islower(codepoint: uint32_t): bool_t
    proc unicode_isupper(codepoint: uint32_t): bool_t
    proc unicode_tolower(codepoint: uint32_t): uint32_t
    proc unicode_toupper(codepoint: uint32_t): uint32_t

    // from stdarg.h
    const
        __GNUC_VA_LIST = 1

    type
        __va_elem = cstruct
                        gp_offset: uint32_t
                        fp_offset: uint32_t
                        overflow_arg_area: *void
                        reg_save_area: *void end
        va_list = carray 1 of __va_elem
        __gnuc_va_list = va_list


    // from stddef.h
    const
        NULL = 0

    type
        size_t = uint64_t
        ptrdiff_t = int64_t
        wchar_t = uint32_t
        max_align_t = int64_t


    // from stdint.h
    const
        INT8_MIN = -128
        INT16_MIN = -32767 - 1
        INT32_MIN = -2147483647 - 1
        INT64_MIN = nil // CHECK (-__INT64_C(9223372036854775807)-1)
        INT8_MAX = 127
        INT16_MAX = 32767
        INT32_MAX = 2147483647
        INT64_MAX = nil // CHECK (__INT64_C(9223372036854775807))
        UINT8_MAX = 255
        UINT16_MAX = 65535
        UINT32_MAX = 4294967295
        UINT64_MAX = 18446744073709551615

    type
        int8_t = char
        int16_t = shortint
        int32_t = integer
        int64_t = integer
        uint8_t = byte
        uint16_t = shortint
        uint32_t = integer
        uint64_t = integer
        intptr_t = int32_t
        uintptr_t = uint32_t
        intmax_t = int64_t
        uintmax_t = uint64_t

		// manually added
		const
			kCOLOR_TRANSPARENT = 0
			kCOLOR_DEFAULT = 0
			kCOLOR_BLACK = 0FF000000hi
			kCOLOR_WHITE = 0FFFFFFFFhi
			kCOLOR_RED = 0FF0000FFhi
			kCOLOR_GREEN = 0FF00FF00hi
			kCOLOR_BLUE = 0FFFF0000hi
			kCOLOR_YELLOW = 0FF00FFFFhi
			kCOLOR_CYAN = 0FFFFFF00hi
			kCOLOR_MAGENTA = 0FFFF00FFhi

    type
      FPtr_app_create = proc 
      FPtr_app_update = proc(app: *void; prtime: longreal; ctime: longreal)
      FPtr_task_main = proc(data: *void)
      FPtr_task_update = proc(data: *void)
      FPtr_task_end = proc(data: *void; rvalue: integer)
      
    proc osapp_finish()
    proc osapp_task_imp(data: *void; updtime: integer; func_task_main: FPtr_task_main; 
      func_task_update: FPtr_task_update; func_task_end: FPtr_task_end)
    proc osapp_menubar(menu: *Menu; window: *Window)
    proc osapp_open_url(url: *[]char)
    proc osmain_imp(argc: integer; argv: *[]*[]char; instance: *void; lframe: longreal; 
      func_create: FPtr_app_create; func_update: FPtr_app_update; func_destroy: FPtr_destroy; 
      options: *[]char)
end NAppGUI
