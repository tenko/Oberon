// Generated by C2OBX 2021-11-10 on 2022-01-05T13:47:45
// source was first generated using the following command:
// gcc -E -I../src/osbs -I../src/sewer -I../src/draw2d -I../src/geom2d -I../src/gui \
//     -I../src/osgui -I../src/core -I../todo -I../src/osapp -I../src/osgui/gtk3 -I../src/draw2d/gtk3 \
//     -DNAPPGUI_LIBRARY -DCMAKE_RELEASE -DNAPPGUI_BUILD_DIR -DNAPPGUI_SOURCE_DIR -D__GTK3__ \
//     -DNAPPGUI_BUILD draw2dall.h
// and then manually improved by Rochus Keller
// Original NAppGUI C API by Francisco Garcia Collado, MIT Licence

definition NAppDraw [extern 'C', dll 'NAppGUI']

		import C := NAppCore
		
    // from color.h

		type color_t = integer
		
		const
			kCOLOR_TRANSPARENT = 0
			kCOLOR_DEFAULT = 0
			kCOLOR_BLACK = 0FF000000hi
			kCOLOR_WHITE = 0FFFFFFFFhi
			kCOLOR_RED = 0FF0000FFhi
			kCOLOR_GREEN = 0FF00FF00hi
			kCOLOR_BLUE = 0FFFF0000hi
			kCOLOR_YELLOW = 0FF00FFFFhi
			kCOLOR_CYAN = 0FFFFFF00hi
			kCOLOR_MAGENTA = 0FFFF00FFhi

    proc color_rgb(r: byte; g: byte; b: byte): integer
    proc color_rgba(r: byte; g: byte; b: byte; a: byte): integer
    proc color_rgbaf(r: real; g: real; b: real; a: real): integer
    proc color_hsbf(hue: real; sat: real; bright: real): integer
    proc color_red(r: byte): integer
    proc color_green(g: byte): integer
    proc color_blue(b: byte): integer
    proc color_gray(l: byte): integer
    proc color_bgr(bgr: integer): integer
    proc color_html(html: *[]char): integer
    proc color_to_hsbf(color: integer; hue: *[]real; sat: *[]real; bright: *[]real)
    proc color_to_html(color: integer; html: *[]char; size: integer)
    proc color_get_rgb(color: integer; r: *[]byte; g: *[]byte; b: *[]byte)
    proc color_get_rgbf(color: integer; r: *[]real; g: *[]real; b: *[]real)
    proc color_get_rgba(color: integer; r: *[]byte; g: *[]byte; b: *[]byte; a: *[]byte)
    proc color_get_rgbaf(color: integer; r: *[]real; g: *[]real; b: *[]real; a: *[]real)
    proc color_get_alpha(color: integer): byte
    proc color_set_alpha(color: integer; alpha: byte): integer

    // from dctx.h
    proc dctx_bitmap(width: integer; height: integer; format: pixformat_t): *DCtx
    proc dctx_image(ctx: *[]*DCtx): *Image
    proc draw_clear(ctx: *DCtx; color: integer)
    proc draw_matrixf(ctx: *DCtx; t2d: *T2Df)
    proc draw_matrixd(ctx: *DCtx; t2d: *T2Dd)
    proc draw_matrix_cartesianf(ctx: *DCtx; t2d: *T2Df)
    proc draw_matrix_cartesiand(ctx: *DCtx; t2d: *T2Dd)
    proc draw_antialias(ctx: *DCtx; on: char)

    // from draw.h
    type
        linecap_t = (ekLCFLAT, ekLCSQUARE, ekLCROUND)
        linejoin_t = (ekLJMITER, ekLJROUND, ekLJBEVEL)
        fillwrap_t = (ekFCLAMP, ekFTILE, ekFFLIP)
        ellipsis_t = (ellipsis_t_invalid, ekELLIPNONE, ekELLIPBEGIN, ekELLIPMIDDLE, ekELLIPEND, ekELLIPMLINE )

    type
        align_t = integer
    const
        ekBOTTOM = 3
        ekCENTER = 2
        ekJUSTIFY = 4
        ekLEFT = 1
        ekRIGHT = 3
        ekTOP = 1

    proc draw_line(ctx: *DCtx; x0: real; y0: real; x1: real; y1: real)
    proc draw_polyline(ctx: *DCtx; closed: boolean; points: *[]V2Df; n: integer)
    proc draw_arc(ctx: *DCtx; x: real; y: real; radius: real; start: real; sweep: real)
    proc draw_bezier(ctx: *DCtx; x0: real; y0: real; x1: real; y1: real; x2: real; y2: real; x3: real; y3: real)
    proc draw_line_color(ctx: *DCtx; color: integer)
    proc draw_line_fill(ctx: *DCtx)
    proc draw_line_width(ctx: *DCtx; width: real)
    proc draw_line_cap(ctx: *DCtx; cap: linecap_t)
    proc draw_line_join(ctx: *DCtx; join: linejoin_t)
    proc draw_line_dash(ctx: *DCtx; pattern: *[]real; n: integer)
    proc draw_rect(ctx: *DCtx; op: drawop_t; x: real; y: real; width: real; height: real)
    proc draw_rndrect(ctx: *DCtx; op: drawop_t; x: real; y: real; width: real; height: real; radius: real)
    proc draw_circle(ctx: *DCtx; op: drawop_t; x: real; y: real; radius: real)
    proc draw_ellipse(ctx: *DCtx; op: drawop_t; x: real; y: real; radx: real; rady: real)
    proc draw_polygon(ctx: *DCtx; op: drawop_t; points: *[]V2Df; n: integer)
    proc draw_fill_color(ctx: *DCtx; color: integer)
    proc draw_fill_linear(ctx: *DCtx; color: *[]integer; stop: *[]real; n: integer; x0: real; y0: real; x1: real; y1: real)
    proc draw_fill_matrix(ctx: *DCtx; t2d: *T2Df)
    proc draw_fill_wrap(ctx: *DCtx; wrap: fillwrap_t)
    proc draw_font(ctx: *DCtx; font: *Font)
    proc draw_text_color(ctx: *DCtx; color: integer)
    proc draw_text(ctx: *DCtx; text: *[]char; x: real; y: real)
    proc draw_text_path(ctx: *DCtx; op: drawop_t; text: *[]char; x: real; y: real)
    proc draw_text_width(ctx: *DCtx; width: real)
    proc draw_text_trim(ctx: *DCtx; ellipsis: ellipsis_t)
    proc draw_text_align(ctx: *DCtx; halign: align_t; valign: align_t)
    proc draw_text_halign(ctx: *DCtx; halign: align_t)
    proc draw_text_extents(ctx: *DCtx; text: *[]char; refwidth: real; width: *[]real; height: *[]real)
    proc draw_image(ctx: *DCtx; image: *Image; x: real; y: real)
    proc draw_image_frame(ctx: *DCtx; image: *Image; frame: integer; x: real; y: real)
    proc draw_image_align(ctx: *DCtx; halign: align_t; valign: align_t)

    // from draw2d.h
    proc draw2d_start
    proc draw2d_finish

    // from draw2d.hxx
    type
        fstyle_t = integer
    const
        ekFBOLD = 1
        ekFITALIC = 2
        ekFNORMAL = 0
        ekFPIXELS = 0
        ekFPOINTS = 64
        ekFSTRIKEOUT = 4
        ekFSUBSCRIPT = 16
        ekFSUPSCRIPT = 32
        ekFUNDERLINE = 8

    type
        DCtx = cstruct end
        Palette = cstruct end
        Pixbuf = cstruct end
        Image = cstruct end
        Font = cstruct end

    //proc arrst_color_t_end
    //proc arrpt_Image_end

    // from drawg.h
    type
        drawop_t = ( drawop_t_invalid, ekSTROKE, ekFILL, ekSKFILL, ekFILLSK )

    proc draw_v2df(ctx: *DCtx; op: drawop_t; v2d: *V2Df; radius: real)
    proc draw_v2dd(ctx: *DCtx; op: drawop_t; v2d: *V2Dd; radius: longreal)
    proc draw_seg2df(ctx: *DCtx; seg: *Seg2Df)
    proc draw_seg2dd(ctx: *DCtx; seg: *Seg2Dd)
    proc draw_cir2df(ctx: *DCtx; op: drawop_t; cir: *Cir2Df)
    proc draw_cir2dd(ctx: *DCtx; op: drawop_t; cir: *Cir2Dd)
    proc draw_box2df(ctx: *DCtx; op: drawop_t; box: *Box2Df)
    proc draw_box2dd(ctx: *DCtx; op: drawop_t; box: *Box2Dd)
    proc draw_obb2df(ctx: *DCtx; op: drawop_t; obb: *OBB2Df)
    proc draw_obb2dd(ctx: *DCtx; op: drawop_t; obb: *OBB2Dd)
    proc draw_tri2df(ctx: *DCtx; op: drawop_t; tri: *Tri2Df)
    proc draw_tri2dd(ctx: *DCtx; op: drawop_t; tri: *Tri2Dd)
    proc draw_pol2df(ctx: *DCtx; op: drawop_t; pol: *Pol2Df)
    proc draw_pol2dd(ctx: *DCtx; op: drawop_t; pol: *Pol2Dd)

    // from font.h
    proc font_create(family: *[]char; size: real; style: integer): *Font
    proc font_system(size: real; style: integer): *Font
    proc font_monospace(size: real; style: integer): *Font
    proc font_with_style(font: *Font; style: integer): *Font
    proc font_copy(font: *Font): *Font
    proc font_destroy(font: *[]*Font)
    proc font_equals(font1: *Font; font2: *Font): char
    proc font_regular_size(): real
    proc font_small_size(): real
    proc font_mini_size(): real
    proc font_family(font: *Font): *[]char
    proc font_size(font: *Font): real
    proc font_height(font: *Font): real
    proc font_style(font: *Font): integer
    proc font_extents(font: *Font; text: *[]char; refwidth: real; width: *[]real; height: *[]real)
    proc font_exists_family(family: *[]char): char
    proc font_installed_families(): *[]C.String

    // from image.h
    type
        codec_t = ( codec_t_invalid, ekJPG, ekPNG, ekBMP, ekGIF )

    proc image_from_pixels(width: integer; height: integer; format: pixformat_t; data: *[]byte; palette: *[]integer; palsize: integer): *Image
    proc image_from_pixbuf(pixbuf: *Pixbuf; palette: *Palette): *Image
    proc image_from_file(pathname: *[]char; error: *[1]C.ferror_t): *Image
    proc image_from_data(data: *[]byte; size: integer): *Image
    proc image_from_resource(pack: *C.ResPack; id: C.ResId): *Image
    proc image_copy(image: *Image): *Image
    proc image_trim(image: *Image; x: integer; y: integer; width: integer; height: integer): *Image
    proc image_rotate(image: *Image; angle: real; nsize: char; background: integer; t2d: *T2Df): *Image
    proc image_scale(image: *Image; nwidth: integer; nheight: integer): *Image
    proc image_read(stm: *C.Stream): *Image
    proc image_to_file(image: *Image; pathname: *[]char; error: *[1]C.ferror_t): char
    proc image_write(stream: *C.Stream; image: *Image)
    proc image_destroy(image: *[]*Image)
    proc image_format(image: *Image): pixformat_t
    proc image_width(image: *Image): integer
    proc image_height(image: *Image): integer
    proc image_pixels(image: *Image; format: pixformat_t): *Pixbuf
    proc image_codec(image: *Image; codec: codec_t): char
    proc image_get_codec(image: *Image): codec_t
    proc image_num_frames(image: *Image): integer
    proc image_frame_length(image: *Image; findex: integer): real

    // from palette.h
    proc palette_create(size: integer): *Palette
    proc palette_cga2(mode: char; intense: char): *Palette
    proc palette_ega4(): *Palette
    proc palette_rgb8(): *Palette
    proc palette_gray1(): *Palette
    proc palette_gray2(): *Palette
    proc palette_gray4(): *Palette
    proc palette_gray8(): *Palette
    proc palette_binary(zero: integer; one: integer): *Palette
    proc palette_destroy(palette: *[]*Palette)
    proc palette_size(palette: *Palette): integer
    proc palette_colors(palette: *Palette): *[]integer
    proc palette_ccolors(palette: *Palette): *[]integer

    // from pixbuf.h
    type
        pixformat_t = (ekINDEX1, ekINDEX2, ekINDEX4, ekINDEX8, ekGRAY8, ekRGB24, ekRGBA32, ekFIMAGE)

    proc pixbuf_create(width: integer; height: integer; format: pixformat_t): *Pixbuf
    proc pixbuf_copy(pixbuf: *Pixbuf): *Pixbuf
    proc pixbuf_trim(pixbuf: *Pixbuf; x: integer; y: integer; width: integer; height: integer): *Pixbuf
    proc pixbuf_convert(pixbuf: *Pixbuf; palette: *Palette; oformat: pixformat_t): *Pixbuf
    proc pixbuf_destroy(pixbuf: *[]*Pixbuf)
    proc pixbuf_format(pixbuf: *Pixbuf): pixformat_t
    proc pixbuf_width(pixbuf: *Pixbuf): integer
    proc pixbuf_height(pixbuf: *Pixbuf): integer
    proc pixbuf_size(pixbuf: *Pixbuf): integer
    proc pixbuf_dsize(pixbuf: *Pixbuf): integer
    proc pixbuf_cdata(pixbuf: *Pixbuf): *[]byte
    proc pixbuf_data(pixbuf: *Pixbuf): *[]byte
    proc pixbuf_format_bpp(format: pixformat_t): integer
    proc pixbuf_get(pixbuf: *Pixbuf; x: integer; y: integer): integer
    proc pixbuf_set(pixbuf: *Pixbuf; x: integer; y: integer; value: integer)

    // from box2d.h
    type
        Box2Df = cstruct
                min: V2Df
                max: V2Df end
        Box2Dd = cstruct
                min: V2Dd
                max: V2Dd end

    proc box2df(minX: real; minY: real; maxX: real; maxY: real): Box2Df
    proc box2dd(minX: longreal; minY: longreal; maxX: longreal; maxY: longreal): Box2Dd
    proc box2d_from_pointsf(p: *V2Df; n: integer): Box2Df
    proc box2d_from_pointsd(p: *V2Dd; n: integer): Box2Dd
    proc box2d_centerf(box: *Box2Df): V2Df
    proc box2d_centerd(box: *Box2Dd): V2Dd
    proc box2d_addf(box: *Box2Df; p: *V2Df)
    proc box2d_addd(box: *Box2Dd; p: *V2Dd)
    proc box2d_addnf(box: *Box2Df; p: *V2Df; n: integer)
    proc box2d_addnd(box: *Box2Dd; p: *V2Dd; n: integer)
    proc box2d_add_circlef(box: *Box2Df; cir: *Cir2Df)
    proc box2d_add_circled(box: *Box2Dd; cir: *Cir2Dd)
    proc box2d_mergef(dest: *Box2Df; src: *Box2Df)
    proc box2d_merged(dest: *Box2Dd; src: *Box2Dd)
    proc box2d_segmentsf(box: *Box2Df; segs: *Seg2Df)
    proc box2d_segmentsd(box: *Box2Dd; segs: *Seg2Dd)
    proc box2d_areaf(box: *Box2Df): real
    proc box2d_aread(box: *Box2Dd): longreal
    proc box2d_is_nullf(box: *Box2Df): char
    proc box2d_is_nulld(box: *Box2Dd): char

    // from cir2d.h
    type
        Cir2Df = cstruct
                c: V2Df
                r: real end
        Cir2Dd = cstruct
                c: V2Dd
                r: longreal end

    proc cir2df(x: real; y: real; r: real): Cir2Df
    proc cir2dd(x: longreal; y: longreal; r: longreal): Cir2Dd
    proc cir2d_from_boxf(box: *Box2Df): Cir2Df
    proc cir2d_from_boxd(box: *Box2Dd): Cir2Dd
    proc cir2d_from_pointsf(p: *V2Df; n: integer): Cir2Df
    proc cir2d_from_pointsd(p: *V2Dd; n: integer): Cir2Dd
    proc cir2d_minimumf(p: *V2Df; n: integer): Cir2Df
    proc cir2d_minimumd(p: *V2Dd; n: integer): Cir2Dd
    proc cir2d_areaf(cir: *Cir2Df): real
    proc cir2d_aread(cir: *Cir2Dd): longreal
    proc cir2d_is_nullf(cir: *Cir2Df): char
    proc cir2d_is_nulld(cir: *Cir2Dd): char

    // from col2d.h
    proc col2d_point_pointf(pnt1: *V2Df; pnt2: *V2Df; tol: real; col: *Col2Df): char
    proc col2d_point_pointd(pnt1: *V2Dd; pnt2: *V2Dd; tol: longreal; col: *Col2Dd): char
    proc col2d_segment_pointf(seg: *Seg2Df; pnt: *V2Df; tol: real; col: *Col2Df): char
    proc col2d_segment_pointd(seg: *Seg2Dd; pnt: *V2Dd; tol: longreal; col: *Col2Dd): char
    proc col2d_segment_segmentf(seg1: *Seg2Df; seg2: *Seg2Df; col: *Col2Df): char
    proc col2d_segment_segmentd(seg1: *Seg2Dd; seg2: *Seg2Dd; col: *Col2Dd): char
    proc col2d_circle_pointf(cir: *Cir2Df; pnt: *V2Df; col: *Col2Df): char
    proc col2d_circle_pointd(cir: *Cir2Dd; pnt: *V2Dd; col: *Col2Dd): char
    proc col2d_circle_segmentf(cir: *Cir2Df; seg: *Seg2Df; col: *Col2Df): char
    proc col2d_circle_segmentd(cir: *Cir2Dd; seg: *Seg2Dd; col: *Col2Dd): char
    proc col2d_circle_circlef(cir1: *Cir2Df; cir2: *Cir2Df; col: *Col2Df): char
    proc col2d_circle_circled(cir1: *Cir2Dd; cir2: *Cir2Dd; col: *Col2Dd): char
    proc col2d_box_pointf(box: *Box2Df; pnt: *V2Df; col: *Col2Df): char
    proc col2d_box_pointd(box: *Box2Dd; pnt: *V2Dd; col: *Col2Dd): char
    proc col2d_box_segmentf(box: *Box2Df; seg: *Seg2Df; col: *Col2Df): char
    proc col2d_box_segmentd(box: *Box2Dd; seg: *Seg2Dd; col: *Col2Df): char
    proc col2d_box_circlef(box: *Box2Df; cir: *Cir2Df; col: *Col2Df): char
    proc col2d_box_circled(box: *Box2Dd; cir: *Cir2Dd; col: *Col2Dd): char
    proc col2d_box_boxf(box1: *Box2Df; box2: *Box2Df; col: *Col2Df): char
    proc col2d_box_boxd(box1: *Box2Dd; box2: *Box2Dd; col: *Col2Dd): char
    proc col2d_obb_pointf(obb: *OBB2Df; pnt: *V2Df; col: *Col2Df): char
    proc col2d_obb_pointd(obb: *OBB2Dd; pnt: *V2Dd; col: *Col2Dd): char
    proc col2d_obb_segmentf(obb: *OBB2Df; seg: *Seg2Df; col: *Col2Df): char
    proc col2d_obb_segmentd(obb: *OBB2Dd; seg: *Seg2Dd; col: *Col2Dd): char
    proc col2d_obb_circlef(obb: *OBB2Df; cir: *Cir2Df; col: *Col2Df): char
    proc col2d_obb_circled(obb: *OBB2Dd; cir: *Cir2Dd; col: *Col2Dd): char
    proc col2d_obb_boxf(obb: *OBB2Df; box: *Box2Df; col: *Col2Df): char
    proc col2d_obb_boxd(obb: *OBB2Dd; box: *Box2Dd; col: *Col2Dd): char
    proc col2d_obb_obbf(obb1: *OBB2Df; obb2: *OBB2Df; col: *Col2Df): char
    proc col2d_obb_obbd(obb1: *OBB2Dd; obb2: *OBB2Dd; col: *Col2Dd): char
    proc col2d_tri_pointf(tri: *Tri2Df; pnt: *V2Df; col: *Col2Df): char
    proc col2d_tri_pointd(tri: *Tri2Dd; pnt: *V2Dd; col: *Col2Dd): char
    proc col2d_tri_segmentf(tri: *Tri2Df; seg: *Seg2Df; col: *Col2Df): char
    proc col2d_tri_segmentd(tri: *Tri2Dd; seg: *Seg2Dd; col: *Col2Dd): char
    proc col2d_tri_circlef(tri: *Tri2Df; cir: *Cir2Df; col: *Col2Df): char
    proc col2d_tri_circled(tri: *Tri2Dd; cir: *Cir2Df; col: *Col2Df): char
    proc col2d_tri_boxf(tri: *Tri2Df; box: *Box2Df; col: *Col2Df): char
    proc col2d_tri_boxd(tri: *Tri2Dd; box: *Box2Df; col: *Col2Df): char
    proc col2d_tri_obbf(tri: *Tri2Df; obb: *OBB2Df; col: *Col2Df): char
    proc col2d_tri_obbd(tri: *Tri2Dd; obb: *OBB2Dd; col: *Col2Dd): char
    proc col2d_tri_trif(tri1: *Tri2Df; tri2: *Tri2Df; col: *Col2Df): char
    proc col2d_tri_trid(tri1: *Tri2Dd; tri2: *Tri2Dd; col: *Col2Dd): char
    proc col2d_poly_pointf(poly: *Pol2Df; pnt: *V2Df; col: *Col2Df): char
    proc col2d_poly_pointd(poly: *Pol2Dd; pnt: *V2Dd; col: *Col2Dd): char
    proc col2d_poly_segmentf(poly: *Pol2Df; seg: *Seg2Df; col: *Col2Df): char
    proc col2d_poly_segmentd(poly: *Pol2Dd; seg: *Seg2Dd; col: *Col2Dd): char
    proc col2d_poly_circlef(poly: *Pol2Df; cir: *Cir2Df; col: *Col2Df): char
    proc col2d_poly_circled(poly: *Pol2Dd; cir: *Cir2Dd; col: *Col2Dd): char
    proc col2d_poly_boxf(poly: *Pol2Df; box: *Box2Df; col: *Col2Df): char
    proc col2d_poly_boxd(poly: *Pol2Dd; box: *Box2Dd; col: *Col2Dd): char
    proc col2d_poly_obbf(poly: *Pol2Df; obb: *OBB2Df; col: *Col2Df): char
    proc col2d_poly_obbd(poly: *Pol2Dd; obb: *OBB2Dd; col: *Col2Dd): char
    proc col2d_poly_trif(poly: *Pol2Df; tri: *Tri2Df; col: *Col2Df): char
    proc col2d_poly_trid(poly: *Pol2Dd; tri: *Tri2Dd; col: *Col2Dd): char
    proc col2d_poly_polyf(poly1: *Pol2Df; poly2: *Pol2Df; col: *Col2Df): char
    proc col2d_poly_polyd(poly1: *Pol2Dd; poly2: *Pol2Dd; col: *Col2Dd): char
    proc col2d_point_line_projf(lx0: real; ly0: real; lx1: real; ly1: real; x: real; y: real; px: *[]real; py: *[]real)
    proc col2d_point_line_projd(lx0: longreal; ly0: longreal; lx1: longreal; ly1: longreal; x: longreal; y: longreal; px: *[]longreal; py: *[]longreal)
    proc col2d_line_linef(l0x0: real; l0y0: real; l0x1: real; l0y1: real; l1x0: real; l1y0: real; l1x1: real; l1y1: real; tol: real; cx: *[]real; cy: *[]real): char
    proc col2d_line_lined(l0x0: longreal; l0y0: longreal; l0x1: longreal; l0y1: longreal; l1x0: longreal; l1y0: longreal; l1x1: longreal; l1y1: longreal; tol: longreal; cx: *[]longreal; cy: *[]longreal): char
    proc col2d_aabb_aabb_distf(minx0: real; miny0: real; maxx0: real; maxy0: real; minx1: real; miny1: real; maxx1: real; maxy1: real): real
    proc col2d_aabb_aabb_distd(minx0: longreal; miny0: longreal; maxx0: longreal; maxy0: longreal; minx1: longreal; miny1: longreal; maxx1: longreal; maxy1: longreal): longreal
    // TODO proc col2d_aabb_point_distf(minx: real; miny: real; maxx: real; maxy: real; x: real; y: real): real
    // TODO proc col2d_aabb_point_distd(minx: longreal; miny: longreal; maxx: longreal; maxy: longreal; x: longreal; y: longreal): longreal
    proc col2d_line_point_distf(x0: real; y0: real; x1: real; y1: real; x: real; y: real): real
    proc col2d_line_point_distd(x0: longreal; y0: longreal; x1: longreal; y1: longreal; x: longreal; y: longreal): longreal

    // from geom2d.hxx
    type
        OBB2Df = cstruct end
        OBB2Dd = cstruct end
        Pol2Df = cstruct end
        Pol2Dd = cstruct end
        T2Df = cstruct
                i: V2Df
                j: V2Df
                p: V2Df end
        T2Dd = cstruct
                i: V2Dd
                j: V2Dd
                p: V2Dd end
        Seg2Df = cstruct
                p0: V2Df
                p1: V2Df end
        Seg2Dd = cstruct
                p0: V2Dd
                p1: V2Dd end
        Tri2Df = cstruct
                p0: V2Df
                p1: V2Df
                p2: V2Df end
        Tri2Dd = cstruct
                p0: V2Dd
                p1: V2Dd
                p2: V2Dd end
        Col2Df = cstruct
                p: V2Df
                n: V2Df
                d: real end
        Col2Dd = cstruct
                p: V2Dd
                n: V2Dd
                d: longreal end

	(*
    proc arrst_V2Df_end
    proc arrst_V2Dd_end
    proc arrst_S2Df_end
    proc arrst_S2Dd_end
    proc arrst_R2Df_end
    proc arrst_R2Dd_end
    proc arrst_T2Df_end
    proc arrst_T2Dd_end
    proc arrst_Seg2Df_end
    proc arrst_Seg2Dd_end
    proc arrst_Cir2Df_end
    proc arrst_Cir2Dd_end
    proc arrst_Box2Df_end
    proc arrst_Box2Dd_end
    proc arrst_Tri2Df_end
    proc arrst_Tri2Dd_end
    proc arrpt_Pol2Df_end
    proc arrpt_Pol2Dd_end
    proc arrst_Col2Df_end
    proc arrst_Col2Dd_end
    *)

    // from obb2d.h
    proc obb2d_createf(center: *V2Df; width: real; height: real; angle: real): *OBB2Df
    proc obb2d_created(center: *V2Dd; width: longreal; height: longreal; angle: longreal): *OBB2Dd
    proc obb2d_from_linef(p0: *V2Df; p1: *V2Df; thickness: real): *OBB2Df
    proc obb2d_from_lined(p0: *V2Dd; p1: *V2Dd; thickness: longreal): *OBB2Dd
    proc obb2d_from_pointsf(p: *V2Df; n: integer): *OBB2Df
    proc obb2d_from_pointsd(p: *V2Dd; n: integer): *OBB2Dd
    proc obb2d_copyf(obb: *OBB2Df): *OBB2Df
    proc obb2d_copyd(obb: *OBB2Dd): *OBB2Dd
    proc obb2d_destroyf(obb: *[]*OBB2Df)
    proc obb2d_destroyd(obb: *[]*OBB2Dd)
    proc obb2d_updatef(obb: *OBB2Df; center: *V2Df; width: real; height: real; angle: real)
    proc obb2d_updated(obb: *OBB2Dd; center: *V2Dd; width: longreal; height: longreal; angle: longreal)
    proc obb2d_movef(obb: *OBB2Df; offset_x: real; offset_y: real)
    proc obb2d_moved(obb: *OBB2Dd; offset_x: longreal; offset_y: longreal)
    proc obb2d_transformf(obb: *OBB2Df; t2d: *T2Df)
    proc obb2d_transformd(obb: *OBB2Dd; t2d: *T2Dd)
    proc obb2d_cornersf(obb: *OBB2Df): *V2Df
    proc obb2d_cornersd(obb: *OBB2Dd): *V2Dd
    proc obb2d_centerf(obb: *OBB2Df): V2Df
    proc obb2d_centerd(obb: *OBB2Dd): V2Dd
    proc obb2d_widthf(obb: *OBB2Df): real
    proc obb2d_widthd(obb: *OBB2Dd): longreal
    proc obb2d_heightf(obb: *OBB2Df): real
    proc obb2d_heightd(obb: *OBB2Dd): longreal
    proc obb2d_anglef(obb: *OBB2Df): real
    proc obb2d_angled(obb: *OBB2Dd): longreal
    proc obb2d_areaf(obb: *OBB2Df): real
    proc obb2d_aread(obb: *OBB2Dd): longreal
    proc obb2d_boxf(obb: *OBB2Df): Box2Df
    proc obb2d_boxd(obb: *OBB2Dd): Box2Dd

    // from pol2d.h
    proc pol2d_createf(points: *V2Df; n: integer): *Pol2Df
    proc pol2d_created(points: *V2Dd; n: integer): *Pol2Dd
    proc pol2d_convex_hullf(points: *V2Df; n: integer): *Pol2Df
    proc pol2d_convex_hulld(points: *V2Dd; n: integer): *Pol2Dd
    proc pol2d_copyf(pol: *Pol2Df): *Pol2Df
    proc pol2d_copyd(pol: *Pol2Dd): *Pol2Dd
    proc pol2d_destroyf(pol: *[]*Pol2Df)
    proc pol2d_destroyd(pol: *[]*Pol2Dd)
    proc pol2d_transformf(pol: *Pol2Df; t2d: *T2Df)
    proc pol2d_transformd(pol: *Pol2Dd; t2d: *T2Dd)
    proc pol2d_pointsf(pol: *Pol2Df): *V2Df
    proc pol2d_pointsd(pol: *Pol2Dd): *V2Dd
    proc pol2d_nf(pol: *Pol2Df): integer
    proc pol2d_nd(pol: *Pol2Dd): integer
    proc pol2d_areaf(pol: *Pol2Df): real
    proc pol2d_aread(pol: *Pol2Dd): longreal
    proc pol2d_boxf(pol: *Pol2Df): Box2Df
    proc pol2d_boxd(pol: *Pol2Dd): Box2Dd
    proc pol2d_ccwf(pol: *Pol2Df): char
    proc pol2d_ccwd(pol: *Pol2Dd): char
    proc pol2d_convexf(pol: *Pol2Df): char
    proc pol2d_convexd(pol: *Pol2Dd): char
    proc pol2d_centroidf(pol: *Pol2Df): V2Df
    proc pol2d_centroidd(pol: *Pol2Dd): V2Dd
    proc pol2d_visual_centerf(pol: *Pol2Df; norm_tol: real): V2Df
    proc pol2d_visual_centerd(pol: *Pol2Dd; norm_tol: longreal): V2Dd
    proc pol2d_trianglesf(pol: *Pol2Df): *[]Tri2Df
    proc pol2d_trianglesd(pol: *Pol2Dd): *[]Tri2Dd
    proc pol2d_convex_partitionf(pol: *Pol2Df): *[]Pol2Df
    proc pol2d_convex_partitiond(pol: *Pol2Dd): *[]Pol2Dd

    // from r2d.h
    type
        R2Df = cstruct
                pos: V2Df
                size: S2Df end
        R2Dd = cstruct
                pos: V2Dd
                size: S2Dd end

    proc r2df(x: real; y: real; width: real; height: real): R2Df
    proc r2dd(x: longreal; y: longreal; width: longreal; height: longreal): R2Dd
    proc r2d_centerf(r2d: *R2Df): V2Df
    proc r2d_centerd(r2d: *R2Dd): V2Dd
    proc r2d_collidef(r2d1: *R2Df; r2d2: *R2Df): char
    proc r2d_collided(r2d1: *R2Dd; r2d2: *R2Dd): char
    proc r2d_containsf(r2d: *R2Df; x: real; y: real): char
    proc r2d_containsd(r2d: *R2Dd; x: longreal; y: longreal): char
    proc r2d_clipf(viewport: *R2Df; r2d: *R2Df): char
    proc r2d_clipd(viewport: *R2Dd; r2d: *R2Dd): char
    proc r2d_joinf(r2d: *R2Df; src: *R2Df)
    proc r2d_joind(r2d: *R2Dd; src: *R2Dd)

    // from s2d.h
    type
        S2Df = cstruct
                width: real
                height: real end
        S2Dd = cstruct
                width: longreal
                height: longreal end

    proc s2df(width: real; height: real): S2Df
    proc s2di(width: integer; height: integer): S2Df
    proc s2dd(width: longreal; height: longreal): S2Dd

    // from seg2d.h
    proc seg2df(x0: real; y0: real; x1: real; y1: real): Seg2Df
    proc seg2dd(x0: longreal; y0: longreal; x1: longreal; y1: longreal): Seg2Dd
    proc seg2d_vf(p0: *V2Df; p1: *V2Df): Seg2Df
    proc seg2d_vd(p0: *V2Dd; p1: *V2Dd): Seg2Dd
    proc seg2d_lengthf(seg: *Seg2Df): real
    proc seg2d_lengthd(seg: *Seg2Dd): longreal
    proc seg2d_sqlengthf(seg: *Seg2Df): real
    proc seg2d_sqlengthd(seg: *Seg2Dd): longreal
    proc seg2d_evalf(seg: *Seg2Df; t: real): V2Df
    proc seg2d_evald(seg: *Seg2Dd; t: longreal): V2Dd
    proc seg2d_close_paramf(seg: *Seg2Df; pnt: *V2Df): real
    proc seg2d_close_paramd(seg: *Seg2Dd; pnt: *V2Dd): longreal
    proc seg2d_point_sqdistf(seg: *Seg2Df; pnt: *V2Df; t: *[]real): real
    proc seg2d_point_sqdistd(seg: *Seg2Dd; pnt: *V2Dd; t: *[]longreal): longreal
    proc seg2d_sqdistf(seg1: *Seg2Df; seg2: *Seg2Df; t1: *[]real; t2: *[]real): real
    proc seg2d_sqdistd(seg1: *Seg2Dd; seg2: *Seg2Dd; t1: *[]longreal; t2: *[]longreal): longreal

    // from t2d.h
    proc t2d_movef(dest: *T2Df; src: *T2Df; x: real; y: real)
    proc t2d_moved(dest: *T2Dd; src: *T2Dd; x: longreal; y: longreal)
    proc t2d_rotatef(dest: *T2Df; src: *T2Df; angle: real)
    proc t2d_rotated(dest: *T2Dd; src: *T2Dd; angle: longreal)
    proc t2d_scalef(dest: *T2Df; src: *T2Df; sx: real; sy: real)
    proc t2d_scaled(dest: *T2Dd; src: *T2Dd; sx: longreal; sy: longreal)
    proc t2d_invfastf(dest: *T2Df; src: *T2Df)
    proc t2d_invfastd(dest: *T2Dd; src: *T2Dd)
    proc t2d_inversef(dest: *T2Df; src: *T2Df)
    proc t2d_inversed(dest: *T2Dd; src: *T2Dd)
    proc t2d_multf(dest: *T2Df; src1: *T2Df; src2: *T2Df)
    proc t2d_multd(dest: *T2Dd; src1: *T2Dd; src2: *T2Dd)
    proc t2d_vmultf(dest: *V2Df; t2d: *T2Df; src: *V2Df)
    proc t2d_vmultd(dest: *V2Dd; t2d: *T2Dd; src: *V2Dd)
    proc t2d_vmultnf(dest: *V2Df; t2d: *T2Df; src: *V2Df; n: integer)
    proc t2d_vmultnd(dest: *V2Dd; t2d: *T2Dd; src: *V2Dd; n: integer)
    proc t2d_decomposef(t2d: *T2Df; pos: *V2Df; angle: *[]real; sc: *V2Df)
    proc t2d_decomposed(t2d: *T2Dd; pos: *V2Dd; angle: *[]longreal; sc: *V2Dd)
    proc t2d_to32(dest: *T2Df; src: *T2Dd)
    proc t2d_to64(dest: *T2Dd; src: *T2Df)

    // from tri2d.h
    proc tri2df(x0: real; y0: real; x1: real; y1: real; x2: real; y2: real): Tri2Df
    proc tri2dd(x0: longreal; y0: longreal; x1: longreal; y1: longreal; x2: longreal; y2: longreal): Tri2Dd
    proc tri2d_vf(p0: *V2Df; p1: *V2Df; p2: *V2Df): Tri2Df
    proc tri2d_vd(p0: *V2Dd; p1: *V2Dd; p2: *V2Dd): Tri2Dd
    proc tri2d_transformf(tri: *Tri2Df; t2d: *T2Df)
    proc tri2d_transformd(tri: *Tri2Dd; t2d: *T2Dd)
    proc tri2d_areaf(tri: *Tri2Df): real
    proc tri2d_aread(tri: *Tri2Dd): longreal
    proc tri2d_ccwf(tri: *Tri2Df): char
    proc tri2d_ccwd(tri: *Tri2Dd): char
    proc tri2d_centroidf(tri: *Tri2Df): V2Df
    proc tri2d_centroidd(tri: *Tri2Dd): V2Dd

    // from v2d.h
    type
        V2Df = cstruct
                x: real
                y: real end
        V2Dd = cstruct
                x: longreal
                y: longreal end

    proc v2df(x: real; y: real): V2Df
    proc v2dd(x: longreal; y: longreal): V2Dd
    proc v2d_tof(v: *V2Dd): V2Df
    proc v2d_tod(v: *V2Df): V2Dd
    proc v2d_tofn(vf: *V2Df; vd: *V2Dd; n: integer)
    proc v2d_todn(vd: *V2Dd; vf: *V2Df; n: integer)
    proc v2d_addf(v1: *V2Df; v2: *V2Df): V2Df
    proc v2d_addd(v1: *V2Dd; v2: *V2Dd): V2Dd
    proc v2d_subf(v1: *V2Df; v2: *V2Df): V2Df
    proc v2d_subd(v1: *V2Dd; v2: *V2Dd): V2Dd
    proc v2d_mulf(v: *V2Df; s: real): V2Df
    proc v2d_muld(v: *V2Dd; s: longreal): V2Dd
    proc v2d_fromf(v: *V2Df; dir: *V2Df; length: real): V2Df
    proc v2d_fromd(v: *V2Dd; dir: *V2Dd; length: longreal): V2Dd
    proc v2d_midf(v1: *V2Df; v2: *V2Df): V2Df
    proc v2d_midd(v1: *V2Dd; v2: *V2Dd): V2Dd
    proc v2d_unitf(v1: *V2Df; v2: *V2Df; dist: *[]real): V2Df
    proc v2d_unitd(v1: *V2Dd; v2: *V2Dd; dist: *[]longreal): V2Dd
    proc v2d_unit_xyf(x1: real; y1: real; x2: real; y2: real; dist: *[]real): V2Df
    proc v2d_unit_xyd(x1: longreal; y1: longreal; x2: longreal; y2: longreal; dist: *[]longreal): V2Dd
    proc v2d_perp_posf(v: *V2Df): V2Df
    proc v2d_perp_posd(v: *V2Dd): V2Dd
    proc v2d_perp_negf(v: *V2Df): V2Df
    proc v2d_perp_negd(v: *V2Dd): V2Dd
    proc v2d_from_anglef(a: real): V2Df
    proc v2d_from_angled(a: longreal): V2Dd
    proc v2d_normf(v: *V2Df): char
    proc v2d_normd(v: *V2Dd): char
    proc v2d_lengthf(v: *V2Df): real
    proc v2d_lengthd(v: *V2Dd): longreal
    proc v2d_sqlengthf(v: *V2Df): real
    proc v2d_sqlengthd(v: *V2Dd): longreal
    proc v2d_dotf(v1: *V2Df; v2: *V2Df): real
    proc v2d_dotd(v1: *V2Dd; v2: *V2Dd): longreal
    proc v2d_distf(v1: *V2Df; v2: *V2Df): real
    proc v2d_distd(v1: *V2Dd; v2: *V2Dd): longreal
    proc v2d_sqdistf(v1: *V2Df; v2: *V2Df): real
    proc v2d_sqdistd(v1: *V2Dd; v2: *V2Dd): longreal
    proc v2d_anglef(v1: *V2Df; v2: *V2Df): real
    proc v2d_angled(v1: *V2Dd; v2: *V2Dd): longreal
    proc v2d_rotatef(v: *V2Df; a: real)
    proc v2d_rotated(v: *V2Dd; a: longreal)

end NAppDraw
