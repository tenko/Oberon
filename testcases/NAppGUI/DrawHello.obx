// Original Hello C app by Francisco Garcia Collado, MIT Licence
// Translated to Oberon+ by Rochus Keller

module DrawHello
  import D := NAppDraw, C := NAppCore, G := NAppWidgets, U := Utf8
  var
	  window: cpointer to G.Window
    view: cpointer to G.View
    label: cpointer to G.Label
    slider: cpointer to G.Cell
    option: integer
    gradient: real
    kT2D_IDENTf: D.T2Df
    
	proc i_draw_lines(ctx: cpointer to D.DCtx)
	var
		poly1, poly2, poly3: carray 6 of D.V2Df
		pattern1: carray 4 of real
		pattern2, pattern3, pattern4: carray 2 of real
	begin
		poly1[0].x := 10; poly1[0].y := 190
		poly1[1].x := 90; poly1[1].y := 110
		poly1[2].x := 110; poly1[2].y := 190
		poly1[3].x := 190; poly1[3].y := 110
		poly1[4].x := 210; poly1[4].y := 190
		poly1[5].x := 290; poly1[5].y := 110
		
		poly2[0].x := 310; poly2[0].y := 190
		poly2[1].x := 390; poly2[1].y := 110
		poly2[2].x := 410; poly2[2].y := 190
		poly2[3].x := 490; poly2[3].y := 110
		poly2[4].x := 510; poly2[4].y := 190
		poly2[5].x := 590; poly2[5].y := 110

		poly3[0].x := 10; poly3[0].y := 290
		poly3[1].x := 90; poly3[1].y := 210
		poly3[2].x := 110; poly3[2].y := 290
		poly3[3].x := 190; poly3[3].y := 210
		poly3[4].x := 210; poly3[4].y := 290
		poly3[5].x := 290; poly3[5].y := 210

		pattern1[0] := 5; pattern1[1] := 5; pattern1[2] := 10; pattern1[3] := 5
		pattern2[0] := 1; pattern2[1] := 1
		pattern3[0] := 2; pattern3[1] := 1
		pattern4[0] := 1; pattern4[2] := 1

    // Line widths 
    D.draw_line_color(ctx, D.kCOLOR_BLACK)
    D.draw_line_width(ctx, 5)
    D.draw_line(ctx, 10, 90, 90, 10)
    D.draw_line_width(ctx, 10)
    D.draw_line(ctx, 110, 90, 190, 10)
    D.draw_line_width(ctx, 15)
    D.draw_line(ctx, 210, 90, 290, 10)

    // Line caps
    D.draw_line_cap(ctx, D.ekLCFLAT)
    D.draw_line(ctx, 310, 90, 390, 10)
    D.draw_line_cap(ctx, D.ekLCSQUARE)
    D.draw_line(ctx, 410, 90, 490, 10)
    D.draw_line_cap(ctx, D.ekLCROUND)
    D.draw_line(ctx, 510, 90, 590, 10)

    // Line joins
    D.draw_line_width(ctx, 15)
    D.draw_line_cap(ctx, D.ekLCFLAT)
    D.draw_line_join(ctx, D.ekLJMITER)
    D.draw_polyline(ctx, false, poly1, 6)
    D.draw_line_cap(ctx, D.ekLCSQUARE)
    D.draw_line_join(ctx, D.ekLJROUND)
    D.draw_polyline(ctx, false, poly2, 6)
    D.draw_line_cap(ctx, D.ekLCROUND)
    D.draw_line_join(ctx, D.ekLJBEVEL)
    D.draw_polyline(ctx, false, poly3, 6)

    // Line colors 
    D.draw_line_width(ctx, 10)
    D.draw_line_cap(ctx, D.ekLCFLAT)
    D.draw_line_color(ctx, D.kCOLOR_RED)
    D.draw_line(ctx, 310, 215, 590, 215)
    D.draw_line_color(ctx, D.kCOLOR_GREEN)
    D.draw_line(ctx, 310, 235, 590, 235)
    D.draw_line_color(ctx, D.kCOLOR_BLUE)
    D.draw_line(ctx, 310, 255, 590, 255)
    D.draw_line_width(ctx, 5)
    D.draw_line_color(ctx, D.kCOLOR_YELLOW)
    D.draw_line(ctx, 310, 270, 590, 270)
    D.draw_line_color(ctx, D.kCOLOR_CYAN)
    D.draw_line(ctx, 310, 280, 590, 280)
    D.draw_line_color(ctx, D.kCOLOR_MAGENTA)
    D.draw_line(ctx, 310, 290, 590, 290)

    // Line patterns 
    D.draw_line_color(ctx, D.kCOLOR_BLACK)
    D.draw_line_width(ctx, 5)
    D.draw_line_cap(ctx, D.ekLCFLAT)
    D.draw_line_dash(ctx, pattern1, 4)
    D.draw_line(ctx, 10, 310, 590, 310)
    D.draw_line_dash(ctx, pattern2, 2)
    D.draw_line(ctx, 10, 330, 590, 330)
    D.draw_line_dash(ctx, pattern3, 2)
    D.draw_line(ctx, 10, 350, 590, 350)
    D.draw_line_dash(ctx, pattern4, 2)
    D.draw_line_width(ctx, 2)
    D.draw_line(ctx, 10, 365, 590, 365)
    D.draw_line_dash(ctx, pattern1, 4)
    D.draw_line_width(ctx, 1)
    D.draw_line(ctx, 10, 375, 590, 375)
    D.draw_line_dash(ctx, nil, 0)
    D.draw_line(ctx, 10, 385, 590, 385)

    // Thin lines in centers
    D.draw_line_dash(ctx, nil, 0)
    D.draw_line_color(ctx, D.color_rgb(255, 255, 255))
    D.draw_line_width(ctx, 1)
    D.draw_line(ctx, 10, 90, 90, 10)
    D.draw_line(ctx, 110, 90, 190, 10)
    D.draw_line(ctx, 210, 90, 290, 10)
    D.draw_line(ctx, 310, 90, 390, 10)
    D.draw_line(ctx, 410, 90, 490, 10)
    D.draw_line(ctx, 510, 90, 590, 10)
    D.draw_polyline(ctx, false, poly1, 6)
    D.draw_polyline(ctx, false, poly2, 6)
    D.draw_polyline(ctx, false, poly3, 6)
	end i_draw_lines

	proc i_draw_shapes_row(ctx: cpointer to D.DCtx; op:  D.drawop_t; origin: cpointer to D.T2Df)
	var
		poly: carray 5 of D.V2Df
		matrix: D.T2Df
	begin
		poly[0].x := 40; poly[0].y := 0
		poly[1].x := 12.36; poly[1].y := 38.04
		poly[2].x := -32.36; poly[2].y := 23.52
		poly[3].x := -32.36; poly[3].y := -23.52
		poly[4].x := 12.36; poly[4].y := -38.04
		
    D.draw_rect(ctx, op, 10, 10, 110, 75)
    D.draw_rndrect(ctx, op, 140, 10, 110, 75, 20)
    D.draw_circle(ctx, op, 312, 50, 40)
    D.draw_ellipse(ctx, op, 430, 50, 55, 37)
    D.t2d_movef(matrix, origin, 547, 50)
    D.t2d_rotatef(matrix, matrix, - C.kBMATH_PIf / 10.0)
    D.draw_matrixf(ctx, matrix)
    D.draw_polygon(ctx, op, poly, 5)
  end i_draw_shapes_row
  
  proc i_draw_shapes(ctx: cpointer to D.DCtx; grad: boolean)
	var
		origin: D.T2Df
	begin
		origin := kT2D_IDENTf

    D.draw_line_color(ctx, D.kCOLOR_BLACK)
    D.draw_line_width(ctx, 10)
    D.draw_matrixf(ctx, origin)
    if grad then
	    i_draw_shapes_row(ctx, D.ekSKFILL, origin)
	  else
	    i_draw_shapes_row(ctx, D.ekSTROKE, origin)
    end
    D.t2d_movef(origin, origin, 0, 100)
    D.draw_matrixf(ctx, origin)
    if grad then
	    i_draw_shapes_row(ctx, D.ekSKFILL, origin)
	  else
	    i_draw_shapes_row(ctx, D.ekFILL, origin)
	  end
    D.t2d_movef(origin, origin, 0, 100)
    D.draw_matrixf(ctx, origin)
    if grad then
	    i_draw_shapes_row(ctx, D.ekSKFILL, origin)
	  else
	    i_draw_shapes_row(ctx, D.ekSKFILL, origin)
	  end
    D.t2d_movef(origin, origin, 0, 100)
    D.draw_matrixf(ctx, origin)
    if grad then
	    i_draw_shapes_row(ctx, D.ekSKFILL, origin)
	  else
	    i_draw_shapes_row(ctx, D.ekFILLSK, origin)
	  end
	end i_draw_shapes

	proc i_draw_gradient(ctx: cpointer to D.DCtx; gradient: real; back, shapes: boolean )
	var c : carray 2 of D.color_t
		gpos, gx, gy: real
		stop: carray 2 of real
	begin
    stop[0] := 0
    stop[1] := 1
    c[0] := D.kCOLOR_RED
    c[1] := D.kCOLOR_BLUE

    gpos := gradient * (600 + 400)

    if gpos < 400 then
        gx := 600
        gy := gpos
    else
        gx := 600 - (gpos - 400)
        gy := 400
    end

    D.draw_fill_linear(ctx, c, stop, 2, 0, 0, gx, gy)
    
    if back then
	    D.draw_rect(ctx, D.ekFILL, 0, 0, 600, 400)
    end

    if shapes then
	    i_draw_shapes(ctx, true)
	  end

    D.draw_matrixf(ctx, kT2D_IDENTf)
    D.draw_line_width(ctx, 3)
    D.draw_line_color(ctx, D.color_rgb(200, 200, 200))
    D.draw_line(ctx, 3, 3, gx + 3, gy + 3)
  end i_draw_gradient

	proc i_draw_lines_gradient(ctx: cpointer to D.DCtx; gradient: real)
	var
		c : carray 2 of D.color_t
		gpos, gx, gy: real
		stop: carray 2 of real
		pattern1: carray 4 of real
		pattern2, pattern3, pattern4: carray 2 of real
	begin
		stop[0] := 0; stop[1] := 1
		pattern1[0] := 5; pattern1[1] := 5; pattern1[2] := 10; pattern1[3] := 5
		pattern2[0] := 1; pattern2[1] := 1
		pattern3[0] := 2; pattern3[1] := 1
		pattern4[0] := 1; pattern4[2] := 2

    c[0] := D.kCOLOR_RED
    c[1] := D.kCOLOR_BLUE

    gpos := gradient * (600 + 400)

    if gpos < 400 then
        gx := 600
        gy := gpos
    else
        gx := 600 - (gpos - 400)
        gy := 400
    end

    D.draw_line_width(ctx, 10)
    D.draw_line_fill(ctx)
    D.draw_fill_linear(ctx, c, stop, 2, 0, 0, gx, gy)
    i_draw_shapes_row(ctx, D.ekSTROKE, kT2D_IDENTf)

    D.draw_matrixf(ctx, kT2D_IDENTf)
    D.draw_line_width(ctx, 1)
    D.draw_bezier(ctx, 30, 190, 140, 50, 440, 110, 570, 190)
    D.draw_line_width(ctx, 4)
    D.draw_bezier(ctx, 30, 210, 140, 70, 440, 130, 570, 210)
    D.draw_line_width(ctx, 7)
    D.draw_bezier(ctx, 30, 230, 140, 90, 440, 150, 570, 230)
    D.draw_line_width(ctx, 10)
    D.draw_bezier(ctx, 30, 250, 140, 110, 440, 170, 570, 250)

    D.draw_line_width(ctx, 8)
    D.draw_arc(ctx, 100, 280, 60, 0, - C.kBMATH_PIf / 2)
    D.draw_arc(ctx, 250, 280, 60, C.kBMATH_PIf, C.kBMATH_PIf / 2)
    D.draw_arc(ctx, 300, 220, 60, C.kBMATH_PIf / 2, - C.kBMATH_PIf / 2)
    D.draw_arc(ctx, 450, 220, 60, C.kBMATH_PIf / 2, C.kBMATH_PIf / 2)

    D.draw_line_width(ctx, 5);
    D.draw_line_cap(ctx, D.ekLCFLAT);
    D.draw_line_dash(ctx, pattern1, 4);
    D.draw_line(ctx, 10, 310, 590, 310);
    D.draw_line_dash(ctx, pattern2, 2);
    D.draw_line(ctx, 10, 330, 590, 330);
    D.draw_line_dash(ctx, pattern3, 2);
    D.draw_line(ctx, 10, 350, 590, 350);
    D.draw_line_dash(ctx, pattern4, 2);
    D.draw_line_width(ctx, 2);
    D.draw_line(ctx, 10, 365, 590, 365);
    D.draw_line_dash(ctx, pattern1, 4);
    D.draw_line_width(ctx, 1);
    D.draw_line(ctx, 10, 375, 590, 375);
    D.draw_line_dash(ctx, nil, 0);
    D.draw_line(ctx, 10, 385, 590, 385);

    D.draw_line_width(ctx, 1);
    D.draw_line_color(ctx, D.color_rgb(50, 50, 50));
    D.draw_line(ctx, 3, 3, gx + 3, gy + 3);
	end i_draw_lines_gradient
	
	proc i_draw_local_gradient(ctx: cpointer to D.DCtx; gradient: real)
	var
		c : carray 2 of D.color_t
		gpos, gx, gy: real
		stop: carray 2 of real
		matrix: D.T2Df
	begin
    stop[0] := 0; stop[1] := 1

    c[0] := D.kCOLOR_RED
    c[1] := D.kCOLOR_BLUE

    gpos := gradient * (200 + 100)

    if gpos < 100 then
        gx := 200
        gy := gpos
    else
        gx := 200 - (gpos - 100)
        gy := 100
    end

    D.draw_line_join(ctx, D.ekLJROUND);
    D.draw_fill_linear(ctx, c, stop, 2, 0, 0, gx, gy);

    D.t2d_movef(matrix, kT2D_IDENTf, 50, 40)
    D.draw_matrixf(ctx, matrix)
    D.draw_fill_matrix(ctx, matrix)
    D.draw_line_width(ctx, 10)
    D.draw_line_color(ctx, D.kCOLOR_BLACK)
    D.draw_rect(ctx, D.ekSKFILL, 0, 0, 200, 100)
    D.draw_line_width(ctx, 3)
    D.draw_line_color(ctx, D.color_rgb(200, 200, 200))
    D.draw_line(ctx, 0, 0, gx, gy)

    D.t2d_movef(matrix, kT2D_IDENTf, 400, 40)
    D.t2d_rotatef(matrix, matrix, C.kBMATH_PIf / 6)
    D.draw_matrixf(ctx, matrix)
    D.draw_fill_matrix(ctx, matrix)
    D.draw_line_width(ctx, 10)
    D.draw_line_color(ctx, D.kCOLOR_BLACK)
    D.draw_rect(ctx, D.ekSKFILL, 0, 0, 200, 100)
    D.draw_line_width(ctx, 3)
    D.draw_line_color(ctx, D.color_rgb(200, 200, 200))
    D.draw_line(ctx, 0, 0, gx, gy)

    D.t2d_movef(matrix, kT2D_IDENTf, 250, 280)
    D.t2d_rotatef(matrix, matrix, - C.kBMATH_PIf / 10)
    D.draw_matrixf(ctx, matrix)
    D.t2d_movef(matrix, matrix, -100, -50)
    D.draw_fill_matrix(ctx, matrix)
    D.draw_line_width(ctx, 10)
    D.draw_line_color(ctx, D.kCOLOR_BLACK)
    D.draw_ellipse(ctx, D.ekSKFILL, 0, 0, 100, 50)
    D.draw_matrixf(ctx, matrix)
    D.draw_line_width(ctx, 3)
    D.draw_line_color(ctx, D.color_rgb(200, 200, 200))
    D.draw_line(ctx, 0, 0, gx, gy)
	end i_draw_local_gradient
	
	proc i_draw_wrap_gradient(ctx: cpointer to D.DCtx)
	var
		c : carray 2 of D.color_t
		stop: carray 2 of real
	begin
    stop[0] := 0; stop[1] := 1
    c[0] := D.kCOLOR_RED
    c[1] := D.kCOLOR_BLUE
    D.draw_line_width(ctx, 2)
    D.draw_fill_linear(ctx, c, stop, 2, 200, 0, 400, 0)
    D.draw_fill_wrap(ctx, D.ekFCLAMP)
    D.draw_rect(ctx, D.ekFILLSK, 50, 25, 500, 100)
    D.draw_fill_wrap(ctx, D.ekFTILE)
    D.draw_rect(ctx, D.ekFILLSK, 50, 150, 500, 100)
    D.draw_fill_wrap(ctx, D.ekFFLIP)
    D.draw_rect(ctx, D.ekFILLSK, 50, 275, 500, 100)
	end i_draw_wrap_gradient
	
	proc i_text_single(ctx: cpointer to D.DCtx)
	var
		font: cpointer to D.Font
		text: pointer to array of char
		width, height: real
		matrix: D.T2Df
		tmp1, tmp2: carray 1 of real
		tmp3: carray 1 of cpointer to D.Font
	begin
    font := D.font_system(20, 0)
    text := U.createW("Text 文本 Κείμενο")

    D.draw_font(ctx, font)
    D.draw_text_extents(ctx, text^, -1, tmp1, tmp2)
    width := tmp1[0]; height := tmp2[0]
    D.draw_text_color(ctx, D.kCOLOR_BLUE)
    D.draw_text_align(ctx, D.ekLEFT, D.ekTOP)
    D.draw_text(ctx, text^, 25, 25)
    D.draw_text_align(ctx, D.ekCENTER, D.ekTOP)
    D.draw_text(ctx, text^, 300, 25)
    D.draw_text_align(ctx, D.ekRIGHT, D.ekTOP)
    D.draw_text(ctx, text^, 575, 25)
    D.draw_text_align(ctx, D.ekLEFT, D.ekCENTER);
    D.draw_text(ctx, text^, 25, 100)
    D.draw_text_align(ctx, D.ekCENTER, D.ekCENTER)
    D.draw_text(ctx, text^, 300, 100)
    D.draw_text_align(ctx, D.ekRIGHT, D.ekCENTER)
    D.draw_text(ctx, text^, 575, 100)
    D.draw_text_align(ctx, D.ekLEFT, D.ekBOTTOM)
    D.draw_text(ctx, text^, 25, 175)
    D.draw_text_align(ctx, D.ekCENTER, D.ekBOTTOM)
    D.draw_text(ctx, text^, 300, 175)
    D.draw_text_align(ctx, D.ekRIGHT, D.ekBOTTOM)
    D.draw_text(ctx, text^, 575, 175)

    D.draw_line_color(ctx, D.kCOLOR_RED)
    D.draw_fill_color(ctx, D.kCOLOR_RED)
    D.draw_circle(ctx, D.ekFILL, 25, 25, 3)
    D.draw_circle(ctx, D.ekFILL, 300, 25, 3)
    D.draw_circle(ctx, D.ekFILL, 575, 25, 3)
    D.draw_circle(ctx, D.ekFILL, 25, 100, 3)
    D.draw_circle(ctx, D.ekFILL, 300, 100, 3)
    D.draw_circle(ctx, D.ekFILL, 575, 100, 3)
    D.draw_circle(ctx, D.ekFILL, 25, 175, 3)
    D.draw_circle(ctx, D.ekFILL, 300, 175, 3)
    D.draw_circle(ctx, D.ekFILL, 575, 175, 3)
    D.draw_circle(ctx, D.ekFILL, 25, 200, 3)
    D.draw_circle(ctx, D.ekFILL, 300, 250, 3)
    D.draw_circle(ctx, D.ekFILL, 25, 325, 3)
    D.draw_circle(ctx, D.ekFILL, 575, 200, 3)
    D.draw_circle(ctx, D.ekFILL, 575, 230, 3)
    D.draw_circle(ctx, D.ekFILL, 575, 260, 3)
    D.draw_rect(ctx, D.ekSTROKE, 25, 25, width, height)
    D.draw_rect(ctx, D.ekSTROKE, 300 - (width / 2), 25, width, height)
    D.draw_rect(ctx, D.ekSTROKE, 575 - width, 25, width, height)
    D.draw_rect(ctx, D.ekSTROKE, 25, 100 - (height / 2), width, height)
    D.draw_rect(ctx, D.ekSTROKE, 300 - (width / 2), 100 - (height / 2), width, height)
    D.draw_rect(ctx, D.ekSTROKE, 575 - width, 100 - (height / 2), width, height)
    D.draw_rect(ctx, D.ekSTROKE, 25, 175 - height, width, height)
    D.draw_rect(ctx, D.ekSTROKE, 300 - (width / 2), 175 - height, width, height)
    D.draw_rect(ctx, D.ekSTROKE, 575 - width, 175 - height, width, height)

    D.draw_fill_color(ctx, D.kCOLOR_BLUE)
    D.t2d_movef(matrix, kT2D_IDENTf, 25, 200)
    D.t2d_rotatef(matrix, matrix, C.kBMATH_PIf / 8)
    D.draw_matrixf(ctx, matrix)
    D.draw_text_align(ctx, D.ekLEFT, D.ekTOP)
    D.draw_text(ctx, text^, 0, 0)

    D.t2d_movef(matrix, kT2D_IDENTf, 300, 250)
    D.t2d_rotatef(matrix, matrix, - C.kBMATH_PIf / 8)
    D.draw_matrixf(ctx, matrix)
    D.draw_text_align(ctx, D.ekCENTER, D.ekCENTER)
    D.draw_text(ctx, text^, 0, 0)

    D.t2d_movef(matrix, kT2D_IDENTf, 25, 325)
    D.t2d_scalef(matrix, matrix, 3, 1)
    D.draw_matrixf(ctx, matrix)
    D.draw_text_align(ctx, D.ekLEFT, D.ekTOP)
    D.draw_text(ctx, text^, 0, 0)

    D.t2d_movef(matrix, kT2D_IDENTf, 575, 200)
    D.t2d_scalef(matrix, matrix, 0.5, 1)
    D.draw_matrixf(ctx, matrix)
    D.draw_text_align(ctx, D.ekRIGHT, D.ekTOP)
    D.draw_text(ctx, text^, 0, 0)

    D.t2d_movef(matrix, kT2D_IDENTf, 575, 230)
    D.t2d_scalef(matrix, matrix, 0.75, 1)
    D.draw_matrixf(ctx, matrix)
    D.draw_text_align(ctx, D.ekRIGHT, D.ekTOP)
    D.draw_text(ctx, text^, 0, 0)

    D.t2d_movef(matrix, kT2D_IDENTf, 575, 260)
    D.t2d_scalef(matrix, matrix, 1.25, 1)
    D.draw_matrixf(ctx, matrix)
    D.draw_text_align(ctx, D.ekRIGHT, D.ekTOP)
    D.draw_text(ctx, text^, 0, 0)

		tmp3[0] := font
    D.font_destroy(tmp3)
	end i_text_single
	
	proc i_text_newline(ctx: cpointer to D.DCtx)
	var
		font: cpointer to D.Font
		text: pointer to array of char
		width, height: real
		tmp1,tmp2: carray 1 of real
		tmp3: carray 1 of cpointer to D.Font
	begin
    font := D.font_system(20, 0)
    text := U.createW("Text new line" + 0ax + "文字换行" + 0ax + "Γραμμή κειμένου" )
    D.draw_font(ctx, font)
    D.draw_text_extents(ctx, text^, -1, tmp1, tmp2)
    width := tmp1[0]; height := tmp2[0]

    D.draw_text_color(ctx, D.kCOLOR_BLUE)
    D.draw_text_align(ctx, D.ekLEFT, D.ekTOP)
    D.draw_text_halign(ctx, D.ekLEFT)
    D.draw_text(ctx, text^, 25, 25)
    D.draw_text_align(ctx, D.ekCENTER, D.ekTOP)
    D.draw_text_halign(ctx, D.ekCENTER)
    D.draw_text(ctx, text^, 300, 25)

    D.draw_text_align(ctx, D.ekRIGHT, D.ekTOP)
    D.draw_text_halign(ctx, D.ekRIGHT)
    D.draw_text(ctx, text^, 575, 25)
    D.draw_text_align(ctx, D.ekLEFT, D.ekCENTER)
    D.draw_text_halign(ctx, D.ekLEFT)
    D.draw_text(ctx, text^, 25, 175)
    D.draw_text_align(ctx, D.ekCENTER, D.ekCENTER)
    D.draw_text_halign(ctx, D.ekCENTER)
    D.draw_text(ctx, text^, 300, 175)
    D.draw_text_align(ctx, D.ekRIGHT, D.ekCENTER)
    D.draw_text_halign(ctx, D.ekRIGHT)
    D.draw_text(ctx, text^, 575, 175)
    D.draw_text_align(ctx, D.ekLEFT, D.ekBOTTOM)
    D.draw_text_halign(ctx, D.ekLEFT)
    D.draw_text(ctx, text^, 25, 325)
    D.draw_text_align(ctx, D.ekCENTER, D.ekBOTTOM)
    D.draw_text_halign(ctx, D.ekCENTER)
    D.draw_text(ctx, text^, 300, 325)
    D.draw_text_align(ctx, D.ekRIGHT, D.ekBOTTOM)
    D.draw_text_halign(ctx, D.ekRIGHT)
    D.draw_text(ctx, text^, 575, 325)

    D.draw_line_color(ctx, D.kCOLOR_RED)
    D.draw_fill_color(ctx, D.kCOLOR_RED)
    D.draw_circle(ctx, D.ekFILL, 25, 25, 3)
    D.draw_circle(ctx, D.ekFILL, 300, 25, 3)
    D.draw_circle(ctx, D.ekFILL, 575, 25, 3)
    D.draw_circle(ctx, D.ekFILL, 25, 175, 3)
    D.draw_circle(ctx, D.ekFILL, 300, 175, 3)
    D.draw_circle(ctx, D.ekFILL, 575, 175, 3)
    D.draw_circle(ctx, D.ekFILL, 25, 325, 3)
    D.draw_circle(ctx, D.ekFILL, 300, 325, 3)
    D.draw_circle(ctx, D.ekFILL, 575, 325, 3)
    D.draw_rect(ctx, D.ekSTROKE, 25, 25, width, height)
    D.draw_rect(ctx, D.ekSTROKE, 300 - (width / 2), 25, width, height)
    D.draw_rect(ctx, D.ekSTROKE, 575 - width, 25, width, height)
    D.draw_rect(ctx, D.ekSTROKE, 25, 175 - (height / 2), width, height)
    D.draw_rect(ctx, D.ekSTROKE, 300 - (width / 2), 175 - (height / 2), width, height)
    D.draw_rect(ctx, D.ekSTROKE, 575 - width, 175 - (height / 2), width, height)
    D.draw_rect(ctx, D.ekSTROKE, 25, 325 - height, width, height)
    D.draw_rect(ctx, D.ekSTROKE, 300 - (width / 2), 325 - height, width, height)
    D.draw_rect(ctx, D.ekSTROKE, 575 - width, 325 - height, width, height)
    tmp3[0] := font
    D.font_destroy(tmp3)
	end i_text_newline
	
	proc i_text_block(ctx: cpointer to D.DCtx)
	const
		text = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do "
	     + "eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim "
	     + "veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo "
	     + "consequat."
	var
		width1, height1, width2, height2, width3, height3, width4, height4: real
		tmp1,tmp2: carray 1 of real
	begin
    D.draw_text_color(ctx, D.kCOLOR_BLUE)
    D.draw_text_align(ctx, D.ekLEFT, D.ekTOP)
    D.draw_text_halign(ctx, D.ekLEFT)
    D.draw_text_width(ctx, 200)
    D.draw_text_extents(ctx, text, 200, tmp1, tmp2)
    width1 := tmp1[0]; height1 := tmp2[0]
    D.draw_text(ctx, text, 25, 25)
    D.draw_text_width(ctx, 300)
    D.draw_text_extents(ctx, text, 300, tmp1, tmp2)
    width2 := tmp1[0]; height2 := tmp2[0]
    D.draw_text(ctx, text, 250, 25)
    D.draw_text_width(ctx, 400)
    D.draw_text_extents(ctx, text, 400, tmp1, tmp2)
    width3 := tmp1[0]; height3 := tmp2[0]
    D.draw_text(ctx, text, 25, 200)
    D.draw_text_width(ctx, 500)
    D.draw_text_extents(ctx, text, 500, tmp1, tmp2)
    width4 := tmp1[0]; height4 := tmp2[0]
    D.draw_text(ctx, text, 25, 315)

    D.draw_line_color(ctx, D.kCOLOR_RED)
    D.draw_fill_color(ctx, D.kCOLOR_RED)
    D.draw_circle(ctx, D.ekFILL, 25, 25, 3)
    D.draw_circle(ctx, D.ekFILL, 250, 25, 3)
    D.draw_circle(ctx, D.ekFILL, 25, 200, 3)
    D.draw_circle(ctx, D.ekFILL, 25, 315, 3)
    D.draw_rect(ctx, D.ekSTROKE, 25, 25, width1, height1)
    D.draw_rect(ctx, D.ekSTROKE, 25, 25, 200, height1)
    D.draw_rect(ctx, D.ekSTROKE, 250, 25, width2, height2)
    D.draw_rect(ctx, D.ekSTROKE, 250, 25, 300, height2)
    D.draw_rect(ctx, D.ekSTROKE, 25, 200, width3, height3)
    D.draw_rect(ctx, D.ekSTROKE, 25, 200, 400, height3)
    D.draw_rect(ctx, D.ekSTROKE, 25, 315, width4, height4)
    D.draw_rect(ctx, D.ekSTROKE, 25, 315, 500, height4)
	end i_text_block
	
	proc i_text_art(ctx: cpointer to D.DCtx)
	var
		font: cpointer to D.Font
		c: carray 2 of D.color_t
		stop, dash: carray 2 of real
		width, height: real
		tmp1,tmp2: carray 1 of real
		tmp3: carray 1 of cpointer to D.Font
	begin
    font := D.font_system(50, 0)
    stop[0] := 0; stop[1] := 1
    dash[0] := 1; dash[1] := 1
    c[0] := D.kCOLOR_BLUE
    c[1] := D.kCOLOR_RED
    D.draw_font(ctx, font)
    D.draw_line_width(ctx, 2)
    D.draw_line_color(ctx, D.kCOLOR_WHITE)
    D.draw_fill_color(ctx, D.kCOLOR_BLUE)
    D.draw_text_path(ctx, D.ekFILLSK, "Fill and Stoke text", 25, 25)
    D.draw_text_extents(ctx, "Gradient fill text", -1, tmp1, tmp2)
    width := tmp1[0]; height := tmp2[0]
    D.draw_fill_linear(ctx, c, stop, 2, 25, 0, 25 + width, 0)
    D.draw_fill_matrix(ctx, kT2D_IDENTf)
    D.draw_text_path(ctx, D.ekFILL, "Gradient fill text", 25, 100)
    D.draw_line_color(ctx, D.kCOLOR_BLACK)
    D.draw_line_dash(ctx, dash, 2)
    D.draw_text_path(ctx, D.ekSTROKE, "Dashed stroke text", 25, 175)
    D.draw_line_color(ctx, D.kCOLOR_GREEN)
    D.draw_text_extents(ctx, "Gradient dashed text", -1, tmp1, tmp2)
    width := tmp1[0]; height := tmp2[0]
    D.draw_fill_linear(ctx, c, stop, 2, 25, 0, 25 + width, 0)
    D.draw_text_path(ctx, D.ekFILLSK, "Gradient dashed text", 25, 250)
    D.draw_line_color(ctx, D.kCOLOR_BLACK)
    D.draw_line_width(ctx, 0.5)
    D.draw_line_dash(ctx, nil, 0)
    D.draw_text_path(ctx, D.ekSTROKE, "Thin stroke text", 25, 325)
    tmp3[0] := font
    D.font_destroy(tmp3)
	end i_text_art
	
	proc i_image(ctx: cpointer to D.DCtx)
	var
		image: cpointer to D.Image
		matrix: D.T2Df
		error: carray 1 of C.ferror_t
		tmp: carray 1 of cpointer to D.Image
	begin
    image := D.image_from_file("image.jpg", error)
    if image = nil then
	    C.log_printf("cannot load image.jpg")
	    return
    end
    D.draw_image_align(ctx, D.ekLEFT, D.ekTOP)
    D.draw_image(ctx, image, 25, 25)
    D.t2d_movef(matrix, kT2D_IDENTf, 300, 200)
    D.t2d_rotatef(matrix, matrix, C.kBMATH_PIf / 8)
    D.draw_image_align(ctx, D.ekCENTER, D.ekCENTER)
    D.draw_matrixf(ctx, matrix)
    D.draw_image(ctx, image, 0, 0)
    D.draw_matrixf(ctx, kT2D_IDENTf)
    D.draw_image_align(ctx, D.ekRIGHT, D.ekTOP)
    D.draw_image(ctx, image, 575, 25)
    D.draw_image_align(ctx, D.ekLEFT, D.ekBOTTOM)
    D.draw_image(ctx, image, 25, 375)
    D.draw_image_align(ctx, D.ekRIGHT, D.ekBOTTOM)
    D.draw_image(ctx, image, 575, 375)

    D.draw_fill_color(ctx, D.kCOLOR_BLUE)
    D.draw_circle(ctx, D.ekFILL, 25, 25, 3)
    D.draw_circle(ctx, D.ekFILL, 300, 200, 3)
    D.draw_circle(ctx, D.ekFILL, 575, 25, 3)
    D.draw_circle(ctx, D.ekFILL, 25, 375, 3)
    D.draw_circle(ctx, D.ekFILL, 575, 375, 3)
    tmp[0] := image
    D.image_destroy(tmp)
	end i_image
	
	proc i_OnDraw(data: *void; e: cpointer to C.Event)
	type
		EvDrawPtr = cpointer to G.EvDraw
	var
		p: EvDrawPtr
	begin
    p := cast(EvDrawPtr,C.event_params_imp(e, "EvDraw"))
    D.draw_clear(p.ctx, D.color_rgb(200, 200, 200))
    case option of
    | 0: 
        G.cell_enabled(slider, false)
        G.label_text(label, "Different line styles: width, join, cap, dash...")
        i_draw_lines(p.ctx)
    | 1: 
        G.cell_enabled(slider, false)
        G.label_text(label, "Basic shapes filled and stroke.")
        D.draw_fill_color(p.ctx, D.kCOLOR_BLUE)
        i_draw_shapes(p.ctx, false)
    | 2: 
        G.cell_enabled(slider, true)
        G.label_text(label, "Global linear gradient.")
        i_draw_gradient(p.ctx, gradient, true, false)
    | 3: 
        G.cell_enabled(slider, true)
        G.label_text(label, "Shapes filled with global (identity) linear gradient.")
        i_draw_gradient(p.ctx, gradient, true, true)
    | 4: 
        G.cell_enabled(slider, true)
        G.label_text(label, "Shapes filled with global (identity) linear gradient.")
        i_draw_gradient(p.ctx, gradient, false, true)
    | 5: 
        G.cell_enabled(slider, true)
        G.label_text(label, "Lines with global (identity) linear gradient.")
        i_draw_lines_gradient(p.ctx, gradient)
    | 6: 
        G.cell_enabled(slider, true)
        G.label_text(label, "Shapes filled with local (transformed) gradient.")
        i_draw_local_gradient(p.ctx, gradient)
    | 7: 
        G.cell_enabled(slider, false)
        G.label_text(label, "Gradient wrap modes.")
        i_draw_wrap_gradient(p.ctx)
    | 8:
        G.cell_enabled(slider, false)
        G.label_text(label, "Single line text with alignment and transforms")
        i_text_single(p.ctx)
    | 9:
        G.cell_enabled(slider, false)
        G.label_text(label, "Text with newline (0AH) character and internal alignment")
        i_text_newline(p.ctx)
    | 10:
        G.cell_enabled(slider, false)
        G.label_text(label, "Text block in a constrained width area")
        i_text_block(p.ctx)
    | 11:
        G.cell_enabled(slider, false)
        G.label_text(label, "Artistic text filled and stroke")
        i_text_art(p.ctx)
    | 12:
        G.cell_enabled(slider, false)
        G.label_text(label, "Drawing images with alignment")
        i_image(p.ctx)
    end
	end i_OnDraw
	
	proc i_OnSelect(data: *void; e: cpointer to C.Event)
	type
		EvButtonPtr = cpointer to G.EvButton
	var
		p: EvButtonPtr
	begin
    p := cast(EvButtonPtr,C.event_params_imp(e, "EvButton"))
    option := p.index
    G.view_update(view)
	end i_OnSelect
	
	proc i_OnSlider(data: *void; e: cpointer to C.Event)
	type
		EvSliderPtr = cpointer to G.EvSlider
	var
		p: EvSliderPtr
	begin
    p := cast(EvSliderPtr,C.event_params_imp(e, "EvSlider"))
    gradient := p.pos
    G.view_update(view)
	end i_OnSlider
	
	proc i_panel(): cpointer to G.Panel
	var
		panel: cpointer to G.Panel
		layout1, layout2: cpointer to G.Layout
		label1, label2, label3: cpointer to G.Label
		popup: cpointer to G.PopUp
		slider1: cpointer to G.Slider
		view1: cpointer to G.View
	begin
    panel := G.panel_create()
    layout1 := G.layout_create(1, 3)
    layout2 := G.layout_create(4, 1)
    label1 := G.label_create()
    label2 := G.label_create()
    label3 := G.label_multiline()
    popup := G.popup_create()
    slider1 := G.slider_create()
    view1 := G.view_create()
    G.label_text(label1, "Select primitives:")
    G.label_text(label2, "Gradient angle")
    G.popup_add_elem(popup, "Lines", nil)
    G.popup_add_elem(popup, "Shapes", nil)
    G.popup_add_elem(popup, "Gradient-1", nil)
    G.popup_add_elem(popup, "Gradient-2", nil)
    G.popup_add_elem(popup, "Gradient-3", nil)
    G.popup_add_elem(popup, "Gradient-4", nil)
    G.popup_add_elem(popup, "Gradient-5", nil)
    G.popup_add_elem(popup, "Gradient-6", nil)
    G.popup_add_elem(popup, "Text-1", nil)
    G.popup_add_elem(popup, "Text-2", nil)
    G.popup_add_elem(popup, "Text-3", nil)
    G.popup_add_elem(popup, "Text-4", nil)
    G.popup_add_elem(popup, "Image", nil)
    G.popup_list_height(popup, 6)
    G.popup_OnSelect(popup, C.listener_imp(nil, i_OnSelect))
    G.slider_OnMoved(slider1, C.listener_imp(nil, i_OnSlider))
    G.view_size(view1, D.s2df(600, 400))
    G.view_OnDraw(view1, C.listener_imp(nil, i_OnDraw))
    G.layout_label(layout2, label1, 0, 0)
    G.layout_popup(layout2, popup, 1, 0)
    G.layout_label(layout2, label2, 2, 0)
    G.layout_slider(layout2, slider1, 3, 0)
    G.layout_layout(layout1, layout2, 0, 0)
    G.layout_label(layout1, label3, 0, 1)
    G.layout_view(layout1, view1, 0, 2)
    G.layout_margin(layout1, 5)
    G.layout_hmargin(layout2, 0, 10)
    G.layout_hmargin(layout2, 1, 10)
    G.layout_hmargin(layout2, 2, 10)
    G.layout_vmargin(layout1, 0, 5)
    G.layout_vmargin(layout1, 1, 5)
    G.layout_halign(layout1, 0, 1, D.ekJUSTIFY)
    G.layout_hexpand(layout2, 3)
    G.panel_layout(panel, layout1)
    slider := G.layout_cell(layout2, 3, 0)
    view := view1
    label := label3
    return panel
	end i_panel

	proc i_OnClose(data: *void; e: cpointer to C.Event)
	begin
    G.osapp_finish()
    // unref(e);
	end i_OnClose
	
	proc i_create()
	var 
		panel: cpointer to G.Panel
	begin
    panel := i_panel()
    window := G.window_create(G.ekWNSTD)
    gradient := 0
    option := 0
    G.window_panel(window, panel)
    G.window_title(window, "Drawing primitives")
    G.window_origin(window, D.v2df(500, 200))
    G.window_OnClose(window, C.listener_imp(nil, i_OnClose))
    G.window_show(window)
	end i_create

	proc i_destroy(item: *[]*void)
    var w: carray 1 of *G.Window
  begin
    w[0] := window
    G.window_destroy(w)
    window := nil
  end i_destroy
  
begin
	kT2D_IDENTf.i.x := 1; kT2D_IDENTf.i.y := 0
	kT2D_IDENTf.j.x := 0; kT2D_IDENTf.j.y := 1
	kT2D_IDENTf.p.x := 0; kT2D_IDENTf.p.y := 0
  G.osmain_imp(0, nil, nil, 0.0, i_create, nil, i_destroy, nil)
end DrawHello
