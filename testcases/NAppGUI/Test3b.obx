module Test3b
	import C := NAppCore

type
	Data = cstruct count: integer end
	
	proc fibonacci( n : integer ): longint
		var a,b: longint
	begin
	  if n > 1 then 
		   a := fibonacci( n - 1 )
		   b := fibonacci( n - 2 )
			return ( a + b )
	  elsif n = 0 then 
			return 0
	  else 
			return 1
	  end
	end fibonacci
	
	proc worker(data: *void): integer
		type DataPtr = *Data
		var
			p: DataPtr
	begin
		println("start worker")
		p := cast(DataPtr,data)
		println(p.count)
		println(fibonacci(p.count))
		println("end worker")
		return 0
	end worker

var
	//t0,t1: *C.Thread // works
	t : carray 2 of *C.Thread 
	//d0,d1,d2: Data // works
	d : carray 2 of Data // works
begin
	println("start Test3")
	C.core_start()
	d[0].count := 35
	t[0] := C.bthread_create_imp(worker, d[0])
	d[1].count := 36
	t[1] := C.bthread_create_imp(worker, d[1])

	C.bthread_wait(t[0])
	C.bthread_wait(t[1])

	C.core_finish()
	println("end Test3")
end Test3b
