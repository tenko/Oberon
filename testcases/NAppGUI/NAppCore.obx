// Generated by C2OBX 2021-11-10 on 2022-01-05T12:10:12
// source was first generated using the following command:
// gcc -E -I../src/osbs -I../src/sewer -I../src/draw2d -I../src/geom2d -I../src/gui \
//     -I../src/osgui -I../src/core -I../todo -I../src/osapp -I../src/osgui/gtk3 -I../src/draw2d/gtk3 \
//     -DNAPPGUI_LIBRARY -DCMAKE_RELEASE -DNAPPGUI_BUILD_DIR -DNAPPGUI_SOURCE_DIR -D__GTK3__ \
//     -DNAPPGUI_BUILD coreall.h
// and then manually improved by Rochus Keller
// Original NAppGUI C API by Francisco Garcia Collado, MIT Licence

definition NAppCore [extern 'C', dll 'NAppGUI']

    // from array.h
    type
        FPtr_read_init = proc(stream: *Stream; obj: *void)
        FPtr_read = proc(stream: *Stream): *void
        FPtr_write = proc(stream: *Stream; obj: *void)
        FPtr_scopy = proc(dest: *void; src: *void)
        FPtr_compare = proc (item1: *void; item2: *void):integer

    proc array_create(esize: shortint; type_: *[]char): *Array
    proc array_copy(array_: *Array; func_copy: FPtr_scopy; type_: *[]char): *Array
    proc array_copy_ptr(array_: *Array; func_copy: FPtr_copy; type_: *[]char): *Array
    proc array_read(stream: *Stream; esize: shortint; func_read_init: FPtr_read_init; type_: *[]char): *Array
    proc array_read_ptr(stream: *Stream; func_read: FPtr_read; type_: *[]char): *Array
    proc array_destroy(array_: *[]*Array; func_remove: FPtr_remove; type_: *[]char)
    proc array_destopt(array_: *[]*Array; func_remove: FPtr_remove; type_: *[]char)
    proc array_destroy_ptr(array_: *[]*Array; func_destroy: FPtr_destroy; type_: *[]char)
    proc array_destopt_ptr(array_: *[]*Array; func_destroy: FPtr_destroy; type_: *[]char)
    proc array_clear(array_: *Array; func_remove: FPtr_remove)
    proc array_clear_ptr(array_: *Array; func_destroy: FPtr_destroy)
    proc array_write(stream: *Stream; array_: *Array; func_write: FPtr_write)
    proc array_write_ptr(stream: *Stream; array_: *Array; func_write: FPtr_write)
    proc array_size(array_: *Array): integer
    proc array_esize(array_: *Array): integer
    proc array_get(array_: *Array; pos: integer): *[]byte
    proc array_get_last(array_: *Array): *[]byte
    proc array_all(array_: *Array): *[]byte
    proc array_insert(array_: *Array; pos: integer; n: integer): *[]byte
    proc array_insert0(array_: *Array; pos: integer; n: integer): *[]byte
    proc array_join(dest: *Array; src: *Array; func_copy: FPtr_scopy)
    proc array_join_ptr(dest: *Array; src: *Array; func_copy: FPtr_copy)
    proc array_delete(array_: *Array; pos: integer; n: integer; func_remove: FPtr_remove)
    proc array_delete_ptr(array_: *Array; pos: integer; n: integer; func_destroy: FPtr_destroy)
    proc array_pop(array_: *Array; func_remove: FPtr_remove)
    proc array_pop_ptr(array_: *Array; func_destroy: FPtr_destroy)
    proc array_sort(array_: *Array; func_compare: FPtr_compare)
    proc array_sort_ex(array_: *Array; func_compare: FPtr_compare_ex; data: *void)
    proc array_sort_ptr(array_: *Array; func_compare: FPtr_compare)
    proc array_sort_ptr_ex(array_: *Array; func_compare: FPtr_compare_ex; data: *void)
    proc array_find_ptr(array_: *Array; elem: *void): integer
    proc array_search(array_: *Array; func_compare: FPtr_compare; key: *void; pos: *[]integer): *[]byte
    proc array_search_ptr(array_: *Array; func_compare: FPtr_compare; key: *void; pos: *[]integer): *[]byte
    proc array_bsearch(array_: *Array; func_compare: FPtr_compare; key: *void; pos: *[]integer): *[]byte
    proc array_bsearch_ptr(array_: *Array; func_compare: FPtr_compare; key: *void; pos: *[]integer): *[]byte

    // from bhash.h
    proc bhash_from_block(data: *[]byte; size: integer): integer
    proc bhash_append_uint32(hash: integer; value: integer): integer
    proc bhash_append_real32(hash: integer; value: real): integer

    // from buffer.h
    proc buffer_create(size: integer): *Buffer
    proc buffer_destroy(buffer: *[]*Buffer)
    proc buffer_size(buffer: *Buffer): integer
    proc buffer_data(buffer: *Buffer): *[]byte

    // from clock.h
    proc clock_create(interval: longreal): *Clock
    proc clock_destroy(clk: *[]*Clock)
    proc clock_frame(clk: *Clock; prev_frame: *[]longreal; curr_frame: *[]longreal): char
    proc clock_reset(clk: *Clock)
    proc clock_elapsed(clk: *Clock): longreal

    // from core.h
    proc core_start
    proc core_finish

    // from core.hxx
    type
        core_event_t = integer
    const
        ekEASSERT = 256
        ekEENTRY = 258
        ekEEXIT = 259
        ekEFILE = 257

    type
        sstate_t = (ekSTOK, ekSTEND, ekSTCORRUPT, ekSTBROKEN)
        mkey_t = integer
    const
        ekMKEY_ALT = 4
        ekMKEY_COMMAND = 8
        ekMKEY_CONTROL = 2
        ekMKEY_NONE = 0
        ekMKEY_SHIFT = 1

    type
        Array = cstruct end
        Buffer = cstruct end
        KeyBuf = cstruct end
        Clock = cstruct end
        Event = cstruct end
        Listener = cstruct end
        RBTree = cstruct end
        ResPack = cstruct end
        RegEx = cstruct end
        Stream = cstruct end
        String = cstruct end
        file_type_t = ( file_type_t_invalid, ekARCHIVE, ekDIRECTORY, ekOTHERFILE )

    type
        DirEntry = cstruct
                name: *String
                type_: file_type_t
                size: integer
                date: Date end
        FPtr_compare_ex = proc(item1: *void; item2: *void; data: *void): integer

	(* TODO
    proc arrst_bool_t_end
    proc arrst_int8_t_end
    proc arrst_int16_t_end
    proc arrst_int32_t_end
    proc arrst_int64_t_end
    proc arrst_uint8_t_end
    proc arrst_uint16_t_end
    proc arrst_uint32_t_end
    proc arrst_uint64_t_end
    proc arrst_real32_t_end
    proc arrst_real64_t_end
    proc arrpt_String_end
    proc arrst_DirEntry_end
    proc arrpt_ResPack_end
    *)

    // from date.h
    type
        month_t = ( month_t_invalid,
        	ekJANUARY,
			ekFEBRUARY,
			ekMARCH,
			ekAPRIL,
			ekMAY,
			ekJUNE,
			ekJULY,
			ekAUGUST,
			ekSEPTEMBER,
			ekOCTOBER,
			ekNOVEMBER,
			ekDECEMBER )

    type
        Date = cstruct
                year: shortint
                month: byte
                wday: byte
                mday: byte
                hour: byte
                minute: byte
                second: byte end

    proc date_system(): Date
    proc date_add_seconds(date: *Date; seconds: integer): Date
    proc date_add_minutes(date: *Date; minutes: integer): Date
    proc date_add_hours(date: *Date; hours: integer): Date
    proc date_add_days(date: *Date; days: integer): Date
    proc date_year(): shortint
    proc date_cmp(date1: *Date; date2: *Date): integer
    proc date_between(date: *Date; from: *Date; to_: *Date): char
    proc date_is_null(date: *Date): char
    proc date_DD_MM_YYYY_HH_MM_SS(date: *Date): *String
    proc date_YYYY_MM_DD_HH_MM_SS(date: *Date): *String
    proc date_month_en(month: month_t): *[]char
    proc date_month_es(month: month_t): *[]char

    // from dbind.h
    type
        enum_t = (ekENUM_GENERIC_VALUE)

    proc dbind_imp(type_: *[]char; size: shortint; mname: *[]char; mtype: *[]char; moffset: shortint; msize: shortint)
    proc dbind_enum_imp(type_: *[]char; name: *[]char; value: enum_t; alias: *[]char)
    proc dbind_create_imp(type_: *[]char): *[]byte
    proc dbind_init_imp(data: *[]byte; type_: *[]char)
    proc dbind_remove_imp(data: *[]byte; type_: *[]char)
    proc dbind_destroy_imp(data: *[]*[]byte; type_: *[]char)
    proc dbind_destopt_imp(data: *[]*[]byte; type_: *[]char)
    proc dbind_read_imp(stm: *Stream; type_: *[]char): *void
    proc dbind_write_imp(stm: *Stream; data: *void; type_: *[]char)
    proc dbind_default_imp(type_: *[]char; mname: *[]char; value: *void)
    proc dbind_range_imp(type_: *[]char; mname: *[]char; min: *void; max: *void)
    proc dbind_precision_imp(type_: *[]char; mname: *[]char; prec: *void)
    proc dbind_increment_imp(type_: *[]char; mname: *[]char; incr: *void)
    proc dbind_suffix_imp(type_: *[]char; mname: *[]char; suffix: *[]char)

    // from event.h
    type
        FPtr_event_handler = proc(obj: *void; event: *Event)

    proc listener_imp(object: *void; func_event_handler: FPtr_event_handler): *Listener
    proc listener_destroy(listener: *[]*Listener)
    proc listener_update(listener: *[]*Listener; new_listener: *Listener)
    proc listener_event_imp(listener: *Listener; type_: integer; sender: *void; params: *void; result: *void; sender_type: *[]char; params_type: *[]char; result_type: *[]char)
    proc listener_pass_event_imp(listener: *Listener; event: *Event; sender: *void; sender_type: *[]char)
    proc event_type(event: *Event): integer
    proc event_sender_imp(event: *Event; type_: *[]char): *void
    proc event_params_imp(event: *Event; type_: *[]char): *void
    proc event_result_imp(event: *Event; type_: *[]char): *void

    // from heap.h
    proc heap_start_mt
    proc heap_end_mt
    proc heap_malloc_imp(size: integer; name: *[]char; equal_sized: char): *[]byte
    proc heap_calloc_imp(size: integer; name: *[]char; equal_sized: char): *[]byte
    proc heap_realloc(mem: *[]byte; size: integer; new_size: integer; name: *[]char): *[]byte
    proc heap_aligned_malloc_imp(size: integer; align: integer; name: *[]char; equal_sized: char): *[]byte
    proc heap_aligned_calloc_imp(size: integer; align: integer; name: *[]char; equal_sized: char): *[]byte
    proc heap_aligned_realloc(mem: *[]byte; size: integer; new_size: integer; align: integer; name: *[]char): *[]byte
    proc heap_free(mem: *[]*[]byte; size: integer; name: *[]char)
    proc heap_auditor_add(name: *[]char)
    proc heap_auditor_delete(name: *[]char)
    proc heap_stats(stats: char)

    // from hfile.h
    proc hfile_dir(pathname: *[]char): char
    proc hfile_dir_create(pathname: *[]char; error: *[1]ferror_t): char
    proc hfile_dir_destroy(pathname: *[]char; error: *[1]ferror_t): char
    proc hfile_dir_list(pathname: *[]char; subdirs: char; error: *[1]ferror_t): *[]DirEntry
    proc hfile_dir_entry_remove(entry: *DirEntry)
    proc hfile_date(pathname: *[]char; recursive: char): Date
    proc hfile_dir_sync(src: *[]char; dest: *[]char; recursive: char; remove_in_dest: char; except: *[]*[]char; except_size: integer; error: *[1]ferror_t): char
    proc hfile_exists(pathname: *[]char; file_type: *[1]file_type_t): char
    proc hfile_is_uptodate(src: *[]char; dest: *[]char): char
    proc hfile_copy(from: *[]char; to_: *[]char; error: *[1]ferror_t): char
    proc hfile_buffer(pathname: *[]char; error: *[1]ferror_t): *Buffer
    proc hfile_string(pathname: *[]char; error: *[1]ferror_t): *String
    proc hfile_stream(pathname: *[]char; error: *[1]ferror_t): *Stream
    proc hfile_from_string(pathname: *[]char; str: *String; error: *[1]ferror_t): char
    proc hfile_from_data(pathname: *[]char; data: *[]byte; size: integer; error: *[1]ferror_t): char
    proc hfile_dir_loop(pathname: *[]char; listener: *Listener; subdirs: char; hiddens: char; error: *[1]ferror_t): char
    proc hfile_appdata(filename: *[]char): *String
    proc hfile_home_dir(path: *[]char): *String

    // from keybuf.h
    type
        vkey_t = (ekKEY_UNDEF, ekKEY_A, ekKEY_S, ekKEY_D, ekKEY_F, ekKEY_H, ekKEY_G, ekKEY_Z, ekKEY_X, ekKEY_C, ekKEY_V, ekKEY_BSLASH, ekKEY_B, ekKEY_Q, ekKEY_W, ekKEY_E, ekKEY_R, ekKEY_Y, ekKEY_T, ekKEY_1, ekKEY_2, ekKEY_3, ekKEY_4, ekKEY_6, ekKEY_5, ekKEY_9, ekKEY_7, ekKEY_8, ekKEY_0, ekKEY_RCURLY, ekKEY_O, ekKEY_U, ekKEY_LCURLY, ekKEY_I, ekKEY_P, ekKEY_RETURN, ekKEY_L, ekKEY_J, ekKEY_SEMICOLON, ekKEY_K, ekKEY_QUEST, ekKEY_COMMA, ekKEY_MINUS, ekKEY_N, ekKEY_M, ekKEY_PERIOD, ekKEY_TAB, ekKEY_SPACE, ekKEY_GTLT, ekKEY_BACK, ekKEY_ESCAPE, ekKEY_F17, ekKEY_NUMDECIMAL, ekKEY_NUMMULT, ekKEY_NUMADD, ekKEY_NUMLOCK, ekKEY_NUMDIV, ekKEY_NUMRET, ekKEY_NUMMINUS, ekKEY_F18, ekKEY_F19, ekKEY_NUMEQUAL, ekKEY_NUM0, ekKEY_NUM1, ekKEY_NUM2, ekKEY_NUM3, ekKEY_NUM4, ekKEY_NUM5, ekKEY_NUM6, ekKEY_NUM7, ekKEY_NUM8, ekKEY_NUM9, ekKEY_F5, ekKEY_F6, ekKEY_F7, ekKEY_F3, ekKEY_F8, ekKEY_F9, ekKEY_F11, ekKEY_F13, ekKEY_F16, ekKEY_F14, ekKEY_F10, ekKEY_F12, ekKEY_F15, ekKEY_PAGEUP, ekKEY_HOME, ekKEY_SUPR, ekKEY_F4, ekKEY_PAGEDOWN, ekKEY_F2, ekKEY_END, ekKEY_F1, ekKEY_LEFT, ekKEY_RIGHT, ekKEY_DOWN, ekKEY_UP, ekKEY_LSHIFT, ekKEY_RSHIFT, ekKEY_LCTRL, ekKEY_RCTRL, ekKEY_LALT, ekKEY_RALT, ekKEY_INSERT, ekKEY_EXCLAM, ekKEY_MENU, ekKEY_LWIN, ekKEY_RWIN, ekKEY_CAPS, ekKEY_TILDE, ekKEY_GRAVE, ekKEY_PLUS)

    proc keybuf_create(): *KeyBuf
    proc keybuf_destroy(buffer: *[]*KeyBuf)
    proc keybuf_OnUp(buffer: *KeyBuf; key: vkey_t)
    proc keybuf_OnDown(buffer: *KeyBuf; key: vkey_t)
    proc keybuf_clear(buffer: *KeyBuf)
    proc keybuf_pressed(buffer: *KeyBuf; key: vkey_t): char
    proc keybuf_str(key: vkey_t): *[]char
    proc keybuf_dump(buffer: *KeyBuf)

    // from rbtree.h
    type
        FPtr_copy = proc(item: *void): *void
        FPtr_remove = proc(obj: *void)
        FPtr_destroy = proc(item: *[]*void)

    proc rbtree_create(func_compare: FPtr_compare; esize: shortint; ksize: shortint; type_: *[]char): *RBTree
    proc rbtree_destroy(tree: *[]*RBTree; func_remove: FPtr_remove; func_destroy_key: FPtr_destroy; type_: *[]char)
    proc rbtree_destroy_ptr(tree: *[]*RBTree; func_destroy: FPtr_destroy; func_destroy_key: FPtr_destroy; type_: *[]char)
    proc rbtree_size(tree: *RBTree): integer
    proc rbtree_get(tree: *RBTree; key: *void; isptr: char): *[]byte
    proc rbtree_insert(tree: *RBTree; key: *void; func_key_copy: FPtr_copy): *[]byte
    proc rbtree_insert_ptr(tree: *RBTree; ptr: *void): char
    proc rbtree_delete(tree: *RBTree; key: *void; func_remove: FPtr_remove; func_destroy_key: FPtr_destroy): char
    proc rbtree_delete_ptr(tree: *RBTree; key: *void; func_destroy: FPtr_destroy; func_destroy_key: FPtr_destroy): char
    proc rbtree_first(tree: *RBTree): *[]byte
    proc rbtree_last(tree: *RBTree): *[]byte
    proc rbtree_next(tree: *RBTree): *[]byte
    proc rbtree_prev(tree: *RBTree): *[]byte
    proc rbtree_first_ptr(tree: *RBTree): *[]byte
    proc rbtree_last_ptr(tree: *RBTree): *[]byte
    proc rbtree_next_ptr(tree: *RBTree): *[]byte
    proc rbtree_prev_ptr(tree: *RBTree): *[]byte
    proc rbtree_get_key(tree: *RBTree): *[]char
    proc rbtree_check(tree: *RBTree): char

    // from regex.h
    proc regex_create(pattern: *[]char): *RegEx
    proc regex_destroy(regex: *[]*RegEx)
    proc regex_match(regex: *RegEx; str: *[]char): char

    // from respack.h
    type
        ResId = *[]char

    proc respack_destroy(pack: *[]*ResPack)
    proc respack_text(pack: *ResPack; id: ResId): *[]char
    proc respack_file(pack: *ResPack; id: ResId; size: *[]integer): *[]byte

    // from stream.h
    type
        endian_t = (endian_t_invalid, ekLITEND, ekBIGEND)

    type
        unicode_t = (ekUTF8, ekUTF16, ekUTF32)
        int_least16_t = shortint
        int_fast16_t = integer
        int64_t = integer
        uint_fast8_t = byte
        uint_least16_t = shortint
        uint_fast64_t = integer
        real32_t = real
        real64_t = longreal
        ltoken_t =  ( ltoken_t_invalid,   
	        ekTSLCOM,
					ekTMLCOM,
					ekTSPACE,
					ekTEOL,
	
					ekTLESS,        // < */
					ekTGREAT,       // > */
					ekTCOMMA,       // , */				
					ekTPERIOD,      // . */
					ekTSCOLON,      // ; */
					ekTCOLON,       // : */
	
					ekTOPENPAR,     // ( */
					ekTCLOSPAR,     // ) */
					ekTOPENBRAC,    // [ */
					ekTCLOSBRAC,    // ] */
					ekTOPENCURL,    // { */
					ekTCLOSCURL,    // } */
			
					ekTPLUS,        // + */
					ekTMINUS,       // - */
					ekTASTERK,      // * */
					ekTEQUALS,      // = */
	
					ekTDOLLAR,      // $ */
					ekTPERCENT,     // % */
					ekTPOUND,       // # */
					ekTAMPER,       // & */
	
					ekTAPOST,       // ' */
					ekTQUOTE,       // " */
					ekTCIRCUM,      // ^ */
					ekTTILDE,       // ~ */
					ekTEXCLA,       // ! */
					ekTQUEST,       // ? */
					ekTVLINE,       // | */
					ekTSLASH,       // / */
					ekTBSLASH,      // \ */
					ekTAT,          // @ */
	
					ekTINTEGER,
					ekTOCTAL,
					ekTHEX,
					ekTREAL,
					ekTSTRING,
					ekTIDENT,
	
					ekTUNDEF,
					ekTCORRUP,
					ekTEOF,
	
					ekTRESERVED )

    proc stm_from_block(data: *[]byte; size: integer): *Stream
    proc stm_memory(size: integer): *Stream
    proc stm_from_file(pathname: *[]char; error: *[1]ferror_t): *Stream
    proc stm_to_file(pathname: *[]char; error: *[1]ferror_t): *Stream
    proc stm_append_file(pathname: *[]char; error: *[1]ferror_t): *Stream
    proc stm_socket(socket: *Socket): *Stream
    proc stm_close(stm: *[]*Stream)
    proc stm_get_write_endian(stm: *Stream): endian_t
    proc stm_get_read_endian(stm: *Stream): endian_t
    proc stm_set_write_endian(stm: *Stream; endian: endian_t)
    proc stm_set_read_endian(stm: *Stream; endian: endian_t)
    proc stm_get_write_utf(stm: *Stream): unicode_t
    proc stm_get_read_utf(stm: *Stream): unicode_t
    proc stm_set_write_utf(stm: *Stream; format: unicode_t)
    proc stm_set_read_utf(stm: *Stream; format: unicode_t)
    proc stm_bytes_written(stm: *Stream): integer
    proc stm_bytes_readed(stm: *Stream): integer
    proc stm_col(stm: *Stream): integer
    proc stm_row(stm: *Stream): integer
    proc stm_token_col(stm: *Stream): integer
    proc stm_token_row(stm: *Stream): integer
    proc stm_token_lexeme(stm: *Stream; size: *[]integer): *[]char
    proc stm_token_escapes(stm: *Stream; active_escapes: char)
    proc stm_token_spaces(stm: *Stream; active_spaces: char)
    proc stm_token_comments(stm: *Stream; active_comments: char)
    proc stm_state(stm: *Stream): sstate_t
    proc stm_file_err(stm: *Stream): ferror_t
    proc stm_sock_err(stm: *Stream): serror_t
    proc stm_corrupt(stm: *Stream)
    proc stm_str(stm: *Stream): *String
    proc stm_buffer(stm: *Stream): *[]byte
    proc stm_buffer_size(stm: *Stream): integer
    proc stm_write(stm: *Stream; data: *[]byte; size: integer)
    proc stm_write_char(stm: *Stream; codepoint: integer)
    proc stm_printf(stm: *Stream; format: *[]char): integer [varargs]
    proc stm_writef(stm: *Stream; str: *[]char): integer
    proc stm_write_bool(stm: *Stream; value: char)
    proc stm_write_i8(stm: *Stream; value: char)
    proc stm_write_i16(stm: *Stream; value: shortint)
    proc stm_write_i32(stm: *Stream; value: integer)
    proc stm_write_i64(stm: *Stream; value: integer)
    proc stm_write_u8(stm: *Stream; value: byte)
    proc stm_write_u16(stm: *Stream; value: shortint)
    proc stm_write_u32(stm: *Stream; value: integer)
    proc stm_write_u64(stm: *Stream; value: integer)
    proc stm_write_r32(stm: *Stream; value: real)
    proc stm_write_r64(stm: *Stream; value: longreal)
    proc stm_read(stm: *Stream; data: *[]byte; size: integer): integer
    proc stm_read_char(stm: *Stream): integer
    proc stm_read_chars(stm: *Stream; n: integer): *[]char
    proc stm_read_line(stm: *Stream): *[]char
    proc stm_read_trim(stm: *Stream): *[]char
    proc stm_read_token(stm: *Stream): ltoken_t
    proc stm_read_i8_tok(stm: *Stream): char
    proc stm_read_i16_tok(stm: *Stream): shortint
    proc stm_read_i32_tok(stm: *Stream): integer
    proc stm_read_i64_tok(stm: *Stream): integer
    proc stm_read_u8_tok(stm: *Stream): byte
    proc stm_read_u16_tok(stm: *Stream): shortint
    proc stm_read_u32_tok(stm: *Stream): integer
    proc stm_read_u64_tok(stm: *Stream): integer
    proc stm_read_r32_tok(stm: *Stream): real
    proc stm_read_r64_tok(stm: *Stream): longreal
    proc stm_read_bool(stm: *Stream): char
    proc stm_read_i8(stm: *Stream): char
    proc stm_read_i16(stm: *Stream): shortint
    proc stm_read_i32(stm: *Stream): integer
    proc stm_read_i64(stm: *Stream): integer
    proc stm_read_u8(stm: *Stream): byte
    proc stm_read_u16(stm: *Stream): shortint
    proc stm_read_u32(stm: *Stream): integer
    proc stm_read_u64(stm: *Stream): integer
    proc stm_read_r32(stm: *Stream): real
    proc stm_read_r64(stm: *Stream): longreal
    proc stm_skip(stm: *Stream; size: integer)
    proc stm_skip_bom(stm: *Stream)
    proc stm_skip_token(stm: *Stream; token: ltoken_t)
    proc stm_flush(stm: *Stream)
    proc stm_pipe(from: *Stream; to_: *Stream; n: integer)

    // from strings.h
    type
        platform_t = ( platform_t_invalid, ekWINDOWS, ekMACOS, ekLINUX, ekIOS )

    proc tc(str: *String): *[]char
    proc tcc(str: *String): *[]char
    proc str_c(str: *[]char): *String
    proc str_cn(str: *[]char; n: integer): *String
    proc str_trim(str: *[]char): *String
    proc str_trim_n(str: *[]char; n: integer): *String
    proc str_copy(str: *String): *String
    proc str_printf(format: *[]char): *String [varargs]
    proc str_path(platform: platform_t; format: *[]char): *String [varargs]
    proc str_cpath(format: *[]char): *String [varargs]
    proc str_relpath(path1: *[]char; path2: *[]char): *String
    proc str_repl(str: *[]char): *String [varargs]
    proc str_reserve(n: integer): *String
    proc str_fill(n: integer; c: char): *String
    proc str_read(stream: *Stream): *String
    proc str_write(stream: *Stream; str: *String)
    proc str_writef(stream: *Stream; str: *String)
    proc str_copy_c(dest: *[]char; size: integer; src: *[]char)
    proc str_copy_cn(dest: *[]char; size: integer; src: *[]char; n: integer)
    proc str_cat(dest: *[]*String; src: *[]char)
    proc str_cat_c(dest: *[]char; size: integer; src: *[]char)
    proc str_upd(str: *[]*String; new_str: *[]char)
    proc str_destroy(str: *[1]*String)
    proc str_destopt(str: *[1]*String)
    proc str_len(str: *String): integer
    proc str_len_c(str: *[]char): integer
    proc str_nchars(str: *String): integer
    proc str_prefix(str1: *[]char; str2: *[]char): integer
    proc str_is_prefix(str: *[]char; prefix: *[]char): char
    proc str_is_sufix(str: *[]char; sufix: *[]char): char
    proc str_scmp(str1: *String; str2: *String): integer
    proc str_cmp(str1: *String; str2: *[]char): integer
    proc str_cmp_c(str1: *[]char; str2: *[]char): integer
    proc str_cmp_cn(str1: *[]char; str2: *[]char; n: integer): integer
    proc str_empty(str: *String): char
    proc str_empty_c(str: *[]char): char
    proc str_equ(str1: *String; str2: *[]char): char
    proc str_equ_c(str1: *[]char; str2: *[]char): char
    proc str_equ_cn(str1: *[]char; str2: *[]char; n: integer): char
    proc str_equ_nocase(str1: *[]char; str2: *[]char): char
    proc str_equ_end(str: *[]char; end_: *[]char): char
    proc str_upper(str: *String)
    proc str_lower(str: *String)
    proc str_upper_c(dest: *[]char; size: integer; str: *[]char)
    proc str_lower_c(dest: *[]char; size: integer; str: *[]char)
    proc str_subs(str: *String; replace: char; with_: char)
    proc str_repl_c(str: *[]char; replace: *[]char; with_: *[]char)
    proc str_str(str: *[]char; substr: *[]char): *[]char
    proc str_split(str: *[]char; substr: *[]char; left: *[]*String; right: *[]*String): char
    proc str_split_trim(str: *[]char; substr: *[]char; left: *[]*String; right: *[]*String): char
    proc str_split_pathname(pathname: *[]char; path: *[]*String; file: *[]*String)
    proc str_split_pathext(pathname: *[]char; path: *[]*String; file: *[]*String; ext: *[]*String)
    proc str_filename(pathname: *[]char): *[]char
    proc str_filext(pathname: *[]char): *[]char
    proc str_find(array_: *[]String; str: *[]char): integer
    proc str_to_i8(str: *[]char; base: integer; error: *[]char): char
    proc str_to_i16(str: *[]char; base: integer; error: *[]char): shortint
    proc str_to_i32(str: *[]char; base: integer; error: *[]char): integer
    proc str_to_i64(str: *[]char; base: integer; error: *[]char): integer
    proc str_to_u8(str: *[]char; base: integer; error: *[]char): byte
    proc str_to_u16(str: *[]char; base: integer; error: *[]char): shortint
    proc str_to_u32(str: *[]char; base: integer; error: *[]char): integer
    proc str_to_u64(str: *[]char; base: integer; error: *[]char): integer
    proc str_to_r32(str: *[]char; error: *[]char): real
    proc str_to_r64(str: *[]char; error: *[]char): longreal

    // from bfile.h
    type
        file_mode_t = ( file_mode_t_invalid, ekREAD, ekWRITE, ekAPPEND )

    // TODO proc bfile_dir_work(pathname: *[]char; size: integer): integer
    // TODO proc bfile_dir_set_work(pathname: *[]char; error: *[1]ferror_t): char
    proc bfile_dir_home(pathname: *[]char; size: integer): integer
    proc bfile_dir_data(pathname: *[]char; size: integer): integer
    proc bfile_dir_exec(pathname: *[]char; size: integer): integer
    proc bfile_dir_create(pathname: *[]char; error: *[1]ferror_t): char
    proc bfile_dir_open(pathname: *[]char; error: *[1]ferror_t): *Dir
    proc bfile_dir_close(dir: *[]*Dir)
    proc bfile_dir_get(dir: *Dir; name: *[]char; size: integer; type_: *[1]file_type_t; fsize: *[]integer; updated: *Date; error: *[1]ferror_t): char
    proc bfile_dir_delete(pathname: *[]char; error: *[1]ferror_t): char
    proc bfile_create(pathname: *[]char; error: *[1]ferror_t): *File
    proc bfile_open(pathname: *[]char; mode: file_mode_t; error: *[1]ferror_t): *File
    proc bfile_close(file: *[]*File)
    proc bfile_lstat(pathname: *[]char; type_: *[1]file_type_t; size: *[]integer; updated: *Date; error: *[1]ferror_t): char
    proc bfile_fstat(file: *File; type_: *[1]file_type_t; size: *[]integer; updated: *Date; error: *[1]ferror_t): char
    proc bfile_read(file: *File; data: *[]byte; size: integer; rsize: *[]integer; error: *[1]ferror_t): char
    proc bfile_write(file: *File; data: *[]byte; size: integer; wsize: *[]integer; error: *[1]ferror_t): char
    proc bfile_delete(pathname: *[]char; error: *[1]ferror_t): char

    // from bmutex.h
    proc bmutex_create(): *Mutex
    proc bmutex_close(mutex: *[]*Mutex)
    proc bmutex_lock(mutex: *Mutex)
    proc bmutex_unlock(mutex: *Mutex)

    // from bproc.h
    proc bproc_exec(command: *[]char; error: *[1]ferror_t): *Proc
    proc bproc_close(proc_: *[]*Proc)
    proc bproc_cancel(proc_: *Proc): char
    proc bproc_wait(proc_: *Proc): integer
    proc bproc_finish(proc_: *Proc; code: *[]integer): char
    proc bproc_read(proc_: *Proc; data: *[]byte; size: integer; rsize: *[]integer; error: *[1]ferror_t): char
    proc bproc_eread(proc_: *Proc; data: *[]byte; size: integer; rsize: *[]integer; error: *[1]ferror_t): char
    proc bproc_write(proc_: *Proc; data: *[]byte; size: integer; wsize: *[]integer; error: *[1]ferror_t): char
    proc bproc_read_close(proc_: *Proc): char
    proc bproc_eread_close(proc_: *Proc): char
    proc bproc_write_close(proc_: *Proc): char
    proc bproc_exit(code: integer)

    // from bsocket.h
    proc bsocket_connect(ip: integer; port: shortint; timeout_ms: integer; error: *[1]ferror_t): *Socket
    proc bsocket_server(port: shortint; max_connect: integer; error: *[1]ferror_t): *Socket
    proc bsocket_accept(socket: *Socket; timeout_ms: integer; error: *[1]ferror_t): *Socket
    proc bsocket_close(socket: *[]*Socket)
    proc bsocket_local_ip(socket: *Socket; ip: *[]integer; port: *[]shortint)
    proc bsocket_remote_ip(socket: *Socket; ip: *[]integer; port: *[]shortint)
    proc bsocket_read_timeout(socket: *Socket; timeout_ms: integer)
    proc bsocket_write_timeout(socket: *Socket; timeout_ms: integer)
    proc bsocket_read(socket: *Socket; data: *[]byte; size: integer; rsize: *[]integer; error: *[1]ferror_t): char
    proc bsocket_write(socket: *Socket; data: *[]byte; size: integer; wsize: *[]integer; error: *[1]ferror_t): char
    proc bsocket_url_ip(url: *[]char; error: *[1]ferror_t): integer
    proc bsocket_str_ip(ip: *[]char): integer
    proc bsocket_ip_str(ip: integer): *[]char
    proc bsocket_hton2(dest: *[]byte; src: *[]byte)
    proc bsocket_hton4(dest: *[]byte; src: *[]byte)
    proc bsocket_hton8(dest: *[]byte; src: *[]byte)
    proc bsocket_ntoh2(dest: *[]byte; src: *[]byte)
    proc bsocket_ntoh4(dest: *[]byte; src: *[]byte)
    proc bsocket_ntoh8(dest: *[]byte; src: *[]byte)

    // from bthread.h
    type
        FPtr_thread_main = proc(data: *void): integer

    proc bthread_create_imp(thmain: FPtr_thread_main; data: *void): *Thread
    proc bthread_current_id(): integer
    proc bthread_close(thread: *[]*Thread)
    proc bthread_cancel(thread: *Thread): char
    proc bthread_wait(thread: *Thread): integer
    proc bthread_finish(thread: *Thread; code: *[]integer): char
    proc bthread_sleep(milliseconds: integer)

    // from btime.h
    proc btime_now(): integer
    proc btime_date(date: *Date)
    proc btime_to_micro(date: *Date): integer
    proc btime_to_date(micro: integer; date: *Date)

    // from log.h
    proc log_printf(format: *[]char): integer [varargs]
    proc log_output(std: char; err: char)
    proc log_file(pathname: *[]char)
    proc log_get_file(): *[]char

    // from osbs.h
    proc osbs_start
    proc osbs_finish
    proc osbs_platform(): platform_t
    proc osbs_windows(): win_t
    proc osbs_endian(): endian_t

    // from osbs.hxx
    type
        device_t = ( device_t_invalid, ekDESKTOP, ekPHONE, ekTABLET )

    type
        win_t = ( win_t_invalid,
        	ekWIN_9x,
			ekWIN_NT4,
			ekWIN_2K,
			ekWIN_XP,
			ekWIN_XP1,
			ekWIN_XP2,
			ekWIN_XP3,
			ekWIN_VI,
			ekWIN_VI1,
			ekWIN_VI2,
			ekWIN_7,
			ekWIN_71,
			ekWIN_8,
			ekWIN_81,
			ekWIN_10,
			ekWIN_NO )

    type
        week_day_t = (ekSUNDAY, ekMONDAY, ekTUESDAY, ekWEDNESDAY, ekTHURSDAY, ekFRIDAY, ekSATURDAY)
        ferror_t = integer
    const
        ekFBIG = 9
        ekFBIGNAME = 4
        ekFEXISTS = 1
        ekFLOCK = 8
        ekFNOACCESS = 7
        ekFNOEMPTY = 6
        ekFNOFILE = 3
        ekFNOFILES = 5
        ekFNOPATH = 2
        ekFOK = 11
        ekFUNDEF = 10

    type
        perror_t = integer
    const
        ekPEXEC = 2
        ekPOK = 3
        ekPPIPE = 1

    type
        serror_t = integer
    const
        ekSNOHOST = 2
        ekSNONET = 1
        ekSOK = 6
        ekSSTREAM = 4
        ekSTIMEOUT = 3
        ekSUNDEF = 5

    type
        Dir = cstruct end
        File = cstruct end
        Mutex = cstruct end
        Proc = cstruct end
        Thread = cstruct end
        Socket = cstruct end


    // from bmath.h
    proc bmath_cosf(angle: real): real
    proc bmath_cosd(angle: longreal): longreal
    proc bmath_sinf(angle: real): real
    proc bmath_sind(angle: longreal): longreal
    proc bmath_tanf(angle: real): real
    proc bmath_tand(angle: longreal): longreal
    proc bmath_acosf(cos: real): real
    proc bmath_acosd(cos: longreal): longreal
    proc bmath_asinf(sin: real): real
    proc bmath_asind(sin: longreal): longreal
    proc bmath_atan2f(y: real; x: real): real
    proc bmath_atan2d(y: longreal; x: longreal): longreal
    proc bmath_norm_anglef(a: real): real
    proc bmath_norm_angled(a: longreal): longreal
    proc bmath_sqrtf(value: real): real
    proc bmath_sqrtd(value: longreal): longreal
    proc bmath_isqrtf(value: real): real
    proc bmath_isqrtd(value: longreal): longreal
    proc bmath_logf(value: real): real
    proc bmath_logd(value: longreal): longreal
    proc bmath_log10f(value: real): real
    proc bmath_log10d(value: longreal): longreal
    proc bmath_expf(value: real): real
    proc bmath_expd(value: longreal): longreal
    proc bmath_powf(base: real; exponent: real): real
    proc bmath_powd(base: longreal; exponent: longreal): longreal
    proc bmath_absf(value: real): real
    proc bmath_absd(value: longreal): longreal
    proc bmath_maxf(value1: real; value2: real): real
    proc bmath_maxd(value1: longreal; value2: longreal): longreal
    proc bmath_minf(value1: real; value2: real): real
    proc bmath_mind(value1: longreal; value2: longreal): longreal
    proc bmath_clampf(value: real; min: real; max: real): real
    proc bmath_clampd(value: longreal; min: longreal; max: longreal): longreal
    proc bmath_modf(num: real; den: real): real
    proc bmath_modd(num: longreal; den: longreal): longreal
    proc bmath_modff(value: real; intpart: *[]real): real
    proc bmath_modfd(value: longreal; intpart: *[]longreal): longreal
    proc bmath_precf(value: real): integer
    proc bmath_precd(value: longreal): integer
    proc bmath_roundf(value: real): real
    proc bmath_roundd(value: longreal): longreal
    proc bmath_round_stepf(value: real; step: real): real
    proc bmath_round_stepd(value: longreal; step: longreal): longreal
    proc bmath_floorf(value: real): real
    proc bmath_floord(value: longreal): longreal
    proc bmath_ceilf(value: real): real
    proc bmath_ceild(value: longreal): longreal
    proc bmath_rand_seed(seed: integer)
    proc bmath_randf(from: real; to_: real): real
    proc bmath_randd(from: longreal; to_: longreal): longreal
    proc bmath_randi(from: integer; to_: integer): integer
    proc bmath_rand_env(seed: integer): *REnv
    proc bmath_rand_destroy(env: *[]*REnv)
    proc bmath_rand_mtf(env: *REnv; from: real; to_: real): real
    proc bmath_rand_mtd(env: *REnv; from: longreal; to_: longreal): longreal
    proc bmath_rand_mti(env: *REnv; from: integer; to_: integer): integer

    // from bmem.h
    proc bmem_aligned_malloc(size: integer; align: integer): *[]byte
    proc bmem_aligned_realloc(mem: *[]byte; size: integer; new_size: integer; align: integer): *[]byte
    proc bmem_free(mem: *[]byte)
    proc bmem_set1(dest: *[]byte; size: integer; mask: byte)
    proc bmem_set4(dest: *[]byte; size: integer; mask: *[]byte)
    proc bmem_set8(dest: *[]byte; size: integer; mask: *[]byte)
    proc bmem_set16(dest: *[]byte; size: integer; mask: *[]byte)
    proc bmem_cmp(mem1: *[]byte; mem2: *[]byte; size: integer): integer
    proc bmem_is_zero(mem: *[]byte; size: integer): char
    proc bmem_set_zero(dest: *[]byte; size: integer)
    proc bmem_copy(dest: *[]byte; src: *[]byte; size: integer)
    proc bmem_move(dest: *[]byte; src: *[]byte; size: integer)
    proc bmem_overlaps(mem1: *[]byte; mem2: *[]byte; size1: integer; size2: integer): char
    proc bmem_rev(mem: *[]byte; size: integer)
    proc bmem_rev2(mem: *[]byte)
    proc bmem_rev4(mem: *[]byte)
    proc bmem_rev8(mem: *[]byte)
    proc bmem_rev_elems_imp(data: *[]byte; num_elems: integer; elem_size: integer)
    proc bmem_revcopy(dest: *[]byte; src: *[]byte; size: integer)
    proc bmem_swap(mem1: *[]byte; mem2: *[]byte; size: integer)
    proc bmem_shuffle(mem: *[]byte; size: integer; esize: integer)

    // from bstd.h
    proc bstd_sprintf(str: *[]char; size: integer; format: *[]char): integer [varargs]
    proc bstd_printf(format: *[]char): integer [varargs]
    proc bstd_eprintf(format: *[]char): integer [varargs]
    proc bstd_writef(str: *[]char): integer
    proc bstd_ewritef(str: *[]char): integer
    proc bstd_read(data: *[]byte; size: integer; rsize: *[]integer): char
    proc bstd_write(data: *[]byte; size: integer; wsize: *[]integer): char
    proc bstd_ewrite(data: *[]byte; size: integer; wsize: *[]integer): char
    proc bstd_abort
    proc bstd_debug_break

    // from cassert.h
    type
        FPtr_assert = proc(item: *void; group: integer; caption: *[]char; detail: *[]char; file: *[]char; line: integer)

    proc cassert_set_func(data: *void; func_assert: FPtr_assert)
    proc cassert_imp(cond: char; detail: *[]char; file: *[]char; line: integer)
    proc cassert_fatal_imp(cond: char; detail: *[]char; file: *[]char; line: integer)
    proc cassert_no_null_imp(ptr: *void; detail: *[]char; file: *[]char; line: integer)
    proc cassert_no_nullf_imp(ptr: proc; detail: *[]char; file: *[]char; line: integer)
    proc cassert_default_imp(file: *[]char; line: integer)

    // from ptr.h
    proc ptr_dget_imp(dptr: *[]*void): *void
    proc ptr_dget_no_null_imp(dptr: *[]*void): *void
    proc ptr_destopt_imp(dptr: *[]*void; func_destroy: FPtr_destroy)
    proc ptr_copyopt_imp(ptr: *void; func_copy: FPtr_copy): *void

    // from sewer.hxx
    type
        REnv = cstruct end


    // from types.h
    proc min_u32(v1: integer; v2: integer): integer
    proc min_r32(v1: real; v2: real): real
    proc min_r64(v1: longreal; v2: longreal): longreal
    proc max_u32(v1: integer; v2: integer): integer
    proc max_r32(v1: real; v2: real): real
    proc max_r64(v1: longreal; v2: longreal): longreal
    proc abs_r32(v: real): real
    proc to_u8(v: integer): byte

    // from unicode.h
    proc unicode_convers(from_str: *[]char; to_str: *[]char; from: unicode_t; to_: unicode_t; osize: integer): integer
    proc unicode_convers_n(from_str: *[]char; to_str: *[]char; from: unicode_t; to_: unicode_t; isize: integer; osize: integer): integer
    proc unicode_convers_nbytes(str: *[]char; from: unicode_t; to_: unicode_t): integer
    proc unicode_nbytes(str: *[]char; format: unicode_t): integer
    proc unicode_nchars(str: *[]char; format: unicode_t): integer
    proc unicode_to_u32(str: *[]char; format: unicode_t): integer
    proc unicode_to_u32b(str: *[]char; format: unicode_t; bytes: *[]integer): integer
    proc unicode_to_char(codepoint: integer; str: *[]char; format: unicode_t): integer
    proc unicode_valid_str(str: *[]char; format: unicode_t): boolean
    proc unicode_valid_str_n(str: *[]char; size: integer; format: unicode_t): boolean
    proc unicode_valid(codepoint: integer): boolean
    proc unicode_next(str: *[]char; format: unicode_t): *[]char
    proc unicode_back(str: *[]char; format: unicode_t): *[]char
    proc unicode_isascii(codepoint: integer): boolean
    proc unicode_isalnum(codepoint: integer): boolean
    proc unicode_isalpha(codepoint: integer): boolean
    proc unicode_iscntrl(codepoint: integer): boolean
    proc unicode_isdigit(codepoint: integer): boolean
    proc unicode_isgraph(codepoint: integer): boolean
    proc unicode_isprint(codepoint: integer): boolean
    proc unicode_ispunct(codepoint: integer): boolean
    proc unicode_isspace(codepoint: integer): boolean
    proc unicode_isxdigit(codepoint: integer): boolean
    proc unicode_islower(codepoint: integer): boolean
    proc unicode_isupper(codepoint: integer): boolean
    proc unicode_tolower(codepoint: integer): integer
    proc unicode_toupper(codepoint: integer): integer
end NAppCore
