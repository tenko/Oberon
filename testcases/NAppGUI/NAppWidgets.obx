// Generated by C2OBX 2021-11-10 on 2022-01-05T14:45:41
// source was first generated using the following command:
// gcc -E -I../src/osbs -I../src/sewer -I../src/draw2d -I../src/geom2d -I../src/gui \
//     -I../src/osgui -I../src/core -I../todo -I../src/osapp -I../src/osgui/gtk3 -I../src/draw2d/gtk3 \
//     -DNAPPGUI_LIBRARY -DCMAKE_RELEASE -DNAPPGUI_BUILD_DIR -DNAPPGUI_SOURCE_DIR -D__GTK3__ \
//     -DNAPPGUI_BUILD guiall.h
// and then manually improved by Rochus Keller
// Original NAppGUI C API by Francisco Garcia Collado, MIT Licence

definition NAppWidgets [extern 'C', dll 'NAppGUI']

	import C := NAppCore, D := NAppDraw
	
    // from button.h
    proc button_push(): *Button
    proc button_check(): *Button
    proc button_check3(): *Button
    proc button_radio(): *Button
    proc button_flat(): *Button
    proc button_flatgle(): *Button
    proc button_OnClick(button: *Button; listener: *C.Listener)
    proc button_text(button: *Button; text: *[]char)
    proc button_text_alt(button: *Button; text: *[]char)
    proc button_tooltip(button: *Button; text: *[]char)
    proc button_font(button: *Button; font: *D.Font)
    proc button_image(button: *Button; image: *D.Image)
    proc button_image_alt(button: *Button; image: *D.Image)
    proc button_state(button: *Button; state: state_t)
    proc button_get_state(button: *Button): state_t

    // from cell.h
    proc cell_control_imp(cell: *Cell; type_: *[]char): *void
    proc cell_layout(cell: *Cell): *Layout
    proc cell_enabled(cell: *Cell; enabled: char)
    proc cell_visible(cell: *Cell; visible: char)
    proc cell_focus(cell: *Cell)
    proc cell_padding(cell: *Cell; pall: real)
    proc cell_padding2(cell: *Cell; ptb: real; plr: real)
    proc cell_padding4(cell: *Cell; pt: real; pr: real; pb: real; pl: real)
    proc cell_dbind_imp(cell: *Cell; type_: *[]char; size: shortint; mname: *[]char; mtype: *[]char; moffset: shortint; msize: shortint)

    // from combo.h
    proc combo_create(): *Combo
    proc combo_OnFilter(combo: *Combo; listener: *C.Listener)
    proc combo_OnChange(combo: *Combo; listener: *C.Listener)
    proc combo_text(combo: *Combo; text: *[]char)
    proc combo_align(combo: *Combo; align: D.align_t)
    proc combo_tooltip(combo: *Combo; text: *[]char)
    proc combo_color(combo: *Combo; color: integer)
    proc combo_color_focus(combo: *Combo; color: integer)
    proc combo_bgcolor(combo: *Combo; color: integer)
    proc combo_bgcolor_focus(combo: *Combo; color: integer)
    proc combo_phtext(combo: *Combo; text: *[]char)
    proc combo_phcolor(combo: *Combo; color: integer)
    proc combo_phstyle(combo: *Combo; fstyle: integer)
    proc combo_get_text(combo: *Combo; index: integer): *[]char
    proc combo_count(combo: *Combo): integer
    proc combo_add_elem(combo: *Combo; text: *[]char; image: *D.Image)
    proc combo_set_elem(combo: *Combo; index: integer; text: *[]char; image: *D.Image)
    proc combo_ins_elem(combo: *Combo; index: integer; text: *[]char; image: *D.Image)
    proc combo_del_elem(combo: *Combo; index: integer)
    proc combo_duplicates(combo: *Combo; duplicates: char)

    // from comwin.h
    proc comwin_open_file(parent: *Window; ftypes: *[]*[]char; size: integer; start_dir: *[]char): *[]char
    proc comwin_save_file(parent: *Window; ftypes: *[]*[]char; size: integer; start_dir: *[]char): *[]char
    proc comwin_color(parent: *Window; title: *[]char; x: real; y: real; halign: D.align_t; valign: D.align_t; current: integer; colors: *[]integer; n: integer; OnChange: *C.Listener)

    // from edit.h
    proc edit_create(): *Edit
    proc edit_multiline(): *Edit
    proc edit_OnFilter(edit: *Edit; listener: *C.Listener)
    proc edit_OnChange(edit: *Edit; listener: *C.Listener)
    proc edit_text(edit: *Edit; text: *[]char)
    proc edit_font(edit: *Edit; font: *D.Font)
    proc edit_align(edit: *Edit; align: D.align_t)
    proc edit_passmode(edit: *Edit; passmode: char)
    proc edit_editable(edit: *Edit; is_editable: char)
    proc edit_autoselect(edit: *Edit; autoselect: char)
    proc edit_tooltip(edit: *Edit; text: *[]char)
    proc edit_color(edit: *Edit; color: integer)
    proc edit_color_focus(edit: *Edit; color: integer)
    proc edit_bgcolor(edit: *Edit; color: integer)
    proc edit_bgcolor_focus(edit: *Edit; color: integer)
    proc edit_phtext(edit: *Edit; text: *[]char)
    proc edit_phcolor(edit: *Edit; color: integer)
    proc edit_phstyle(edit: *Edit; fstyle: integer)
    proc edit_get_text(edit: *Edit): *[]char

    // from globals.h
    proc globals_device(): C.device_t
    proc globals_resolution(resolution: *D.S2Df)
    proc globals_mouse_position(): D.V2Df

    // from gui.h
    type
        FPtr_respack = proc(locale: *[]char): *C.ResPack
        ResId = *[]char

    proc gui_start
    proc gui_finish
    proc gui_respack(funcCResPack: FPtr_respack)
    proc gui_language(lang: *[]char)
    proc gui_text(id: ResId): *[]char
    proc gui_image(id: ResId): *D.Image
    proc gui_file(id: ResId; size: *[]integer): *[]byte
    proc gui_dark_mode(): char
    proc gui_alt_color(light_color: integer; dark_color: integer): integer
    proc gui_label_color(): integer
    proc gui_view_color(): integer
    proc gui_line_color(): integer
    proc gui_link_color(): integer
    proc gui_border_color(): integer
    proc gui_resolution(): D.S2Df
    proc gui_mouse_pos(): D.V2Df
    proc gui_OnThemeChanged(listener: *C.Listener)
    proc evbind_object_imp(e: *C.Event; type_: *[]char): *void
    proc evbind_modify_imp(e: *C.Event; type_: *[]char; size: shortint; mname: *[]char; mtype: *[]char; moffset: shortint; msize: shortint): char

    // from gui.hxx
    type
        table_flag_t = integer
    const
        ekTBBGCOLOR = 256
        ekTBCHECK = 64
        ekTBCOMBO = 8
        ekTBEDIT = 4
        ekTBICON16 = 2
        ekTBPOPUP = 16
        ekTBRADIO = 32
        ekTBROWALT = 512
        ekTBROWPRESEL = 1024
        ekTBTEXT = 1
        ekTBTOOLTIP = 128

    type
        window_flag_t = integer
    const
        ekWNCLOSE = 16
        ekWNEDGE = 1
        ekWNESC = 128
        ekWNFLAG = 0
        ekWNMAX = 4
        ekWNMIN = 8
        ekWNRES = 32
        ekWNRETURN = 64
        ekWNSRES = 62
        ekWNSTD = 26
        ekWNTITLE = 2

    type
        event_t = integer
    const
        ekEVBUTTON = 1025
        ekEVCLICK = 1041
        ekEVCOLOR = 1050
        ekEVDOWN = 1039
        ekEVDRAG = 1042
        ekEVDRAW = 1034
        ekEVENTER = 1036
        ekEVEXIT = 1037
        ekEVFOCUS = 1032
        ekEVHEADCLICK = 1058
        ekEVHEADSIZE = 1057
        ekEVKEYDOWN = 1044
        ekEVKEYUP = 1045
        ekEVLABEL = 1024
        ekEVLISTBOX = 1027
        ekEVMENU = 1033
        ekEVMOVED = 1038
        ekEVOBJCHANGE = 1052
        ekEVPOPUP = 1026
        ekEVRESIZE = 1035
        ekEVSLIDER = 1028
        ekEVTBLCELL = 1056
        ekEVTBLNROWS = 1054
        ekEVTBLROW = 1055
        ekEVTBLSIZE = 1053
        ekEVTHEME = 1051
        ekEVTXTCHANGE = 1031
        ekEVTXTFILTER = 1030
        ekEVUP = 1040
        ekEVUPDOWN = 1029
        ekEVWHEEL = 1043
        ekEVWNDCLOSE = 1049
        ekEVWNDMOVED = 1046
        ekEVWNDSIZE = 1048
        ekEVWNDSIZING = 1047

    type
        Control = cstruct end
        Label = cstruct end
        Button = cstruct end
        PopUp = cstruct end
        Edit = cstruct end
        Combo = cstruct end
        ListBox = cstruct end
        UpDown = cstruct end
        Slider = cstruct end
        Progress = cstruct end
        View = cstruct end
        TextView = cstruct end
        ImageView = cstruct end
        TableView = cstruct end
        SplitView = cstruct end
        Layout = cstruct end
        Cell = cstruct end
        Panel = cstruct end
        Window = cstruct end
        Menu = cstruct end
        MenuItem = cstruct end
        mouse_t = ( mouse_t_invalid, ekMLEFT, ekMRIGHT, ekMMIDDLE )
        
        EvButton = cstruct
	            index: integer
					    state: state_t
					    text: *[]char
					    end
				EvSlider = cstruct
										pos: real
								    incr: real
								    step: integer
								   end
				EvText = cstruct
							    text: *[]char
							    cpos: integer
							    end
				EvTextFilter = cstruct
								apply: boolean
								text: carray kTEXTFILTER_SIZE of char
								cpos: integer
								end
				EvDraw = cstruct
									ctx: *D.DCtx
									x,y,width,height: integer
									end
(* TODO
typedef struct _evmouse_t EvMouse;
typedef struct _evwheel_t EvWheel;
typedef struct _evkey_t EvKey;
typedef struct _evpos_t EvPos;
typedef struct _evsize_t EvSize;
typedef struct _evwinclose_t EvWinClose;
typedef struct _evmenu_t EvMenu;

typedef struct _evheader_t EvHeader;
typedef struct _evtbpos_t EvTbPos;
typedef struct _evtbrow_t EvTbRow;
typedef struct _evtbcell_t EvTbCell;
*)
		const kTEXTFILTER_SIZE =  1024

    type
        close_t = ( close_t_invalid, ekCLESC, ekCLINTRO, ekCLBUTTON, ekCLDEACT )

    //proc arrst_FPtrCResPack_end

    // from imageview.h
    type
        scale_t = ( scale_t_invalid, ekAUTO, ekSNONE, ekASPECT, ekASPECTDW )

    proc imageview_create(): *ImageView
    proc imageview_size(view: *ImageView; size: D.S2Df)
    proc imageview_scale(view: *ImageView; scale: scale_t)
    proc imageview_image(view: *ImageView; image: *D.Image)
    proc imageview_OnClick(view: *ImageView; listener: *C.Listener)
    proc imageview_OnOverDraw(view: *ImageView; listener: *C.Listener)

    // from label.h
    proc label_create(): *Label
    proc label_multiline(): *Label
    proc label_OnClick(label: *Label; listener: *C.Listener)
    proc label_text(label: *Label; text: *[]char)
    proc label_font(label: *Label; font: *D.Font)
    proc label_style_over(label: *Label; fstyle: integer)
    proc label_align(label: *Label; align: D.align_t)
    proc label_color(label: *Label; color: integer)
    proc label_color_over(label: *Label; color: integer)
    proc label_bgcolor(label: *Label; color: integer)
    proc label_bgcolor_over(label: *Label; color: integer)

    // from layout.h
    type
        orient_t = ( orient_t_invalid, ekHORIZONTAL, ekVERTICAL )

    proc layout_create(ncols: integer; nrows: integer): *Layout
    proc layout_cell(layout: *Layout; col: integer; row: integer): *Cell
    proc layout_label(layout: *Layout; label: *Label; col: integer; row: integer)
    proc layout_button(layout: *Layout; button: *Button; col: integer; row: integer)
    proc layout_popup(layout: *Layout; popup: *PopUp; col: integer; row: integer)
    proc layout_edit(layout: *Layout; edit: *Edit; col: integer; row: integer)
    proc layout_combo(layout: *Layout; combo: *Combo; col: integer; row: integer)
    proc layout_listbox(layout: *Layout; list: *ListBox; col: integer; row: integer)
    proc layout_updown(layout: *Layout; updown: *UpDown; col: integer; row: integer)
    proc layout_slider(layout: *Layout; slider: *Slider; col: integer; row: integer)
    proc layout_progress(layout: *Layout; progress: *Progress; col: integer; row: integer)
    proc layout_view(layout: *Layout; view: *View; col: integer; row: integer)
    proc layout_textview(layout: *Layout; view: *TextView; col: integer; row: integer)
    proc layout_imageview(layout: *Layout; view: *ImageView; col: integer; row: integer)
    proc layout_tableview(layout: *Layout; view: *TableView; col: integer; row: integer)
    proc layout_splitview(layout: *Layout; view: *SplitView; col: integer; row: integer)
    proc layout_panel(layout: *Layout; panel: *Panel; col: integer; row: integer)
    proc layout_layout(layout: *Layout; sublayout: *Layout; col: integer; row: integer)
    proc layout_control_imp(layout: *Layout; col: integer; row: integer; type_: *[]char): *void
    proc layout_taborder(layout: *Layout; order: orient_t)
    proc layout_tabstop(layout: *Layout; col: integer; row: integer; tabstop: char)
    // TODO proc layout_content_size(layout: *Layout; size: D.S2Df)
    proc layout_hsize(layout: *Layout; col: integer; width: real)
    proc layout_vsize(layout: *Layout; row: integer; height: real)
    proc layout_hmargin(layout: *Layout; col: integer; margin: real)
    proc layout_vmargin(layout: *Layout; row: integer; margin: real)
    proc layout_hexpand(layout: *Layout; col: integer)
    proc layout_hexpand2(layout: *Layout; col1: integer; col2: integer; exp: real)
    proc layout_hexpand3(layout: *Layout; col1: integer; col2: integer; col3: integer; exp1: real; exp2: real)
    proc layout_vexpand(layout: *Layout; row: integer)
    proc layout_vexpand2(layout: *Layout; row1: integer; row2: integer; exp: real)
    proc layout_vexpand3(layout: *Layout; row1: integer; row2: integer; row3: integer; exp1: real; exp2: real)
    proc layout_halign(layout: *Layout; col: integer; row: integer; align: D.align_t)
    proc layout_valign(layout: *Layout; col: integer; row: integer; align: D.align_t)
    proc layout_show_col(layout: *Layout; col: integer; visible: char)
    proc layout_show_row(layout: *Layout; row: integer; visible: char)
    proc layout_margin(layout: *Layout; mall: real)
    proc layout_margin2(layout: *Layout; mtb: real; mlr: real)
    proc layout_margin4(layout: *Layout; mt: real; mr: real; mb: real; ml: real)
    proc layout_bgcolor(layout: *Layout; color: integer)
    proc layout_skcolor(layout: *Layout; color: integer)
    proc layout_update(layout: *Layout)
    proc layout_dbind_imp(layout: *Layout; listener: *C.Listener; type_: *[]char; size: shortint)
    proc layout_dbind_obj_imp(layout: *Layout; obj: *void; type_: *[]char)
    proc layout_dbind_update_imp(layout: *Layout; type_: *[]char; size: shortint; mname: *[]char; mtype: *[]char; moffset: shortint; msize: shortint)

    // from listbox.h
    proc listbox_create(): *ListBox
    proc listbox_OnSelect(listbox: *ListBox; listener: *C.Listener)
    proc listbox_size(listbox: *ListBox; size: D.S2Df)
    proc listbox_checkbox(listbox: *ListBox; show: char)
    proc listbox_multisel(listbox: *ListBox; multisel: char)
    proc listbox_add_elem(listbox: *ListBox; text: *[]char; image: *D.Image)
    proc listbox_set_elem(listbox: *ListBox; index: integer; text: *[]char; image: *D.Image)
    proc listbox_clear(listbox: *ListBox)
    proc listbox_color(listbox: *ListBox; index: integer; color: integer)
    proc listbox_select(listbox: *ListBox; index: integer; select: char)
    proc listbox_check(listbox: *ListBox; index: integer; check: char)
    proc listbox_count(listbox: *ListBox): integer
    proc listbox_text(listbox: *ListBox; index: integer): *[]char
    proc listbox_selected(listbox: *ListBox; index: integer): char
    proc listbox_checked(listbox: *ListBox; index: integer): char

    // from menu.h
    proc menu_create(): *Menu
    proc menu_destroy(menu: *[]*Menu)
    proc menu_item(menu: *Menu; item: *MenuItem)
    proc menu_launch(menu: *Menu; position: D.V2Df)
    proc menu_hide(menu: *Menu)
    proc menu_off_items(menu: *Menu)
    proc menu_get_item(menu: *Menu; index: integer): *MenuItem
    proc menu_size(menu: *Menu): integer

    // from menuitem.h
    type
        state_t = (ekOFF, ekON, ekMIXED)

    proc menuitem_create(): *MenuItem
    proc menuitem_separator(): *MenuItem
    proc menuitem_OnClick(item: *MenuItem; listener: *C.Listener)
    proc menuitem_enabled(item: *MenuItem; enabled: char)
    proc menuitem_visible(item: *MenuItem; visible: char)
    proc menuitem_text(item: *MenuItem; text: *[]char)
    proc menuitem_image(item: *MenuItem; image: *D.Image)
    proc menuitem_key(item: *MenuItem; key: C.vkey_t; modifiers: integer)
    proc menuitem_submenu(item: *MenuItem; submenu: *[]*Menu)
    proc menuitem_state(item: *MenuItem; state: state_t)

    // from panel.h
    proc panel_create(): *Panel
    proc panel_scroll(hscroll: char; vscroll: char): *Panel
    proc panel_data_imp(panel: *Panel; data: *[]*void; func_destroy_item: FPtr_destroy)
    proc panel_get_data_imp(panel: *Panel): *void
    proc panel_size(panel: *Panel; size: D.S2Df)
    proc panel_layout(panel: *Panel; layout: *Layout): integer
    proc panel_get_layout(panel: *Panel; index: integer): *Layout
    proc panel_visible_layout(panel: *Panel; index: integer)
    proc panel_update(panel: *Panel)
    proc panel_scroll_width(panel: *Panel): real
    proc panel_scroll_height(panel: *Panel): real

    // from popup.h
    proc popup_create(): *PopUp
    proc popup_OnSelect(popup: *PopUp; listener: *C.Listener)
    proc popup_tooltip(popup: *PopUp; text: *[]char)
    proc popup_add_elem(popup: *PopUp; text: *[]char; image: *D.Image)
    proc popup_set_elem(popup: *PopUp; index: integer; text: *[]char; image: *D.Image)
    proc popup_clear(popup: *PopUp)
    proc popup_count(popup: *PopUp): integer
    proc popup_list_height(popup: *PopUp; elems: integer)
    proc popup_selected(popup: *PopUp; index: integer)
    proc popup_get_selected(popup: *PopUp): integer

    // from progress.h
    proc progress_create(): *Progress
    proc progress_undefined(progress: *Progress; running: char)
    proc progress_value(progress: *Progress; value: real)

    // from slider.h
    proc slider_create(): *Slider
    proc slider_vertical(): *Slider
    proc slider_OnMoved(slider: *Slider; listener: *C.Listener)
    proc slider_tooltip(slider: *Slider; text: *[]char)
    proc slider_steps(slider: *Slider; steps: integer)
    proc slider_value(slider: *Slider; value: real)
    proc slider_get_value(slider: *Slider): real

    // from splitview.h
    proc splitview_horizontal(): *SplitView
    proc splitview_vertical(): *SplitView
    proc splitview_size(split: *SplitView; size: D.S2Df)
    proc splitview_view(split: *SplitView; view: *View)
    proc splitview_text(split: *SplitView; view: *TextView)
    proc splitview_split(split: *SplitView; child: *SplitView)
    proc splitview_panel(split: *SplitView; panel: *Panel)
    proc splitview_pos(split: *SplitView; pos: real)

    // from tableview.h

    proc tableview_create(num_cols: integer; flags: integer): *TableView
    proc tableview_OnNotify(view: *TableView; listener: *C.Listener)
    proc tableview_size(view: *TableView; size: D.S2Df)
    proc tableview_ctext(view: *TableView; id: integer; text: *[]char)
    proc tableview_cwidth(view: *TableView; id: integer; width: real)
    proc tableview_calign(view: *TableView; id: integer; align: D.align_t)
    proc tableview_get_cwidth(view: *TableView; id: integer): real
    proc tableview_get_size(view: *TableView; size: *D.S2Df)
    proc tableview_update(view: *TableView)

    // from textview.h

    proc textview_create(): *TextView
    proc textview_size(view: *TextView; size: D.S2Df)
    proc textview_clear(view: *TextView)
    proc textview_printf(view: *TextView; format: *[]char): integer [varargs]
    proc textview_writef(view: *TextView; text: *[]char)
    proc textview_rtf(view: *TextView; rtf_in: *C.Stream)
    proc textview_units(view: *TextView; units: integer)
    proc textview_family(view: *TextView; family: *[]char)
    proc textview_fsize(view: *TextView; size: real)
    proc textview_fstyle(view: *TextView; fstyle: integer)
    proc textview_color(view: *TextView; color: integer)
    proc textview_bgcolor(view: *TextView; color: integer)
    proc textview_pgcolor(view: *TextView; color: integer)
    proc textview_halign(view: *TextView; align: D.align_t)
    proc textview_lspacing(view: *TextView; scale: real)
    proc textview_bfspace(view: *TextView; space: real)
    proc textview_afspace(view: *TextView; space: real)
    proc textview_scroll_down(view: *TextView)
    proc textview_editable(view: *TextView; is_editable: char)

    // from updown.h
    proc updown_create(): *UpDown
    proc updown_OnClick(updown: *UpDown; listener: *C.Listener)
    proc updown_tooltip(updown: *UpDown; text: *[]char)

    // from view.h
    type
        FPtr_destroy = proc(item: *[]*void)

    proc view_create(): *View
    proc view_scroll(): *View
    proc view_data_imp(view: *View; data: *[]*void; func_destroy_data: FPtr_destroy)
    proc view_get_data_imp(view: *View): *void
    proc view_size(view: *View; size: D.S2Df)
    proc view_OnDraw(view: *View; listener: *C.Listener)
    proc view_OnSize(view: *View; listener: *C.Listener)
    proc view_OnEnter(view: *View; listener: *C.Listener)
    proc view_OnExit(view: *View; listener: *C.Listener)
    proc view_OnMove(view: *View; listener: *C.Listener)
    proc view_OnDown(view: *View; listener: *C.Listener)
    proc view_OnUp(view: *View; listener: *C.Listener)
    proc view_OnClick(view: *View; listener: *C.Listener)
    proc view_OnDrag(view: *View; listener: *C.Listener)
    proc view_OnWheel(view: *View; listener: *C.Listener)
    proc view_OnKeyDown(view: *View; listener: *C.Listener)
    proc view_OnKeyUp(view: *View; listener: *C.Listener)
    proc view_OnFocus(view: *View; listener: *C.Listener)
    proc view_keybuf(view: *View; buffer: *C.KeyBuf)
    proc view_get_size(view: *View; size: *D.S2Df)
    proc view_content_size(view: *View; size: D.S2Df; line: D.S2Df)
    proc view_scroll_x(view: *View; pos: real)
    proc view_scroll_y(view: *View; pos: real)
    proc view_scroll_size(view: *View; width: *[]real; height: *[]real)
    proc view_viewport(view: *View; pos: *D.V2Df; size: *D.S2Df)
    proc view_point_scale(view: *View; scale: *[]real)
    proc view_update(view: *View)
    proc view_native(view: *View): *void

    // from window.h
    type
        cursor_t = ( cursor_t_invalid, ekCARROW, ekCHAND, ekCIBEAM,
    					ekCCROSS, ekCSIZEWE, ekCSIZENS, ekCUSER )

    proc window_create(flags: integer): *Window
    proc window_destroy(window: *[1]*Window)
    proc window_panel(window: *Window; panel: *Panel)
    proc window_OnClose(window: *Window; listener: *C.Listener)
    proc window_OnMoved(window: *Window; listener: *C.Listener)
    proc window_OnResize(window: *Window; listener: *C.Listener)
    proc window_title(window: *Window; text: *[]char)
    proc window_show(window: *Window)
    proc window_hide(window: *Window)
    proc window_modal(window: *Window; parent: *Window): integer
    proc window_stop_modal(window: *Window; return_value: integer)
    proc window_update(window: *Window)
    proc window_origin(window: *Window; origin: D.V2Df)
    proc window_size(window: *Window; size: D.S2Df)
    proc window_get_origin(window: *Window): D.V2Df
    proc window_get_size(window: *Window): D.S2Df
    proc window_get_client_size(window: *Window): D.S2Df
    proc window_defbutton(window: *Window; button: *Button)
    proc window_cursor(window: *Window; cursor: cursor_t; image: *D.Image; hot_x: real; hot_y: real)

	  // from osmain.h, manually added
	  type
		  FPtr_app_create = proc 
		  FPtr_app_update = proc(app: *void; prtime: longreal; ctime: longreal)
		  FPtr_task_main = proc(data: *void)
		  FPtr_task_update = proc(data: *void)
		  FPtr_task_end = proc(data: *void; rvalue: integer)
		  
		proc osapp_finish()
		proc osapp_task_imp(data: *void; updtime: integer; func_task_main: FPtr_task_main; 
			func_task_update: FPtr_task_update; func_task_end: FPtr_task_end)
		proc osapp_menubar(menu: Menu; window: Window)
		proc osapp_open_url(url: *[]char)
		proc osmain_imp(argc: integer; argv: *[]*[]char; instance: *void; lframe: longreal; 
			func_create: FPtr_app_create; func_update: FPtr_app_update; func_destroy: FPtr_destroy; 
			options: *[]char)
		  
end NAppWidgets
